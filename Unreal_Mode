<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>Unreal Mode - OSDev Wiki</title>
<meta charset="UTF-8" />
<meta name="generator" content="MediaWiki 1.18.0" />
<link rel="shortcut icon" href="favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "Unreal_Mode", "wgTitle": "Unreal Mode", "wgCurRevisionId": 20259, "wgArticleId": 1715, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["X86 CPU", "FAQ"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script>
<style type="text/css">/*<![CDATA[*/
.source-asm {line-height: normal;}
.source-asm li, .source-asm pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for asm
 * CSS class: source-asm, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.asm.source-asm .de1, .asm.source-asm .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.asm.source-asm  {font-family:monospace;}
.asm.source-asm .imp {font-weight: bold; color: red;}
.asm.source-asm li, .asm.source-asm .li1 {font-weight: normal; vertical-align:top;}
.asm.source-asm .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.asm.source-asm .li2 {font-weight: bold; vertical-align:top;}
.asm.source-asm .kw1 {color: #00007f; font-weight: bold;}
.asm.source-asm .kw2 {color: #0000ff; font-weight: bold;}
.asm.source-asm .kw3 {color: #00007f;}
.asm.source-asm .kw4 {color: #000000; font-weight: bold;}
.asm.source-asm .kw5 {color: #000000; font-weight: bold;}
.asm.source-asm .co1 {color: #666666; font-style: italic;}
.asm.source-asm .co2 {color: #adadad; font-style: italic;}
.asm.source-asm .es0 {color: #000099; font-weight: bold;}
.asm.source-asm .br0 {color: #009900; font-weight: bold;}
.asm.source-asm .sy0 {color: #339933;}
.asm.source-asm .st0 {color: #7f007f;}
.asm.source-asm .nu0 {color: #0000ff;}
.asm.source-asm .ln-xtra, .asm.source-asm li.ln-xtra, .asm.source-asm div.ln-xtra {background-color: #ffc;}
.asm.source-asm span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Unreal_Mode action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">Unreal Mode</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="Unreal_Mode#mw-head">navigation</a>,
					<a href="Unreal_Mode#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div lang="en" dir="ltr" class="mw-content-ltr"><p><b>Unreal mode</b> consist of breaking the '64Kb' limit of real mode segments, but still keeping 16 bits instruction and <tt>segment*16+offset</tt> address formation by tweaking the <a href="Descriptor_Cache" title="Descriptor Cache">descriptor caches</a>.
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Unreal_Mode#Usage"><span class="tocnumber">1</span> <span class="toctext">Usage</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Unreal_Mode#Implementation"><span class="tocnumber">2</span> <span class="toctext">Implementation</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="Unreal_Mode#Big_Unreal_Mode"><span class="tocnumber">2.1</span> <span class="toctext">Big Unreal Mode</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="Unreal_Mode#Huge_Unreal_Mode"><span class="tocnumber">2.2</span> <span class="toctext">Huge Unreal Mode</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="Unreal_Mode#Compiler_Support"><span class="tocnumber">3</span> <span class="toctext">Compiler Support</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="Unreal_Mode#Smaller_C"><span class="tocnumber">3.1</span> <span class="toctext">Smaller C</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h2> <span class="mw-headline" id="Usage">Usage</span></h2>
<p>Unreal mode is recommended in the two following cases&#160;:
</p>
<ul><li> you're trying to extend a legacy 16-bits DOS program so that it can deal with larger data and neither vm86, nor xms is suitable for your needs
</li><li> you're trying to load something that will run in 32 bits mode and which is larger than 640Kb (so you cannot load it in conventional memory) and you don't want to bother with a disk driver called from pmode yet, and you do not wish to switch between real and protected mode for copying chunks from the conventional memory buffer to the high memory areas...
</li></ul>
<p>You still will not have full access to all physical RAM if you do not have have the <a href="A20_Line" title="A20 Line">A20 Line</a> enabled; all the "odd" 1-megabyte blocks will be unavailable.
</p>
<h2> <span class="mw-headline" id="Implementation">Implementation</span></h2>
<p>The reason for doing this is to enable 32-bit offsets in real mode. However, you won't be able to go past 1 meg quite yet.
</p><p>In protected mode, the bits 3-15 in the segment register are an index into the descriptor table. That's why in this code 0x08 = 1000b gets you the 1 entry.
</p><p>When this register given a "selector", a "segment descriptor cache register" is filled with the descriptor values, including the size (or limit). After the switch back to real mode, these values are not modified, regardless of what value is in the 16-bit segment register. So the 64k limit is no longer valid and 32-bit offsets can be used with the real-mode addressing rules (i.e. shift segment 4 bits, then add offset).
</p>
<h3> <span class="mw-headline" id="Big_Unreal_Mode">Big Unreal Mode</span></h3>
<p>These will not have affected CS. <br />
Therefore IP is unaffected by all this, so the code itself is still limited to 64 K.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="co1">; Assembly example</span>
&#160;
<span class="co1">; nasmw boot.asm -o boot.bin</span>
<span class="co1">; partcopy boot.bin 0 200 -f0</span>
&#160;
<span class="br0">&#91;</span><span class="kw4">ORG</span> <span class="nu0">0x7c00</span><span class="br0">&#93;</span>              <span class="co1">; add to offsets</span>
&#160;
start<span class="sy0">:</span>   <span class="kw1">xor</span> <span class="kw3">ax</span><span class="sy0">,</span> <span class="kw3">ax</span>       <span class="co1">; make it zero</span>
   <span class="kw1">mov</span> <span class="kw3">ds</span><span class="sy0">,</span> <span class="kw3">ax</span>             <span class="co1">; DS=0</span>
   <span class="kw1">mov</span> <span class="kw3">ss</span><span class="sy0">,</span> <span class="kw3">ax</span>             <span class="co1">; stack starts at seg 0</span>
   <span class="kw1">mov</span> <span class="kw3">sp</span><span class="sy0">,</span> <span class="nu0">0x9c00</span>         <span class="co1">; 2000h past code start, </span>
                          <span class="co1">; making the stack 7.5k in size</span>
&#160;
   <span class="kw1">cli</span>                    <span class="co1">; no interrupts</span>
   <span class="kw1">push</span> <span class="kw3">ds</span>                <span class="co1">; save real mode</span>
&#160;
   <span class="kw1">lgdt</span> <span class="br0">&#91;</span>gdtinfo<span class="br0">&#93;</span>         <span class="co1">; load gdt register</span>
&#160;
   <span class="kw1">mov</span>  <span class="kw3">eax</span><span class="sy0">,</span> <span class="kw3">cr0</span>          <span class="co1">; switch to pmode by</span>
   <span class="kw1">or</span> <span class="kw3">al</span><span class="sy0">,</span><span class="nu0">1</span>                <span class="co1">; set pmode bit</span>
   <span class="kw1">mov</span>  <span class="kw3">cr0</span><span class="sy0">,</span> <span class="kw3">eax</span>
&#160;
   <span class="kw1">jmp</span> $<span class="sy0">+</span><span class="nu0">2</span>                <span class="co1">; tell 386/486 to not crash</span>
&#160;
   <span class="kw1">mov</span>  <span class="kw3">bx</span><span class="sy0">,</span> <span class="nu0">0x08</span>          <span class="co1">; select descriptor 1</span>
   <span class="kw1">mov</span>  <span class="kw3">ds</span><span class="sy0">,</span> <span class="kw3">bx</span>            <span class="co1">; 8h = 1000b</span>
&#160;
   <span class="kw1">and</span> <span class="kw3">al</span><span class="sy0">,</span><span class="nu0">0xFE</span>            <span class="co1">; back to realmode</span>
   <span class="kw1">mov</span>  <span class="kw3">cr0</span><span class="sy0">,</span> <span class="kw3">eax</span>          <span class="co1">; by toggling bit again</span>
&#160;
   <span class="kw1">pop</span> <span class="kw3">ds</span>                 <span class="co1">; get back old segment</span>
   <span class="kw1">sti</span>
&#160;
   <span class="kw1">mov</span> <span class="kw3">bx</span><span class="sy0">,</span> <span class="nu0">0x0f01</span>         <span class="co1">; attrib/char of smiley</span>
   <span class="kw1">mov</span> <span class="kw3">eax</span><span class="sy0">,</span> <span class="nu0">0x0b8000</span>      <span class="co1">; note 32 bit offset</span>
   <span class="kw1">mov</span> <span class="kw5">word</span> <span class="br0">&#91;</span><span class="kw3">ds</span><span class="sy0">:</span><span class="kw3">eax</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw3">bx</span>
&#160;
   <span class="kw1">jmp</span> $                  <span class="co1">; loop forever</span>
&#160;
gdtinfo<span class="sy0">:</span>
   <span class="kw4">dw</span> gdt_end <span class="sy0">-</span> gdt <span class="sy0">-</span> <span class="nu0">1</span>   <span class="co1">;last byte in table</span>
   <span class="kw4">dd</span> gdt                 <span class="co1">;start of table</span>
&#160;
gdt         <span class="kw4">dd</span> <span class="nu0">0</span><span class="sy0">,</span><span class="nu0">0</span>        <span class="co1">; entry 0 is always unused</span>
flatdesc    <span class="kw4">db</span> <span class="nu0">0xff</span><span class="sy0">,</span> <span class="nu0">0xff</span><span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">10010010b</span><span class="sy0">,</span> <span class="nu0">11001111b</span><span class="sy0">,</span> <span class="nu0">0</span>
gdt_end<span class="sy0">:</span>
&#160;
   times <span class="nu0">510</span><span class="sy0">-</span><span class="br0">&#40;</span>$<span class="sy0">-</span>$$<span class="br0">&#41;</span> <span class="kw4">db</span> <span class="nu0">0</span>  <span class="co1">; fill sector w/ 0's</span>
   <span class="kw4">db</span> <span class="nu0">0x55</span>                <span class="co1">; req'd by some BIOSes</span>
   <span class="kw4">db</span> <span class="nu0">0xAA</span></pre></div></div>
<h3> <span class="mw-headline" id="Huge_Unreal_Mode">Huge Unreal Mode</span></h3>
<p>Huge Unreal Mode enables code over 64K. However, it is more difficult to implement as real mode interrupts do not automatically save the high 16 bits of EIP. Initialization is simple though, you just load a 32 bit code segment:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="co1">; Assembly example</span>
&#160;
<span class="co1">; nasmw boot.asm -o boot.bin</span>
<span class="co1">; partcopy boot.bin 0 200 -f0</span>
&#160;
<span class="br0">&#91;</span><span class="kw4">ORG</span> <span class="nu0">0x7c00</span><span class="br0">&#93;</span>              <span class="co1">; add to offsets</span>
&#160;
start<span class="sy0">:</span>   <span class="kw1">xor</span> <span class="kw3">ax</span><span class="sy0">,</span> <span class="kw3">ax</span>       <span class="co1">; make it zero</span>
&#160;
   <span class="sy0">...</span>                    <span class="co1">; As before</span>
&#160;
   <span class="kw1">mov</span>  <span class="kw3">cr0</span><span class="sy0">,</span> <span class="kw3">eax</span>
   <span class="kw1">jmp</span> <span class="nu0">0x8</span><span class="sy0">:</span>pmode
pmode<span class="sy0">:</span>
   <span class="kw1">mov</span>  <span class="kw3">bx</span><span class="sy0">,</span> <span class="nu0">0x10</span>          <span class="co1">; select descriptor 2, instead of 1</span>
   <span class="kw1">mov</span>  <span class="kw3">ds</span><span class="sy0">,</span> <span class="kw3">bx</span>            <span class="co1">; 10h = 10000b</span>
&#160;
   <span class="kw1">and</span> <span class="kw3">al</span><span class="sy0">,</span><span class="nu0">0xFE</span>            <span class="co1">; back to realmode</span>
   <span class="kw1">mov</span>  <span class="kw3">cr0</span><span class="sy0">,</span> <span class="kw3">eax</span>          <span class="co1">; by toggling bit again</span>
   <span class="kw1">jmp</span> <span class="nu0">0x0</span><span class="sy0">:</span>huge_unreal
huge_unreal<span class="sy0">:</span>
&#160;
   <span class="sy0">...</span>                    <span class="co1">;As before</span>
&#160;
gdtinfo<span class="sy0">:</span>
   <span class="kw4">dw</span> gdt_end <span class="sy0">-</span> gdt <span class="sy0">-</span> <span class="nu0">1</span>   <span class="co1">;last byte in table</span>
   <span class="kw4">dd</span> gdt                 <span class="co1">;start of table</span>
&#160;
gdt         <span class="kw4">dd</span> <span class="nu0">0</span><span class="sy0">,</span><span class="nu0">0</span>        <span class="co1">; entry 0 is always unused</span>
flatcode    <span class="kw4">db</span> <span class="nu0">0xff</span><span class="sy0">,</span> <span class="nu0">0xff</span><span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">10011010b</span><span class="sy0">,</span> <span class="nu0">10001111b</span><span class="sy0">,</span> <span class="nu0">0</span>
flatdata    <span class="kw4">db</span> <span class="nu0">0xff</span><span class="sy0">,</span> <span class="nu0">0xff</span><span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">10010010b</span><span class="sy0">,</span> <span class="nu0">11001111b</span><span class="sy0">,</span> <span class="nu0">0</span>
gdt_end<span class="sy0">:</span>
&#160;
   times <span class="nu0">510</span><span class="sy0">-</span><span class="br0">&#40;</span>$<span class="sy0">-</span>$$<span class="br0">&#41;</span> <span class="kw4">db</span> <span class="nu0">0</span>  <span class="co1">; fill sector w/ 0's</span>
   <span class="kw4">db</span> <span class="nu0">0x55</span>                <span class="co1">; req'd by some BIOSes</span>
   <span class="kw4">db</span> <span class="nu0">0xAA</span></pre></div></div>
<p>WARNING: this may not work on some emulators or some hardware. This is because of direct 32 bit PMODE -&gt; (Un)real mode.
</p>
<h2> <span class="mw-headline" id="Compiler_Support">Compiler Support</span></h2>
<h3> <span class="mw-headline" id="Smaller_C">Smaller C</span></h3>
<p>The <a href="Smaller_C" title="Smaller C">Smaller C</a> compiler supports unreal mode. It produces <a href="MZ" title="MZ">MZ</a> executables for unreal mode (can be loaded with <a href="BootProg" title="BootProg">BootProg</a>).
</p><p>The code and the stack are to be located below the 1MB mark and the stack size is limited by 64KB (IOW, there's nothing unusual about CS:(E)IP, SS:(E)SP, it's a natural setup for MZ executables in DOS). The DS and ES segment registers are set to 0, so C pointers can work as flat 32-bit physical addresses and address data or memory-mapped devices anywhere in the first 4GB of memory.
</p><p>The startup code of these executables performs the necessary relocation (there are only custom relocations and no standard MZ relocations, which may simplify loading of the executables) and sets up unreal mode before passing control to the equivalent of <i>main()</i>. See <i>srclib/c0du.asm</i> and other C/assembly code under <i>srclib</i> in the compiler source tree for how to write bits of assembly code for unreal mode (look for <i>asm("inline asm code")</i> under <i>#ifdef __UNREAL__</i>).
</p><p>You can try out unreal mode in DOS (e.g. in DOSBox, VirtualBox + FreeDOS) as the compiler fully supports the DOS + unreal mode combo in its C library. <i>tests/vesalfb.c</i> is a simple example of setting up a <a href="VESA" title="VESA" class="mw-redirect">VESA</a> graphics mode with the linear frame buffer enabled and drawing something on the screen in unreal mode.
</p>
<!-- 
NewPP limit report
Preprocessor node count: 53/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:1715-0!*!0!!en!*!* and timestamp 20180121050521 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=Unreal_Mode&amp;oldid=20259">http://wiki.osdev.org/index.php?title=Unreal_Mode&amp;oldid=20259</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="http://wiki.osdev.org/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="Category:X86_CPU" title="Category:X86 CPU">X86 CPU</a></li><li><a href="Category:FAQ" title="Category:FAQ">FAQ</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Unreal_Mode" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="Unreal_Mode"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk" class="new"><span><a href="http://wiki.osdev.org/index.php?title=Talk:Unreal_Mode&amp;action=edit&amp;redlink=1"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="Unreal_Mode#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="Unreal_Mode" >Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=Unreal_Mode&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=Unreal_Mode&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="Unreal_Mode#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="http://wiki.osdev.org/index.php" id="searchform">
		<input type='hidden' name="title" value="Special:Search"/>
				<input type="search" name="search" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput" />		<input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" />		<input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" />			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="/Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="/Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="/OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="/OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="/OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li iskins/common/images/osdev.png);" href="/Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/Unreal_Mode" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/Unreal_Mode" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=Unreal_Mode&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=Unreal_Mode&amp;oldid=20259" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 22 January 2017, at 20:06.</li>
											<li id="footer-info-viewcount">This page has been accessed 52,779 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.030 secs. -->
	</body>
</html>
