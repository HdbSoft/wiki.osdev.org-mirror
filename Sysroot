<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>Meaty Skeleton - OSDev Wiki</title>
<meta charset="UTF-8" />
<meta name="generator" content="MediaWiki 1.18.0" />
<link rel="canonical" href="Meaty_Skeleton" />
<link rel="shortcut icon" href="favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "Meaty_Skeleton", "wgTitle": "Meaty Skeleton", "wgCurRevisionId": 21673, "wgArticleId": 3448, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["Level 1 Tutorials", "Bare bones tutorials", "C"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script>
<style type="text/css">/*<![CDATA[*/
.source-make {line-height: normal;}
.source-make li, .source-make pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for make
 * CSS class: source-make, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.make.source-make .de1, .make.source-make .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.make.source-make  {font-family:monospace;}
.make.source-make .imp {font-weight: bold; color: red;}
.make.source-make li, .make.source-make .li1 {font-weight: normal; vertical-align:top;}
.make.source-make .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.make.source-make .li2 {font-weight: bold; vertical-align:top;}
.make.source-make .kw1 {color: #666622; font-weight: bold;}
.make.source-make .kw2 {color: #990000;}
.make.source-make .co1 {color: #339900; font-style: italic;}
.make.source-make .co2 {color: #000099; font-weight: bold;}
.make.source-make .es0 {color: #000099; font-weight: bold;}
.make.source-make .br0 {color: #004400;}
.make.source-make .sy0 {color: #004400;}
.make.source-make .st0 {color: #CC2200;}
.make.source-make .nu0 {color: #CC2200;}
.make.source-make .re0 {color: #000088; font-weight: bold;}
.make.source-make .re1 {color: #0000CC; font-weight: bold;}
.make.source-make .re2 {color: #000088;}
.make.source-make .ln-xtra, .make.source-make li.ln-xtra, .make.source-make div.ln-xtra {background-color: #ffc;}
.make.source-make span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-bash {line-height: normal;}
.source-bash li, .source-bash pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for bash
 * CSS class: source-bash, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.bash.source-bash .de1, .bash.source-bash .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.bash.source-bash  {font-family:monospace;}
.bash.source-bash .imp {font-weight: bold; color: red;}
.bash.source-bash li, .bash.source-bash .li1 {font-weight: normal; vertical-align:top;}
.bash.source-bash .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.bash.source-bash .li2 {font-weight: bold; vertical-align:top;}
.bash.source-bash .kw1 {color: #000000; font-weight: bold;}
.bash.source-bash .kw2 {color: #c20cb9; font-weight: bold;}
.bash.source-bash .kw3 {color: #7a0874; font-weight: bold;}
.bash.source-bash .co0 {color: #666666; font-style: italic;}
.bash.source-bash .co1 {color: #800000;}
.bash.source-bash .co2 {color: #cc0000; font-style: italic;}
.bash.source-bash .co3 {color: #000000; font-weight: bold;}
.bash.source-bash .co4 {color: #666666;}
.bash.source-bash .es1 {color: #000099; font-weight: bold;}
.bash.source-bash .es2 {color: #007800;}
.bash.source-bash .es3 {color: #007800;}
.bash.source-bash .es4 {color: #007800;}
.bash.source-bash .es5 {color: #780078;}
.bash.source-bash .es_h {color: #000099; font-weight: bold;}
.bash.source-bash .br0 {color: #7a0874; font-weight: bold;}
.bash.source-bash .sy0 {color: #000000; font-weight: bold;}
.bash.source-bash .st0 {color: #ff0000;}
.bash.source-bash .st_h {color: #ff0000;}
.bash.source-bash .nu0 {color: #000000;}
.bash.source-bash .re0 {color: #007800;}
.bash.source-bash .re1 {color: #007800;}
.bash.source-bash .re2 {color: #007800;}
.bash.source-bash .re4 {color: #007800;}
.bash.source-bash .re5 {color: #660033;}
.bash.source-bash .ln-xtra, .bash.source-bash li.ln-xtra, .bash.source-bash div.ln-xtra {background-color: #ffc;}
.bash.source-bash span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #b1b100;}
.c.source-c .kw2 {color: #000000; font-weight: bold;}
.c.source-c .kw3 {color: #000066;}
.c.source-c .kw4 {color: #993333;}
.c.source-c .co1 {color: #666666; font-style: italic;}
.c.source-c .co2 {color: #339933;}
.c.source-c .coMULTI {color: #808080; font-style: italic;}
.c.source-c .es0 {color: #000099; font-weight: bold;}
.c.source-c .es1 {color: #000099; font-weight: bold;}
.c.source-c .es2 {color: #660099; font-weight: bold;}
.c.source-c .es3 {color: #660099; font-weight: bold;}
.c.source-c .es4 {color: #660099; font-weight: bold;}
.c.source-c .es5 {color: #006699; font-weight: bold;}
.c.source-c .br0 {color: #009900;}
.c.source-c .sy0 {color: #339933;}
.c.source-c .st0 {color: #ff0000;}
.c.source-c .nu0 {color: #0000dd;}
.c.source-c .nu6 {color: #208080;}
.c.source-c .nu8 {color: #208080;}
.c.source-c .nu12 {color: #208080;}
.c.source-c .nu16 {color:#800080;}
.c.source-c .nu17 {color:#800080;}
.c.source-c .nu18 {color:#800080;}
.c.source-c .nu19 {color:#800080;}
.c.source-c .me1 {color: #202020;}
.c.source-c .me2 {color: #202020;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Meaty_Skeleton action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">Meaty Skeleton</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub">(Redirected from <a href="http://wiki.osdev.org/index.php?title=Sysroot&amp;redirect=no" title="Sysroot">Sysroot</a>)</div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="Sysroot#mw-head">navigation</a>,
					<a href="Sysroot#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div lang="en" dir="ltr" class="mw-content-ltr"><table style="font-size:95%; line-height:1.5em; padding:0.25em; float:right; margin: 0 0 8px 15px; clear:right; border:1px solid #aaaaaa; background:#eee; text-align:center;;"><tr><th>Difficulty level</th></tr><tr><td><a href="File:Difficulty_1.png" class="image"><img alt="Difficulty 1.png" src="images/d/d3/Difficulty_1.png" width="46" height="14" /></a><br />Beginner</td></tr></table><table style="font-size:95%; line-height:1.5em; padding:0.25em; float:right; margin: 0 0 8px 15px; clear: right; border:1px solid #aaaaaa; background:#eee; text-align:center; width:200px;&#160;;"><tr><th style="background:#ffce7b; padding:0.3em; font-size:1.1em;"><a href="Kernels" title="Kernels" class="mw-redirect">Kernel Designs</a></th></tr><tr><th>Models</th></tr><tr><td><div>
<p><a href="Monolithic_Kernel" title="Monolithic Kernel">Monolithic Kernel</a><br />
<a href="Microkernel" title="Microkernel">Microkernel</a><br />
<a href="Hybrid_Kernel" title="Hybrid Kernel">Hybrid Kernel</a><br />
<a href="Exokernel" title="Exokernel">Exokernel</a><br />
<a href="Nanokernel" title="Nanokernel" class="mw-redirect">Nano/Picokernel</a><br />
<a href="Exokernel#Cache_Kernel" title="Exokernel">Cache Kernel</a><br />
<a href="Exokernel#Virtualizing_Kernel" title="Exokernel">Virtualizing Kernel</a><br />
<a href="Megalithic_Kernel" title="Megalithic Kernel">Megalithic Kernel</a><br />
</p>
</div></td></tr><tr><th>Other Concepts</th></tr><tr><td><div>
<p><a href="Modular_Kernel" title="Modular Kernel">Modular Kernel</a><br />
<a href="Higher_Half_Kernel" title="Higher Half Kernel">Higher Half Kernel</a><br />
<a href="Creating_a_64-bit_kernel" title="Creating a 64-bit kernel">64-bit Kernel</a><br />
</p>
</div></td></tr></table>
<p>In this tutorial we continue from <a href="Bare_Bones" title="Bare Bones">Bare Bones</a> and create a minimal template
operating system suitable for further modification or as inspiration for your
initial operating system version. The <a href="Bare_Bones" title="Bare Bones">Bare Bones</a> tutorial only gives you the
absolutely minimal code to demonstrate how to correctly cross-compile a kernel,
however this is unsuitable as an example operating system. Additionally, this
tutorial implements neccesary ABI features needed to satisfy the ABI and
compiler contracts to prevent possible mysterious errors.
</p><p>This tutorial also serves as the initial template tutorial on how to
<a href="Creating_a_C_Library" title="Creating a C Library">create your own libc</a> (Standard C Library). The GCC
documentation explicitly states that libgcc requires the freestanding
environment to supply the <tt>memcmp</tt>, <tt>memcpy</tt>, <tt>memmove</tt>,
and <tt>memset</tt> functions, as well as <tt>abort</tt> on some platforms. We
will satisfy this requirement by creating a special kernel C library (libk) that
contains the parts of the user-space libc that are <i>freestanding</i> (doesn't
require any kernel features) as opposed to <i>hosted</i> libc features that need to
do system calls.
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Sysroot#Preface"><span class="tocnumber">1</span> <span class="toctext">Preface</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Sysroot#Bare_Bones"><span class="tocnumber">2</span> <span class="toctext">Bare Bones</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="Sysroot#Building_a_Cross-Compiler"><span class="tocnumber">3</span> <span class="toctext">Building a Cross-Compiler</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="Sysroot#Dependencies"><span class="tocnumber">4</span> <span class="toctext">Dependencies</span></a>
<ul>
<li class="toclevel-2 tocsection-5"><a href="Sysroot#Debian-family_Users"><span class="tocnumber">4.1</span> <span class="toctext">Debian-family Users</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-6"><a href="Sysroot#System_Root"><span class="tocnumber">5</span> <span class="toctext">System Root</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="Sysroot#System_Headers"><span class="tocnumber">6</span> <span class="toctext">System Headers</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="Sysroot#Makefile_Design"><span class="tocnumber">7</span> <span class="toctext">Makefile Design</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="Sysroot#Architecture_Directories"><span class="tocnumber">8</span> <span class="toctext">Architecture Directories</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="Sysroot#Kernel_Design"><span class="tocnumber">9</span> <span class="toctext">Kernel Design</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="Sysroot#libc_and_libk_Design"><span class="tocnumber">10</span> <span class="toctext">libc and libk Design</span></a></li>
<li class="toclevel-1 tocsection-12"><a href="Sysroot#Source_Code"><span class="tocnumber">11</span> <span class="toctext">Source Code</span></a>
<ul>
<li class="toclevel-2 tocsection-13"><a href="Sysroot#kernel"><span class="tocnumber">11.1</span> <span class="toctext">kernel</span></a>
<ul>
<li class="toclevel-3 tocsection-14"><a href="Sysroot#kernel.2Finclude.2Fkernel.2Ftty.h"><span class="tocnumber">11.1.1</span> <span class="toctext">kernel/include/kernel/tty.h</span></a></li>
<li class="toclevel-3 tocsection-15"><a href="Sysroot#kernel.2FMakefile"><span class="tocnumber">11.1.2</span> <span class="toctext">kernel/Makefile</span></a></li>
<li class="toclevel-3 tocsection-16"><a href="Sysroot#kernel.2Fkernel.2Fkernel.c"><span class="tocnumber">11.1.3</span> <span class="toctext">kernel/kernel/kernel.c</span></a></li>
<li class="toclevel-3 tocsection-17"><a href="Sysroot#kernel.2Farch.2Fi386.2Ftty.c"><span class="tocnumber">11.1.4</span> <span class="toctext">kernel/arch/i386/tty.c</span></a></li>
<li class="toclevel-3 tocsection-18"><a href="Sysroot#kernel.2Farch.2Fi386.2Fcrtn.S"><span class="tocnumber">11.1.5</span> <span class="toctext">kernel/arch/i386/crtn.S</span></a></li>
<li class="toclevel-3 tocsection-19"><a href="Sysroot#kernel.2Farch.2Fi386.2Fvga.h"><span class="tocnumber">11.1.6</span> <span class="toctext">kernel/arch/i386/vga.h</span></a></li>
<li class="toclevel-3 tocsection-20"><a href="Sysroot#kernel.2Farch.2Fi386.2Fmake.config"><span class="tocnumber">11.1.7</span> <span class="toctext">kernel/arch/i386/make.config</span></a></li>
<li class="toclevel-3 tocsection-21"><a href="Sysroot#kernel.2Farch.2Fi386.2Fcrti.S"><span class="tocnumber">11.1.8</span> <span class="toctext">kernel/arch/i386/crti.S</span></a></li>
<li class="toclevel-3 tocsection-22"><a href="Sysroot#kernel.2Farch.2Fi386.2Flinker.ld"><span class="tocnumber">11.1.9</span> <span class="toctext">kernel/arch/i386/linker.ld</span></a></li>
<li class="toclevel-3 tocsection-23"><a href="Sysroot#kernel.2Farch.2Fi386.2Fboot.S"><span class="tocnumber">11.1.10</span> <span class="toctext">kernel/arch/i386/boot.S</span></a></li>
<li class="toclevel-3 tocsection-24"><a href="Sysroot#kernel.2F.gitignore"><span class="tocnumber">11.1.11</span> <span class="toctext">kernel/.gitignore</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-25"><a href="Sysroot#libc_and_libk"><span class="tocnumber">11.2</span> <span class="toctext">libc and libk</span></a>
<ul>
<li class="toclevel-3 tocsection-26"><a href="Sysroot#libc.2Finclude.2Fstring.h"><span class="tocnumber">11.2.1</span> <span class="toctext">libc/include/string.h</span></a></li>
<li class="toclevel-3 tocsection-27"><a href="Sysroot#libc.2Finclude.2Fstdio.h"><span class="tocnumber">11.2.2</span> <span class="toctext">libc/include/stdio.h</span></a></li>
<li class="toclevel-3 tocsection-28"><a href="Sysroot#libc.2Finclude.2Fsys.2Fcdefs.h"><span class="tocnumber">11.2.3</span> <span class="toctext">libc/include/sys/cdefs.h</span></a></li>
<li class="toclevel-3 tocsection-29"><a href="Sysroot#libc.2Finclude.2Fstdlib.h"><span class="tocnumber">11.2.4</span> <span class="toctext">libc/include/stdlib.h</span></a></li>
<li class="toclevel-3 tocsection-30"><a href="Sysroot#libc.2FMakefile"><span class="tocnumber">11.2.5</span> <span class="toctext">libc/Makefile</span></a></li>
<li class="toclevel-3 tocsection-31"><a href="Sysroot#libc.2Fstdlib.2Fabort.c"><span class="tocnumber">11.2.6</span> <span class="toctext">libc/stdlib/abort.c</span></a></li>
<li class="toclevel-3 tocsection-32"><a href="Sysroot#libc.2Fstring.2Fmemmove.c"><span class="tocnumber">11.2.7</span> <span class="toctext">libc/string/memmove.c</span></a></li>
<li class="toclevel-3 tocsection-33"><a href="Sysroot#libc.2Fstring.2Fstrlen.c"><span class="tocnumber">11.2.8</span> <span class="toctext">libc/string/strlen.c</span></a></li>
<li class="toclevel-3 tocsection-34"><a href="Sysroot#libc.2Fstring.2Fmemcmp.c"><span class="tocnumber">11.2.9</span> <span class="toctext">libc/string/memcmp.c</span></a></li>
<li class="toclevel-3 tocsection-35"><a href="Sysroot#libc.2Fstring.2Fmemset.c"><span class="tocnumber">11.2.10</span> <span class="toctext">libc/string/memset.c</span></a></li>
<li class="toclevel-3 tocsection-36"><a href="Sysroot#libc.2Fstring.2Fmemcpy.c"><span class="tocnumber">11.2.11</span> <span class="toctext">libc/string/memcpy.c</span></a></li>
<li class="toclevel-3 tocsection-37"><a href="Sysroot#libc.2Fstdio.2Fputs.c"><span class="tocnumber">11.2.12</span> <span class="toctext">libc/stdio/puts.c</span></a></li>
<li class="toclevel-3 tocsection-38"><a href="Sysroot#libc.2Fstdio.2Fputchar.c"><span class="tocnumber">11.2.13</span> <span class="toctext">libc/stdio/putchar.c</span></a></li>
<li class="toclevel-3 tocsection-39"><a href="Sysroot#libc.2Fstdio.2Fprintf.c"><span class="tocnumber">11.2.14</span> <span class="toctext">libc/stdio/printf.c</span></a></li>
<li class="toclevel-3 tocsection-40"><a href="Sysroot#libc.2Farch.2Fi386.2Fmake.config"><span class="tocnumber">11.2.15</span> <span class="toctext">libc/arch/i386/make.config</span></a></li>
<li class="toclevel-3 tocsection-41"><a href="Sysroot#libc.2F.gitignore"><span class="tocnumber">11.2.16</span> <span class="toctext">libc/.gitignore</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-42"><a href="Sysroot#Miscellaneous"><span class="tocnumber">11.3</span> <span class="toctext">Miscellaneous</span></a>
<ul>
<li class="toclevel-3 tocsection-43"><a href="Sysroot#build.sh"><span class="tocnumber">11.3.1</span> <span class="toctext">build.sh</span></a></li>
<li class="toclevel-3 tocsection-44"><a href="Sysroot#clean.sh"><span class="tocnumber">11.3.2</span> <span class="toctext">clean.sh</span></a></li>
<li class="toclevel-3 tocsection-45"><a href="Sysroot#config.sh"><span class="tocnumber">11.3.3</span> <span class="toctext">config.sh</span></a></li>
<li class="toclevel-3 tocsection-46"><a href="Sysroot#default-host.sh"><span class="tocnumber">11.3.4</span> <span class="toctext">default-host.sh</span></a></li>
<li class="toclevel-3 tocsection-47"><a href="Sysroot#headers.sh"><span class="tocnumber">11.3.5</span> <span class="toctext">headers.sh</span></a></li>
<li class="toclevel-3 tocsection-48"><a href="Sysroot#iso.sh"><span class="tocnumber">11.3.6</span> <span class="toctext">iso.sh</span></a></li>
<li class="toclevel-3 tocsection-49"><a href="Sysroot#qemu.sh"><span class="tocnumber">11.3.7</span> <span class="toctext">qemu.sh</span></a></li>
<li class="toclevel-3 tocsection-50"><a href="Sysroot#target-triplet-to-arch.sh"><span class="tocnumber">11.3.8</span> <span class="toctext">target-triplet-to-arch.sh</span></a></li>
<li class="toclevel-3 tocsection-51"><a href="Sysroot#.gitignore"><span class="tocnumber">11.3.9</span> <span class="toctext">.gitignore</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-52"><a href="Sysroot#Cross-Compiling_the_Operating_System"><span class="tocnumber">12</span> <span class="toctext">Cross-Compiling the Operating System</span></a></li>
<li class="toclevel-1 tocsection-53"><a href="Sysroot#Troubleshooting"><span class="tocnumber">13</span> <span class="toctext">Troubleshooting</span></a></li>
<li class="toclevel-1 tocsection-54"><a href="Sysroot#Moving_Forward"><span class="tocnumber">14</span> <span class="toctext">Moving Forward</span></a>
<ul>
<li class="toclevel-2 tocsection-55"><a href="Sysroot#Renaming_MyOS_to_YourOS"><span class="tocnumber">14.1</span> <span class="toctext">Renaming MyOS to YourOS</span></a></li>
<li class="toclevel-2 tocsection-56"><a href="Sysroot#Improving_the_Build_System"><span class="tocnumber">14.2</span> <span class="toctext">Improving the Build System</span></a></li>
<li class="toclevel-2 tocsection-57"><a href="Sysroot#Stack_Smash_Protector"><span class="tocnumber">14.3</span> <span class="toctext">Stack Smash Protector</span></a></li>
<li class="toclevel-2 tocsection-58"><a href="Sysroot#Going_Further"><span class="tocnumber">14.4</span> <span class="toctext">Going Further</span></a></li>
<li class="toclevel-2 tocsection-59"><a href="Sysroot#User-Space"><span class="tocnumber">14.5</span> <span class="toctext">User-Space</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h2> <span class="mw-headline" id="Preface"> Preface </span></h2>
<p>This tutorial is an example on how you could structure your operating system in
a manner that will continue to serve you well for the foreseeable future. This
serves as both inspiration and as an example for those that wish to something
different, while as a base for the rest. The tutorial does embed a few important
concepts into your operating system such as the existence of a libc, as well as
indirectly other minor Unix and ABI semantics. Adapt what you wish from this
tutorial. Note that the shell script and Make-based build system constructed in
this tutorial is meant for Unix systems. There
is no pressing need to make this portable across all operating systems as this
is just an example.
</p><p>We will name this new example operating system <tt>myos</tt>. This is just a
placeholder and you should replace all occurrences of <tt>myos</tt> with what you
decide to call your operating system.
</p>
<h2> <span class="mw-headline" id="Bare_Bones"> Bare Bones </span></h2>
<dl><dd><i>Main article:</i> <a href="Bare_Bones" title="Bare Bones">Bare Bones</a>
</dd></dl>
<p>You are expected to have completed the <a href="Bare_Bones" title="Bare Bones">Bare Bones</a> tutorial before continuing
to this tutorial. It is not strictly neccesary to have completed <a href="Bare_Bones" title="Bare Bones">Bare Bones</a>,
but doing so confirms that your development environment works as well as
explaining a number of core things.
</p><p>You should probably discard the code you got from toying around with
<a href="Bare_Bones" title="Bare Bones">Bare Bones</a> and start over with this tutorial as your basis.
</p>
<h2> <span class="mw-headline" id="Building_a_Cross-Compiler"> Building a Cross-Compiler </span></h2>
<dl><dd><i>Main article: <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC Cross-Compiler</a>, <a href="Why_do_I_need_a_Cross_Compiler?" title="Why do I need a Cross Compiler?">Why do I need a Cross Compiler?</a></i>
</dd></dl>
<p>You <i>must</i> use a <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC Cross-Compiler</a> in this tutorial as in the
<a href="Bare_Bones" title="Bare Bones">Bare Bones</a> tutorial. You should use the <b>i686-elf</b> target in your
cross-compiler, though any <tt>ix86-elf</tt> target (but no less than i386) will
do fine for our purposes here.
</p><p>You <i>must</i> configure your cross-binutils with the <tt>--with-sysroot</tt> option, otherwise linking will mysteriously fail with the <i>this linker was not configured to use sysroots</i> error message. If you forgot to configure your cross-binutils with that option, you'll have to rebuild it, but you can keep your cross-gcc.
</p>
<h2> <span class="mw-headline" id="Dependencies"> Dependencies </span></h2>
<p>You will need these dependencies in order to complete this tutorial:
</p>
<ul><li> i686-elf toolchain, as discussed above.
</li><li> GRUB, for the grub-mkrescue command, along with the appropriate runtime files.
</li><li> Xorriso, the .iso creation engine used by grub-mkrescue.
</li><li> GNU make 4.0 or later.
</li><li> Qemu, optionally for testing the operating system.
</li></ul>
<p>This tutorial requires a GNU/Linux system, or a similar enough system. The BSD systems may almost work. OS X is not supported but can possibly be made to work with some changes. Windows is not supported, but Windows environments like Cygwin and Windows Subsystem For Linux (WSL) might work.
</p>
<h3> <span class="mw-headline" id="Debian-family_Users"> Debian-family Users </span></h3>
<p>Install the i686-elf toolchain as described above and then install the packages <tt>xorriso grub-pc-bin</tt>.
</p>
<h2> <span class="mw-headline" id="System_Root"> System Root </span></h2>
<p>Normally when you compile programs for your local operating system, the compiler locates development files such as headers and libraries in system directories such as:
</p>
<dl><dd><tt>/usr/include</tt>
</dd><dd><tt>/usr/lib</tt>
</dd></dl>
<p>These files are of course not usable for your operating system. Instead you want to have your own version of these directories that contains files for your operating system:
</p>
<dl><dd><tt>/home/bwayne/myos/sysroot/usr/include</tt>
</dd><dd><tt>/home/bwayne/myos/sysroot/usr/lib</tt>
</dd></dl>
<p>The <tt>/home/bwayne/myos/sysroot</tt> directory acts as a fake root directory for your operating system. This is called a system root, or <i>sysroot</i>.
</p><p>You can think of the sysroot as the root directory for your operating system. Your build process will build each component of your operating system (kernel, standard library, programs) and gradually install them into the system root. Ultimately the system root will be a fully functional root filesystem for your operating system, you format a partition and copy the files there, add the appropriate configuration files, configure a bootloader to load the kernel from there, and use your harddisk driver and filesystem driver to read the files from there. The system root is thus a temporary directory that will ultimately become the actual root directory of your operating system.
</p><p>In this example the cross system root is located as <tt>sysroot/</tt>, which is
a directory created by the build scripts and populated by the
<tt>make install</tt> targets. The makefiles will install the system headers
into the <tt>sysroot/usr/include</tt> directory, the system libraries into the
<tt>sysroot/usr/lib</tt> directory and the kernel itself into the
<tt>sysroot/boot</tt> directory.
</p><p>We use system roots already now because it will make it smoother to add a user-space when you get that far. This scheme is very convenient when you later <a href="Cross-Porting_Software" title="Cross-Porting Software">Port Third-Party Software by Cross-Compiling It</a>.
</p><p>The <tt>-elf</tt> targets have no user-space and are incapable of having one. We configured the compiler with system root support, so it will look in <tt>${SYSROOT}/usr/lib</tt> as expected. We prevented the compiler from searching for a standard library using the --without-headers option when building <tt>i686-elf-gcc</tt>, so it will <i>not</i> look in <tt>${SYSROOT}/usr/include</tt>. (Once you add a user-space and a libc, you will configure your custom cross-gcc with <tt>--with-sysroot</tt> and it will look in <tt>${SYSROOT}/usr/include</tt>. As a temporary work-around until you get that far, we fix it by passing <tt>-isystem=/usr/include</tt>).
</p><p>You can change the system root directory layout if you wish, but you will have to modify some Binutils and GCC source code and tell them <a href="OS_Specific_Toolchain" title="OS Specific Toolchain">what your operating system is</a>. This is advanced and not worth doing until you add a proper user-space. Note that the cross-linker currently looks in <tt>/lib</tt>, <tt>/usr/lib</tt> and <tt>/usr/local/lib</tt> by default, so you can move files there without changing Binutils. Also note that we use the <tt>-isystem</tt> option for GCC (as it was configured without a system include directory), so you can move that around freely.
</p>
<h2> <span class="mw-headline" id="System_Headers"> System Headers </span></h2>
<p>The <tt>./headers.sh</tt> script simply installs the headers for your libc and
kernel (system headers) into <tt>sysroot/usr/include</tt>, but doesn't actually
cross-compile your operating system. This is <tt>useful</tt> as it allows you to
provide the compiler a copy of your headers before you actually compile your
system. You will <a href="Hosted_GCC_Cross-Compiler#Sysroot_Headers" title="Hosted GCC Cross-Compiler">need to provide the
standard library headers</a> when you in the future build a <a href="Hosted_GCC_Cross-Compiler" title="Hosted GCC Cross-Compiler">Hosted GCC Cross-Compiler</a>
that is capable of an user-space.
</p><p>Note how your cross-compiler comes with a number of fully freestanding headers
such as <tt>stddef.h</tt> and <tt>stdint.h</tt>. These headers simply declare
types and macros that are useful. Your kernel standard library will supply a
number of useful functions (such as <tt>strlen</tt>) that doesn't require system
calls and are freestanding except they need an implementation somewhere.
</p>
<h2> <span class="mw-headline" id="Makefile_Design"> Makefile Design </span></h2>
<p>The makefiles in this example respect the environment variables (such as
<tt>CFLAGS</tt> that tell what default compile options are used to compile C
programs). This lets the user control stuff such as which optimization levels
are used, while a default is used if the user has no opinion. The makefiles also
make sure that particular options are always in CFLAGS. This is done by having
two phases in the makefiles: one that set a default value and one that adds
mandatory options the project makefile requires:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="make source-make"><pre class="de1"><span class="co1"># Default CFLAGS:</span>
CFLAGS?<span class="sy0">=-</span>O2 <span class="sy0">-</span>g
&#160;
<span class="co1"># Add mandatory options to CFLAGS:</span>
CFLAGS<span class="sy0">:=$</span><span class="br0">&#40;</span><span class="re2">CFLAGS</span><span class="br0">&#41;</span> <span class="sy0">-</span>Wall <span class="sy0">-</span>Wextra</pre></div></div>
<h2> <span class="mw-headline" id="Architecture_Directories"> Architecture Directories </span></h2>
<p>The projects in this example (libc and kernel) store all the architecture
dependent source files inside an <tt>arch/</tt> directory with their own
sub-makefile that has special configuration. This cleanly separates the systems
you support and will make it easier to port to other systems in the future.
</p>
<h2> <span class="mw-headline" id="Kernel_Design"> Kernel Design </span></h2>
<p>We have moved the kernel into its own directory named <tt>kernel/</tt>. It would
perhaps be better to call it something else if your kernel has another name than
your full operating system distribution, though calling it <tt>kernel/</tt>
makes it easier for other hobbyist developers to find the core parts of your new
operating system.
</p><p>The kernel installs its public kernel headers into
<tt>sysroot/usr/include/kernel</tt>. This is useful if you decide to create a
kernel with modules, where modules can then simply include the public headers
from the main kernel.
</p><p>GNU GRUB is used as the bootloader and the kernel uses Multiboot as in the
<a href="Bare_Bones" title="Bare Bones">Bare Bones</a> tutorial.
</p><p>The kernel implements the correct way of <a href="Calling_Global_Constructors" title="Calling Global Constructors">invoking
global constructors</a> (useful for C++ code and C code using
<tt>__attribute__((constructor))</tt>. The bootstrap assembly calls <tt>_init</tt>
which invokes all the global constructors. These are invoked very early in the
boot without any specific ordering. You should only use them to initialize
global variables that could not be initialized at runtime.
</p><p>The special <tt>__is_kernel</tt> macro lets the source code detect whether
it is part of the kernel.
</p>
<h2> <span class="mw-headline" id="libc_and_libk_Design"> libc and libk Design </span></h2>
<p>The libc and libk are actually two versions of the same library, which is stored
in the directory <tt>libc/</tt>. The standard library is split into two
versions: freestanding and hosted. The difference is that the freestanding
library (libk) doesn't contain any of the code that only works in user-space,
such as system calls. The libk is also built with different compiler options,
just like the kernel isn't built like normal user-space code.
</p><p>You are not required to have a libk. You could just as easily have a regular
libc and a fully seperate minimal project inside the kernel directory. The libk
scheme avoids code duplication, so you don't have to maintain multiple versions
of <tt>strlen</tt> and such.
</p><p>This example doesn't come with a usable libc. It compiles a libc.a that is
entirely useless, except being a skeleton we can build on when we add user-space
in a later tutorial.
</p><p>Each standard function is put inside a file with the same name as the function
inside a directory with the name of the header. For instance, <tt>strlen</tt>
from <tt>string.h</tt> is in <tt>libc/string/strlen.c</tt> and <tt>stat</tt>
from <tt>sys/stat.h</tt> would be in <tt>libc/sys/stat/stat.c</tt>.
</p><p>The standard headers use a BSD-like scheme where <tt>sys/cdefs.h</tt> declares
a bunch of useful preprocessor macros meant for internal use by the standard
library. All the function prototypes are wrapped in
<tt>extern "C" {</tt> and <tt>}</tt> such that C++ code can correctly
link against libc (as libc doesn't use C++ linkage). Note also how the compiler
provides the internal keyword __restrict unconditionally (even in C89) mode,
which is useful for adding the restrict keyword to function prototypes even when
compiling code in pre-C99 or C++ mode.
</p><p>The special <tt>__is_libc</tt> macro lets the source code detect whether
it is part of the libc and <tt>__is_libk</tt> lets the source code detect
whether it's part of the libk binary.
</p><p>This example comes with a small number of standard functions that serve as
examples and serve to satisfy ABI requirements. Note that the <tt>printf</tt>
function included is very minimal and intentionally doesn't handle most common
features.
</p>
<h2> <span class="mw-headline" id="Source_Code"> Source Code </span></h2>
<p>You can easily download the source code using <a href="http://wiki.osdev.org/index.php?title=Git&amp;action=edit&amp;redlink=1" class="new" title="Git (page does not exist)">Git</a> from the <a rel="nofollow" class="external text" href="https://gitlab.com/sortie/meaty-skeleton">Meaty Skeleton Git repository</a>. This is preferable to doing a manual error-prone copy, as you may make mistake or whitespace gets garbled due to bugs in our syntax highlighting. To clone the git repository, do:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="kw2">git clone</span> https:<span class="sy0">//</span>gitlab.com<span class="sy0">/</span>sortie<span class="sy0">/</span>meaty-skeleton.git</pre></div></div>
<p>Check for differences between the git revision used in this article and what you cloned (empty output means there is no difference):
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="kw2">git diff</span> 084d1624bedaa9f9e395f055c6bd99299bd97f58..master</pre></div></div>
<p>Operating systems development is about being an expert. Take the time to read the code carefully through and understand it. Please seek further information and help if you don't understand aspects of it. This code is minimal and almost everything is done deliberately, often to pre-emptively solve future problems.
</p>
<h3> <span class="mw-headline" id="kernel"> kernel </span></h3>
<h4> <span class="mw-headline" id="kernel.2Finclude.2Fkernel.2Ftty.h"> kernel/include/kernel/tty.h </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#ifndef _KERNEL_TTY_H</span>
<span class="co2">#define _KERNEL_TTY_H</span>
&#160;
<span class="co2">#include &lt;stddef.h&gt;</span>
&#160;
<span class="kw4">void</span> terminal_initialize<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">void</span> terminal_putchar<span class="br0">&#40;</span><span class="kw4">char</span> c<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">void</span> terminal_write<span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy0">*</span> data<span class="sy0">,</span> <span class="kw4">size_t</span> size<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">void</span> terminal_writestring<span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy0">*</span> data<span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
<span class="co2">#endif</span></pre></div></div>
<h4> <span class="mw-headline" id="kernel.2FMakefile"> kernel/Makefile </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="make source-make"><pre class="de1">DEFAULT_HOST<span class="sy0">!=../</span>default<span class="sy0">-</span>host<span class="sy0">.</span>sh
HOST?<span class="sy0">=</span>DEFAULT_HOST
HOSTARCH<span class="sy0">!=../</span>target<span class="sy0">-</span>triplet<span class="sy0">-</span>to<span class="sy0">-</span>arch<span class="sy0">.</span>sh <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">HOST</span><span class="br0">&#41;</span>
&#160;
CFLAGS?<span class="sy0">=-</span>O2 <span class="sy0">-</span>g
CPPFLAGS?<span class="sy0">=</span>
LDFLAGS?<span class="sy0">=</span>
LIBS?<span class="sy0">=</span>
&#160;
DESTDIR?<span class="sy0">=</span>
PREFIX?<span class="sy0">=/</span>usr<span class="sy0">/</span>local
EXEC_PREFIX?<span class="sy0">=$</span><span class="br0">&#40;</span><span class="re2">PREFIX</span><span class="br0">&#41;</span>
BOOTDIR?<span class="sy0">=$</span><span class="br0">&#40;</span><span class="re2">EXEC_PREFIX</span><span class="br0">&#41;</span><span class="sy0">/</span>boot
INCLUDEDIR?<span class="sy0">=$</span><span class="br0">&#40;</span><span class="re2">PREFIX</span><span class="br0">&#41;</span><span class="sy0">/</span><span class="kw1">include</span>
&#160;
CFLAGS<span class="sy0">:=$</span><span class="br0">&#40;</span><span class="re2">CFLAGS</span><span class="br0">&#41;</span> <span class="sy0">-</span>ffreestanding <span class="sy0">-</span>Wall <span class="sy0">-</span>Wextra
CPPFLAGS<span class="sy0">:=$</span><span class="br0">&#40;</span><span class="re2">CPPFLAGS</span><span class="br0">&#41;</span> <span class="sy0">-</span>D__is_kernel <span class="sy0">-</span>Iinclude
LDFLAGS<span class="sy0">:=$</span><span class="br0">&#40;</span><span class="re2">LDFLAGS</span><span class="br0">&#41;</span>
LIBS<span class="sy0">:=$</span><span class="br0">&#40;</span><span class="re2">LIBS</span><span class="br0">&#41;</span> <span class="sy0">-</span>nostdlib <span class="sy0">-</span>lk <span class="sy0">-</span>lgcc
&#160;
ARCHDIR<span class="sy0">=</span>arch<span class="sy0">/$</span><span class="br0">&#40;</span><span class="re2">HOSTARCH</span><span class="br0">&#41;</span>
&#160;
<span class="kw1">include</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">ARCHDIR</span><span class="br0">&#41;</span><span class="sy0">/</span>make<span class="sy0">.</span>config
&#160;
CFLAGS<span class="sy0">:=$</span><span class="br0">&#40;</span><span class="re2">CFLAGS</span><span class="br0">&#41;</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">KERNEL_ARCH_CFLAGS</span><span class="br0">&#41;</span>
CPPFLAGS<span class="sy0">:=$</span><span class="br0">&#40;</span><span class="re2">CPPFLAGS</span><span class="br0">&#41;</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">KERNEL_ARCH_CPPFLAGS</span><span class="br0">&#41;</span>
LDFLAGS<span class="sy0">:=$</span><span class="br0">&#40;</span><span class="re2">LDFLAGS</span><span class="br0">&#41;</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">KERNEL_ARCH_LDFLAGS</span><span class="br0">&#41;</span>
LIBS<span class="sy0">:=$</span><span class="br0">&#40;</span><span class="re2">LIBS</span><span class="br0">&#41;</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">KERNEL_ARCH_LIBS</span><span class="br0">&#41;</span>
&#160;
KERNEL_OBJS<span class="sy0">=</span>\
<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">KERNEL_ARCH_OBJS</span><span class="br0">&#41;</span> \
kernel<span class="sy0">/</span>kernel<span class="sy0">.</span>o \
&#160;
OBJS<span class="sy0">=</span>\
<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">ARCHDIR</span><span class="br0">&#41;</span><span class="sy0">/</span>crti<span class="sy0">.</span>o \
<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">ARCHDIR</span><span class="br0">&#41;</span><span class="sy0">/</span>crtbegin<span class="sy0">.</span>o \
<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">KERNEL_OBJS</span><span class="br0">&#41;</span> \
<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">ARCHDIR</span><span class="br0">&#41;</span><span class="sy0">/</span>crtend<span class="sy0">.</span>o \
<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">ARCHDIR</span><span class="br0">&#41;</span><span class="sy0">/</span>crtn<span class="sy0">.</span>o \
&#160;
LINK_LIST<span class="sy0">=</span>\
<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">LDFLAGS</span><span class="br0">&#41;</span> \
<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">ARCHDIR</span><span class="br0">&#41;</span><span class="sy0">/</span>crti<span class="sy0">.</span>o \
<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">ARCHDIR</span><span class="br0">&#41;</span><span class="sy0">/</span>crtbegin<span class="sy0">.</span>o \
<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">KERNEL_OBJS</span><span class="br0">&#41;</span> \
<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">LIBS</span><span class="br0">&#41;</span> \
<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">ARCHDIR</span><span class="br0">&#41;</span><span class="sy0">/</span>crtend<span class="sy0">.</span>o \
<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">ARCHDIR</span><span class="br0">&#41;</span><span class="sy0">/</span>crtn<span class="sy0">.</span>o \
&#160;
<span class="kw2">.PHONY</span><span class="sy0">:</span> all clean install install<span class="sy0">-</span>headers install<span class="sy0">-</span>kernel
<span class="kw2">.SUFFIXES</span><span class="sy0">:</span> <span class="sy0">.</span>o <span class="sy0">.</span>c <span class="sy0">.</span>S
&#160;
all<span class="sy0">:</span> myos<span class="sy0">.</span>kernel
&#160;
myos<span class="sy0">.</span>kernel<span class="sy0">:</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">OBJS</span><span class="br0">&#41;</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">ARCHDIR</span><span class="br0">&#41;</span><span class="sy0">/</span>linker<span class="sy0">.</span>ld
	<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">CC</span><span class="br0">&#41;</span> <span class="sy0">-</span>T <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">ARCHDIR</span><span class="br0">&#41;</span><span class="sy0">/</span>linker<span class="sy0">.</span>ld <span class="sy0">-</span>o <span class="re0">$@</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">CFLAGS</span><span class="br0">&#41;</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">LINK_LIST</span><span class="br0">&#41;</span>
	grub<span class="sy0">-</span>file <span class="sy0">--</span>is<span class="sy0">-</span>x86<span class="sy0">-</span>multiboot myos<span class="sy0">.</span>kernel
&#160;
<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">ARCHDIR</span><span class="br0">&#41;</span><span class="sy0">/</span>crtbegin<span class="sy0">.</span>o <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">ARCHDIR</span><span class="br0">&#41;</span><span class="sy0">/</span>crtend<span class="sy0">.</span>o<span class="sy0">:</span>
	OBJ<span class="sy0">=</span>`<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">CC</span><span class="br0">&#41;</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">CFLAGS</span><span class="br0">&#41;</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">LDFLAGS</span><span class="br0">&#41;</span> <span class="sy0">-</span>print<span class="sy0">-</span>file<span class="sy0">-</span>name<span class="sy0">=$</span><span class="br0">&#40;</span><span class="sy0">@</span>F<span class="br0">&#41;</span>` <span class="sy0">&amp;&amp;</span> cp <span class="st0">&quot;$$OBJ&quot;</span> <span class="re0">$@</span>
&#160;
<span class="sy0">.</span>c<span class="sy0">.</span>o<span class="sy0">:</span>
	<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">CC</span><span class="br0">&#41;</span> <span class="sy0">-</span>MD <span class="sy0">-</span>c <span class="re0">$&lt;</span> <span class="sy0">-</span>o <span class="re0">$@</span> <span class="sy0">-</span>std<span class="sy0">=</span>gnu11 <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">CFLAGS</span><span class="br0">&#41;</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">CPPFLAGS</span><span class="br0">&#41;</span>
&#160;
<span class="sy0">.</span>S<span class="sy0">.</span>o<span class="sy0">:</span>
	<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">CC</span><span class="br0">&#41;</span> <span class="sy0">-</span>MD <span class="sy0">-</span>c <span class="re0">$&lt;</span> <span class="sy0">-</span>o <span class="re0">$@</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">CFLAGS</span><span class="br0">&#41;</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">CPPFLAGS</span><span class="br0">&#41;</span>
&#160;
clean<span class="sy0">:</span>
	rm <span class="sy0">-</span>f myos<span class="sy0">.</span>kernel
	rm <span class="sy0">-</span>f <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">OBJS</span><span class="br0">&#41;</span> <span class="sy0">*.</span>o <span class="sy0">*/*.</span>o <span class="sy0">*/*/*.</span>o
	rm <span class="sy0">-</span>f <span class="sy0">$</span><span class="br0">&#40;</span>OBJS<span class="sy0">:.</span>o<span class="sy0">=.</span>d<span class="br0">&#41;</span> <span class="sy0">*.</span>d <span class="sy0">*/*.</span>d <span class="sy0">*/*/*.</span>d
&#160;
install<span class="sy0">:</span> install<span class="sy0">-</span>headers install<span class="sy0">-</span>kernel
&#160;
install<span class="sy0">-</span>headers<span class="sy0">:</span>
	mkdir <span class="sy0">-</span>p <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">DESTDIR</span><span class="br0">&#41;</span><span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">INCLUDEDIR</span><span class="br0">&#41;</span>
	cp <span class="sy0">-</span>R <span class="sy0">--</span>preserve<span class="sy0">=</span>timestamps <span class="kw1">include</span><span class="sy0">/.</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">DESTDIR</span><span class="br0">&#41;</span><span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">INCLUDEDIR</span><span class="br0">&#41;</span><span class="sy0">/.</span>
&#160;
install<span class="sy0">-</span>kernel<span class="sy0">:</span> myos<span class="sy0">.</span>kernel
	mkdir <span class="sy0">-</span>p <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">DESTDIR</span><span class="br0">&#41;</span><span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">BOOTDIR</span><span class="br0">&#41;</span>
	cp myos<span class="sy0">.</span>kernel <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">DESTDIR</span><span class="br0">&#41;</span><span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">BOOTDIR</span><span class="br0">&#41;</span>
&#160;
<span class="sy0">-</span><span class="kw1">include</span> <span class="sy0">$</span><span class="br0">&#40;</span>OBJS<span class="sy0">:.</span>o<span class="sy0">=.</span>d<span class="br0">&#41;</span></pre></div></div>
<h4> <span class="mw-headline" id="kernel.2Fkernel.2Fkernel.c"> kernel/kernel/kernel.c </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;stdio.h&gt;</span>
&#160;
<span class="co2">#include &lt;kernel/tty.h&gt;</span>
&#160;
<span class="kw4">void</span> kernel_main<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
	terminal_initialize<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="kw3">printf</span><span class="br0">&#40;</span><span class="st0">&quot;Hello, kernel World!<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div>
<h4> <span class="mw-headline" id="kernel.2Farch.2Fi386.2Ftty.c"> kernel/arch/i386/tty.c </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;stdbool.h&gt;</span>
<span class="co2">#include &lt;stddef.h&gt;</span>
<span class="co2">#include &lt;stdint.h&gt;</span>
<span class="co2">#include &lt;string.h&gt;</span>
&#160;
<span class="co2">#include &lt;kernel/tty.h&gt;</span>
&#160;
<span class="co2">#include &quot;vga.h&quot;</span>
&#160;
<span class="kw4">static</span> <span class="kw4">const</span> <span class="kw4">size_t</span> VGA_WIDTH <span class="sy0">=</span> <span class="nu0">80</span><span class="sy0">;</span>
<span class="kw4">static</span> <span class="kw4">const</span> <span class="kw4">size_t</span> VGA_HEIGHT <span class="sy0">=</span> <span class="nu0">25</span><span class="sy0">;</span>
<span class="kw4">static</span> <span class="kw4">uint16_t</span><span class="sy0">*</span> <span class="kw4">const</span> VGA_MEMORY <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">uint16_t</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="nu12">0xB8000</span><span class="sy0">;</span>
&#160;
<span class="kw4">static</span> <span class="kw4">size_t</span> terminal_row<span class="sy0">;</span>
<span class="kw4">static</span> <span class="kw4">size_t</span> terminal_column<span class="sy0">;</span>
<span class="kw4">static</span> <span class="kw4">uint8_t</span> terminal_color<span class="sy0">;</span>
<span class="kw4">static</span> <span class="kw4">uint16_t</span><span class="sy0">*</span> terminal_buffer<span class="sy0">;</span>
&#160;
<span class="kw4">void</span> terminal_initialize<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
	terminal_row <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
	terminal_column <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
	terminal_color <span class="sy0">=</span> vga_entry_color<span class="br0">&#40;</span>VGA_COLOR_LIGHT_GREY<span class="sy0">,</span> VGA_COLOR_BLACK<span class="br0">&#41;</span><span class="sy0">;</span>
	terminal_buffer <span class="sy0">=</span> VGA_MEMORY<span class="sy0">;</span>
	<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">size_t</span> y <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> y <span class="sy0">&lt;</span> VGA_HEIGHT<span class="sy0">;</span> y<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">size_t</span> x <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> x <span class="sy0">&lt;</span> VGA_WIDTH<span class="sy0">;</span> x<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="kw4">const</span> <span class="kw4">size_t</span> index <span class="sy0">=</span> y <span class="sy0">*</span> VGA_WIDTH <span class="sy0">+</span> x<span class="sy0">;</span>
			terminal_buffer<span class="br0">&#91;</span>index<span class="br0">&#93;</span> <span class="sy0">=</span> vga_entry<span class="br0">&#40;</span><span class="st0">' '</span><span class="sy0">,</span> terminal_color<span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> terminal_setcolor<span class="br0">&#40;</span><span class="kw4">uint8_t</span> color<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	terminal_color <span class="sy0">=</span> color<span class="sy0">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> terminal_putentryat<span class="br0">&#40;</span><span class="kw4">unsigned</span> <span class="kw4">char</span> c<span class="sy0">,</span> <span class="kw4">uint8_t</span> color<span class="sy0">,</span> <span class="kw4">size_t</span> x<span class="sy0">,</span> <span class="kw4">size_t</span> y<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">const</span> <span class="kw4">size_t</span> index <span class="sy0">=</span> y <span class="sy0">*</span> VGA_WIDTH <span class="sy0">+</span> x<span class="sy0">;</span>
	terminal_buffer<span class="br0">&#91;</span>index<span class="br0">&#93;</span> <span class="sy0">=</span> vga_entry<span class="br0">&#40;</span>c<span class="sy0">,</span> color<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> terminal_putchar<span class="br0">&#40;</span><span class="kw4">char</span> c<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">unsigned</span> <span class="kw4">char</span> uc <span class="sy0">=</span> c<span class="sy0">;</span>
	terminal_putentryat<span class="br0">&#40;</span>uc<span class="sy0">,</span> terminal_color<span class="sy0">,</span> terminal_column<span class="sy0">,</span> terminal_row<span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">++</span>terminal_column <span class="sy0">==</span> VGA_WIDTH<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		terminal_column <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">++</span>terminal_row <span class="sy0">==</span> VGA_HEIGHT<span class="br0">&#41;</span>
			terminal_row <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> terminal_write<span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy0">*</span> data<span class="sy0">,</span> <span class="kw4">size_t</span> size<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">size_t</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> size<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span>
		terminal_putchar<span class="br0">&#40;</span>data<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> terminal_writestring<span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy0">*</span> data<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	terminal_write<span class="br0">&#40;</span>data<span class="sy0">,</span> <span class="kw3">strlen</span><span class="br0">&#40;</span>data<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div>
<h4> <span class="mw-headline" id="kernel.2Farch.2Fi386.2Fcrtn.S"> kernel/arch/i386/crtn.S </span></h4>
<pre>
.section .init
	/* gcc will nicely put the contents of crtend.o's .init section here. */
	popl&#160;%ebp
	ret

.section .fini
	/* gcc will nicely put the contents of crtend.o's .fini section here. */
	popl&#160;%ebp
	ret
</pre>
<h4> <span class="mw-headline" id="kernel.2Farch.2Fi386.2Fvga.h"> kernel/arch/i386/vga.h </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#ifndef ARCH_I386_VGA_H</span>
<span class="co2">#define ARCH_I386_VGA_H</span>
&#160;
<span class="co2">#include &lt;stdint.h&gt;</span>
&#160;
<span class="kw2">enum</span> vga_color <span class="br0">&#123;</span>
	VGA_COLOR_BLACK <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span>
	VGA_COLOR_BLUE <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">,</span>
	VGA_COLOR_GREEN <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">,</span>
	VGA_COLOR_CYAN <span class="sy0">=</span> <span class="nu0">3</span><span class="sy0">,</span>
	VGA_COLOR_RED <span class="sy0">=</span> <span class="nu0">4</span><span class="sy0">,</span>
	VGA_COLOR_MAGENTA <span class="sy0">=</span> <span class="nu0">5</span><span class="sy0">,</span>
	VGA_COLOR_BROWN <span class="sy0">=</span> <span class="nu0">6</span><span class="sy0">,</span>
	VGA_COLOR_LIGHT_GREY <span class="sy0">=</span> <span class="nu0">7</span><span class="sy0">,</span>
	VGA_COLOR_DARK_GREY <span class="sy0">=</span> <span class="nu0">8</span><span class="sy0">,</span>
	VGA_COLOR_LIGHT_BLUE <span class="sy0">=</span> <span class="nu0">9</span><span class="sy0">,</span>
	VGA_COLOR_LIGHT_GREEN <span class="sy0">=</span> <span class="nu0">10</span><span class="sy0">,</span>
	VGA_COLOR_LIGHT_CYAN <span class="sy0">=</span> <span class="nu0">11</span><span class="sy0">,</span>
	VGA_COLOR_LIGHT_RED <span class="sy0">=</span> <span class="nu0">12</span><span class="sy0">,</span>
	VGA_COLOR_LIGHT_MAGENTA <span class="sy0">=</span> <span class="nu0">13</span><span class="sy0">,</span>
	VGA_COLOR_LIGHT_BROWN <span class="sy0">=</span> <span class="nu0">14</span><span class="sy0">,</span>
	VGA_COLOR_WHITE <span class="sy0">=</span> <span class="nu0">15</span><span class="sy0">,</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&#160;
<span class="kw4">static</span> <span class="kw2">inline</span> <span class="kw4">uint8_t</span> vga_entry_color<span class="br0">&#40;</span><span class="kw2">enum</span> vga_color fg<span class="sy0">,</span> <span class="kw2">enum</span> vga_color bg<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw1">return</span> fg <span class="sy0">|</span> bg <span class="sy0">&lt;&lt;</span> <span class="nu0">4</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">static</span> <span class="kw2">inline</span> <span class="kw4">uint16_t</span> vga_entry<span class="br0">&#40;</span><span class="kw4">unsigned</span> <span class="kw4">char</span> uc<span class="sy0">,</span> <span class="kw4">uint8_t</span> color<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw1">return</span> <span class="br0">&#40;</span><span class="kw4">uint16_t</span><span class="br0">&#41;</span> uc <span class="sy0">|</span> <span class="br0">&#40;</span><span class="kw4">uint16_t</span><span class="br0">&#41;</span> color <span class="sy0">&lt;&lt;</span> <span class="nu0">8</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co2">#endif</span></pre></div></div>
<h4> <span class="mw-headline" id="kernel.2Farch.2Fi386.2Fmake.config"> kernel/arch/i386/make.config </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="make source-make"><pre class="de1">KERNEL_ARCH_CFLAGS<span class="sy0">=</span>
KERNEL_ARCH_CPPFLAGS<span class="sy0">=</span>
KERNEL_ARCH_LDFLAGS<span class="sy0">=</span>
KERNEL_ARCH_LIBS<span class="sy0">=</span>
&#160;
KERNEL_ARCH_OBJS<span class="sy0">=</span>\
<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">ARCHDIR</span><span class="br0">&#41;</span><span class="sy0">/</span>boot<span class="sy0">.</span>o \
<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">ARCHDIR</span><span class="br0">&#41;</span><span class="sy0">/</span>tty<span class="sy0">.</span>o \</pre></div></div>
<h4> <span class="mw-headline" id="kernel.2Farch.2Fi386.2Fcrti.S"> kernel/arch/i386/crti.S </span></h4>
<pre>
.section .init
.global _init
.type _init, @function
_init:
	push&#160;%ebp
	movl&#160;%esp,&#160;%ebp
	/* gcc will nicely put the contents of crtbegin.o's .init section here. */

.section .fini
.global _fini
.type _fini, @function
_fini:
	push&#160;%ebp
	movl&#160;%esp,&#160;%ebp
	/* gcc will nicely put the contents of crtbegin.o's .fini section here. */
</pre>
<h4> <span class="mw-headline" id="kernel.2Farch.2Fi386.2Flinker.ld"> kernel/arch/i386/linker.ld </span></h4>
<pre>
/* The bootloader will look at this image and start execution at the symbol
   designated at the entry point. */
ENTRY(_start)

/* Tell where the various sections of the object files will be put in the final
   kernel image. */
SECTIONS
{
	/* Begin putting sections at 1 MiB, a conventional place for kernels to be
	   loaded at by the bootloader. */
	. = 1M;

	/* First put the multiboot header, as it is required to be put very early
	   early in the image or the bootloader won't recognize the file format.
	   Next we'll put the .text section. */
	.text BLOCK(4K)&#160;: ALIGN(4K)
	{
		*(.multiboot)
		*(.text)
	}

	/* Read-only data. */
	.rodata BLOCK(4K)&#160;: ALIGN(4K)
	{
		*(.rodata)
	}

	/* Read-write data (initialized) */
	.data BLOCK(4K)&#160;: ALIGN(4K)
	{
		*(.data)
	}

	/* Read-write data (uninitialized) and stack */
	.bss BLOCK(4K)&#160;: ALIGN(4K)
	{
		*(COMMON)
		*(.bss)
	}

	/* The compiler may produce other sections, put them in the proper place in
	   in this file, if you'd like to include them in the final kernel. */
}
</pre>
<h4> <span class="mw-headline" id="kernel.2Farch.2Fi386.2Fboot.S"> kernel/arch/i386/boot.S </span></h4>
<pre>
# Declare constants for the multiboot header.
.set ALIGN,    1&lt;&lt;0             # align loaded modules on page boundaries
.set MEMINFO,  1&lt;&lt;1             # provide memory map
.set FLAGS,    ALIGN | MEMINFO  # this is the Multiboot 'flag' field
.set MAGIC,    0x1BADB002       # 'magic number' lets bootloader find the header
.set CHECKSUM, -(MAGIC + FLAGS) # checksum of above, to prove we are multiboot

# Declare a header as in the Multiboot Standard.
.section .multiboot
.align 4
.long MAGIC
.long FLAGS
.long CHECKSUM

# Reserve a stack for the initial thread.
.section .bss
.align 16
stack_bottom:
.skip 16384 # 16 KiB
stack_top:

# The kernel entry point.
.section .text
.global _start
.type _start, @function
_start:
	movl $stack_top,&#160;%esp

	# Call the global constructors.
	call _init

	# Transfer control to the main kernel.
	call kernel_main

	# Hang if kernel_main unexpectedly returns.
	cli
1:	hlt
	jmp 1b
.size _start, . - _start
</pre>
<h4> <span class="mw-headline" id="kernel.2F.gitignore"> kernel/.gitignore </span></h4>
<pre>
*.d
*.kernel
*.o
</pre>
<h3> <span class="mw-headline" id="libc_and_libk"> libc and libk </span></h3>
<h4> <span class="mw-headline" id="libc.2Finclude.2Fstring.h"> libc/include/string.h </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#ifndef _STRING_H</span>
<span class="co2">#define _STRING_H 1</span>
&#160;
<span class="co2">#include &lt;sys/cdefs.h&gt;</span>
&#160;
<span class="co2">#include &lt;stddef.h&gt;</span>
&#160;
<span class="co2">#ifdef __cplusplus</span>
<span class="kw2">extern</span> <span class="st0">&quot;C&quot;</span> <span class="br0">&#123;</span>
<span class="co2">#endif</span>
&#160;
<span class="kw4">int</span> <span class="kw3">memcmp</span><span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">void</span><span class="sy0">*,</span> <span class="kw4">const</span> <span class="kw4">void</span><span class="sy0">*,</span> <span class="kw4">size_t</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">void</span><span class="sy0">*</span> <span class="kw3">memcpy</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="sy0">*</span> __restrict<span class="sy0">,</span> <span class="kw4">const</span> <span class="kw4">void</span><span class="sy0">*</span> __restrict<span class="sy0">,</span> <span class="kw4">size_t</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">void</span><span class="sy0">*</span> <span class="kw3">memmove</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="sy0">*,</span> <span class="kw4">const</span> <span class="kw4">void</span><span class="sy0">*,</span> <span class="kw4">size_t</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">void</span><span class="sy0">*</span> <span class="kw3">memset</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="sy0">*,</span> <span class="kw4">int</span><span class="sy0">,</span> <span class="kw4">size_t</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">size_t</span> <span class="kw3">strlen</span><span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
<span class="co2">#ifdef __cplusplus</span>
<span class="br0">&#125;</span>
<span class="co2">#endif</span>
&#160;
<span class="co2">#endif</span></pre></div></div>
<h4> <span class="mw-headline" id="libc.2Finclude.2Fstdio.h"> libc/include/stdio.h </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#ifndef _STDIO_H</span>
<span class="co2">#define _STDIO_H 1</span>
&#160;
<span class="co2">#include &lt;sys/cdefs.h&gt;</span>
&#160;
<span class="co2">#define EOF (-1)</span>
&#160;
<span class="co2">#ifdef __cplusplus</span>
<span class="kw2">extern</span> <span class="st0">&quot;C&quot;</span> <span class="br0">&#123;</span>
<span class="co2">#endif</span>
&#160;
<span class="kw4">int</span> <span class="kw3">printf</span><span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy0">*</span> __restrict<span class="sy0">,</span> ...<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">int</span> <span class="kw3">putchar</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">int</span> <span class="kw3">puts</span><span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
<span class="co2">#ifdef __cplusplus</span>
<span class="br0">&#125;</span>
<span class="co2">#endif</span>
&#160;
<span class="co2">#endif</span></pre></div></div>
<h4> <span class="mw-headline" id="libc.2Finclude.2Fsys.2Fcdefs.h"> libc/include/sys/cdefs.h </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#ifndef _SYS_CDEFS_H</span>
<span class="co2">#define _SYS_CDEFS_H 1</span>
&#160;
<span class="co2">#define __myos_libc 1</span>
&#160;
<span class="co2">#endif</span></pre></div></div>
<h4> <span class="mw-headline" id="libc.2Finclude.2Fstdlib.h"> libc/include/stdlib.h </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#ifndef _STDLIB_H</span>
<span class="co2">#define _STDLIB_H 1</span>
&#160;
<span class="co2">#include &lt;sys/cdefs.h&gt;</span>
&#160;
<span class="co2">#ifdef __cplusplus</span>
<span class="kw2">extern</span> <span class="st0">&quot;C&quot;</span> <span class="br0">&#123;</span>
<span class="co2">#endif</span>
&#160;
__attribute__<span class="br0">&#40;</span><span class="br0">&#40;</span>__noreturn__<span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw4">void</span> <span class="kw3">abort</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
<span class="co2">#ifdef __cplusplus</span>
<span class="br0">&#125;</span>
<span class="co2">#endif</span>
&#160;
<span class="co2">#endif</span></pre></div></div>
<h4> <span class="mw-headline" id="libc.2FMakefile"> libc/Makefile </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="make source-make"><pre class="de1">DEFAULT_HOST<span class="sy0">!=../</span>default<span class="sy0">-</span>host<span class="sy0">.</span>sh
HOST?<span class="sy0">=</span>DEFAULT_HOST
HOSTARCH<span class="sy0">!=../</span>target<span class="sy0">-</span>triplet<span class="sy0">-</span>to<span class="sy0">-</span>arch<span class="sy0">.</span>sh <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">HOST</span><span class="br0">&#41;</span>
&#160;
CFLAGS?<span class="sy0">=-</span>O2 <span class="sy0">-</span>g
CPPFLAGS?<span class="sy0">=</span>
LDFLAGS?<span class="sy0">=</span>
LIBS?<span class="sy0">=</span>
&#160;
DESTDIR?<span class="sy0">=</span>
PREFIX?<span class="sy0">=/</span>usr<span class="sy0">/</span>local
EXEC_PREFIX?<span class="sy0">=$</span><span class="br0">&#40;</span><span class="re2">PREFIX</span><span class="br0">&#41;</span>
INCLUDEDIR?<span class="sy0">=$</span><span class="br0">&#40;</span><span class="re2">PREFIX</span><span class="br0">&#41;</span><span class="sy0">/</span><span class="kw1">include</span>
LIBDIR?<span class="sy0">=$</span><span class="br0">&#40;</span><span class="re2">EXEC_PREFIX</span><span class="br0">&#41;</span><span class="sy0">/</span>lib
&#160;
CFLAGS<span class="sy0">:=$</span><span class="br0">&#40;</span><span class="re2">CFLAGS</span><span class="br0">&#41;</span> <span class="sy0">-</span>ffreestanding <span class="sy0">-</span>Wall <span class="sy0">-</span>Wextra
CPPFLAGS<span class="sy0">:=$</span><span class="br0">&#40;</span><span class="re2">CPPFLAGS</span><span class="br0">&#41;</span> <span class="sy0">-</span>D__is_libc <span class="sy0">-</span>Iinclude
LIBK_CFLAGS<span class="sy0">:=$</span><span class="br0">&#40;</span><span class="re2">CFLAGS</span><span class="br0">&#41;</span>
LIBK_CPPFLAGS<span class="sy0">:=$</span><span class="br0">&#40;</span><span class="re2">CPPFLAGS</span><span class="br0">&#41;</span> <span class="sy0">-</span>D__is_libk
&#160;
ARCHDIR<span class="sy0">=</span>arch<span class="sy0">/$</span><span class="br0">&#40;</span><span class="re2">HOSTARCH</span><span class="br0">&#41;</span>
&#160;
<span class="kw1">include</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">ARCHDIR</span><span class="br0">&#41;</span><span class="sy0">/</span>make<span class="sy0">.</span>config
&#160;
CFLAGS<span class="sy0">:=$</span><span class="br0">&#40;</span><span class="re2">CFLAGS</span><span class="br0">&#41;</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">ARCH_CFLAGS</span><span class="br0">&#41;</span>
CPPFLAGS<span class="sy0">:=$</span><span class="br0">&#40;</span><span class="re2">CPPFLAGS</span><span class="br0">&#41;</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">ARCH_CPPFLAGS</span><span class="br0">&#41;</span>
LIBK_CFLAGS<span class="sy0">:=$</span><span class="br0">&#40;</span><span class="re2">LIBK_CFLAGS</span><span class="br0">&#41;</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">KERNEL_ARCH_CFLAGS</span><span class="br0">&#41;</span>
LIBK_CPPFLAGS<span class="sy0">:=$</span><span class="br0">&#40;</span><span class="re2">LIBK_CPPFLAGS</span><span class="br0">&#41;</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">KERNEL_ARCH_CPPFLAGS</span><span class="br0">&#41;</span>
&#160;
FREEOBJS<span class="sy0">=</span>\
<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">ARCH_FREEOBJS</span><span class="br0">&#41;</span> \
stdio<span class="sy0">/</span>printf<span class="sy0">.</span>o \
stdio<span class="sy0">/</span>putchar<span class="sy0">.</span>o \
stdio<span class="sy0">/</span>puts<span class="sy0">.</span>o \
stdlib<span class="sy0">/</span>abort<span class="sy0">.</span>o \
string<span class="sy0">/</span>memcmp<span class="sy0">.</span>o \
string<span class="sy0">/</span>memcpy<span class="sy0">.</span>o \
string<span class="sy0">/</span>memmove<span class="sy0">.</span>o \
string<span class="sy0">/</span>memset<span class="sy0">.</span>o \
string<span class="sy0">/</span>strlen<span class="sy0">.</span>o \
&#160;
HOSTEDOBJS<span class="sy0">=</span>\
<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">ARCH_HOSTEDOBJS</span><span class="br0">&#41;</span> \
&#160;
OBJS<span class="sy0">=</span>\
<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">FREEOBJS</span><span class="br0">&#41;</span> \
<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">HOSTEDOBJS</span><span class="br0">&#41;</span> \
&#160;
LIBK_OBJS<span class="sy0">=$</span><span class="br0">&#40;</span>FREEOBJS<span class="sy0">:.</span>o<span class="sy0">=.</span>libk<span class="sy0">.</span>o<span class="br0">&#41;</span>
&#160;
<span class="co1">#BINARIES=libc.a libk.a # Not ready for libc yet.</span>
BINARIES<span class="sy0">=</span>libk<span class="sy0">.</span>a
&#160;
<span class="kw2">.PHONY</span><span class="sy0">:</span> all clean install install<span class="sy0">-</span>headers install<span class="sy0">-</span>libs
<span class="kw2">.SUFFIXES</span><span class="sy0">:</span> <span class="sy0">.</span>o <span class="sy0">.</span>libk<span class="sy0">.</span>o <span class="sy0">.</span>c <span class="sy0">.</span>S
&#160;
all<span class="sy0">:</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">BINARIES</span><span class="br0">&#41;</span>
&#160;
libc<span class="sy0">.</span>a<span class="sy0">:</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">OBJS</span><span class="br0">&#41;</span>
	<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">AR</span><span class="br0">&#41;</span> rcs <span class="re0">$@</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">OBJS</span><span class="br0">&#41;</span>
&#160;
libk<span class="sy0">.</span>a<span class="sy0">:</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">LIBK_OBJS</span><span class="br0">&#41;</span>
	<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">AR</span><span class="br0">&#41;</span> rcs <span class="re0">$@</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">LIBK_OBJS</span><span class="br0">&#41;</span>
&#160;
<span class="sy0">.</span>c<span class="sy0">.</span>o<span class="sy0">:</span>
	<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">CC</span><span class="br0">&#41;</span> <span class="sy0">-</span>MD <span class="sy0">-</span>c <span class="re0">$&lt;</span> <span class="sy0">-</span>o <span class="re0">$@</span> <span class="sy0">-</span>std<span class="sy0">=</span>gnu11 <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">CFLAGS</span><span class="br0">&#41;</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">CPPFLAGS</span><span class="br0">&#41;</span>
&#160;
<span class="sy0">.</span>c<span class="sy0">.</span>S<span class="sy0">:</span>
	<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">CC</span><span class="br0">&#41;</span> <span class="sy0">-</span>MD <span class="sy0">-</span>c <span class="re0">$&lt;</span> <span class="sy0">-</span>o <span class="re0">$@</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">CFLAGS</span><span class="br0">&#41;</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">CPPFLAGS</span><span class="br0">&#41;</span>
&#160;
<span class="sy0">.</span>c<span class="sy0">.</span>libk<span class="sy0">.</span>o<span class="sy0">:</span>
	<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">CC</span><span class="br0">&#41;</span> <span class="sy0">-</span>MD <span class="sy0">-</span>c <span class="re0">$&lt;</span> <span class="sy0">-</span>o <span class="re0">$@</span> <span class="sy0">-</span>std<span class="sy0">=</span>gnu11 <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">LIBK_CFLAGS</span><span class="br0">&#41;</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">LIBK_CPPFLAGS</span><span class="br0">&#41;</span>
&#160;
<span class="sy0">.</span>S<span class="sy0">.</span>libk<span class="sy0">.</span>o<span class="sy0">:</span>
	<span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">CC</span><span class="br0">&#41;</span> <span class="sy0">-</span>MD <span class="sy0">-</span>c <span class="re0">$&lt;</span> <span class="sy0">-</span>o <span class="re0">$@</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">LIBK_CFLAGS</span><span class="br0">&#41;</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">LIBK_CPPFLAGS</span><span class="br0">&#41;</span>
&#160;
clean<span class="sy0">:</span>
	rm <span class="sy0">-</span>f <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">BINARIES</span><span class="br0">&#41;</span> <span class="sy0">*.</span>a
	rm <span class="sy0">-</span>f <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">OBJS</span><span class="br0">&#41;</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">LIBK_OBJS</span><span class="br0">&#41;</span> <span class="sy0">*.</span>o <span class="sy0">*/*.</span>o <span class="sy0">*/*/*.</span>o
	rm <span class="sy0">-</span>f <span class="sy0">$</span><span class="br0">&#40;</span>OBJS<span class="sy0">:.</span>o<span class="sy0">=.</span>d<span class="br0">&#41;</span> <span class="sy0">$</span><span class="br0">&#40;</span>LIBK_OBJS<span class="sy0">:.</span>o<span class="sy0">=.</span>d<span class="br0">&#41;</span> <span class="sy0">*.</span>d <span class="sy0">*/*.</span>d <span class="sy0">*/*/*.</span>d
&#160;
install<span class="sy0">:</span> install<span class="sy0">-</span>headers install<span class="sy0">-</span>libs
&#160;
install<span class="sy0">-</span>headers<span class="sy0">:</span>
	mkdir <span class="sy0">-</span>p <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">DESTDIR</span><span class="br0">&#41;</span><span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">INCLUDEDIR</span><span class="br0">&#41;</span>
	cp <span class="sy0">-</span>R <span class="sy0">--</span>preserve<span class="sy0">=</span>timestamps <span class="kw1">include</span><span class="sy0">/.</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">DESTDIR</span><span class="br0">&#41;</span><span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">INCLUDEDIR</span><span class="br0">&#41;</span><span class="sy0">/.</span>
&#160;
install<span class="sy0">-</span>libs<span class="sy0">:</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">BINARIES</span><span class="br0">&#41;</span>
	mkdir <span class="sy0">-</span>p <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">DESTDIR</span><span class="br0">&#41;</span><span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">LIBDIR</span><span class="br0">&#41;</span>
	cp <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">BINARIES</span><span class="br0">&#41;</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">DESTDIR</span><span class="br0">&#41;</span><span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">LIBDIR</span><span class="br0">&#41;</span>
&#160;
<span class="sy0">-</span><span class="kw1">include</span> <span class="sy0">$</span><span class="br0">&#40;</span>OBJS<span class="sy0">:.</span>o<span class="sy0">=.</span>d<span class="br0">&#41;</span>
<span class="sy0">-</span><span class="kw1">include</span> <span class="sy0">$</span><span class="br0">&#40;</span>LIBK_OBJS<span class="sy0">:.</span>o<span class="sy0">=.</span>d<span class="br0">&#41;</span></pre></div></div>
<h4> <span class="mw-headline" id="libc.2Fstdlib.2Fabort.c"> libc/stdlib/abort.c </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;stdio.h&gt;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
&#160;
__attribute__<span class="br0">&#40;</span><span class="br0">&#40;</span>__noreturn__<span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw4">void</span> <span class="kw3">abort</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
<span class="co2">#if defined(__is_libk)</span>
	<span class="co1">// TODO: Add proper kernel panic.</span>
	<span class="kw3">printf</span><span class="br0">&#40;</span><span class="st0">&quot;kernel: panic: abort()<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co2">#else</span>
	<span class="co1">// TODO: Abnormally terminate the process as if by SIGABRT.</span>
	<span class="kw3">printf</span><span class="br0">&#40;</span><span class="st0">&quot;abort()<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co2">#endif</span>
	<span class="kw1">while</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
	__builtin_unreachable<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div>
<h4> <span class="mw-headline" id="libc.2Fstring.2Fmemmove.c"> libc/string/memmove.c </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;string.h&gt;</span>
&#160;
<span class="kw4">void</span><span class="sy0">*</span> <span class="kw3">memmove</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="sy0">*</span> dstptr<span class="sy0">,</span> <span class="kw4">const</span> <span class="kw4">void</span><span class="sy0">*</span> srcptr<span class="sy0">,</span> <span class="kw4">size_t</span> size<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">unsigned</span> <span class="kw4">char</span><span class="sy0">*</span> dst <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">unsigned</span> <span class="kw4">char</span><span class="sy0">*</span><span class="br0">&#41;</span> dstptr<span class="sy0">;</span>
	<span class="kw4">const</span> <span class="kw4">unsigned</span> <span class="kw4">char</span><span class="sy0">*</span> src <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">unsigned</span> <span class="kw4">char</span><span class="sy0">*</span><span class="br0">&#41;</span> srcptr<span class="sy0">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>dst <span class="sy0">&lt;</span> src<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">size_t</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> size<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span>
			dst<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> src<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="br0">&#123;</span>
		<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">size_t</span> i <span class="sy0">=</span> size<span class="sy0">;</span> i <span class="sy0">!=</span> <span class="nu0">0</span><span class="sy0">;</span> i<span class="sy0">--</span><span class="br0">&#41;</span>
			dst<span class="br0">&#91;</span>i<span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="sy0">=</span> src<span class="br0">&#91;</span>i<span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">return</span> dstptr<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div>
<h4> <span class="mw-headline" id="libc.2Fstring.2Fstrlen.c"> libc/string/strlen.c </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;string.h&gt;</span>
&#160;
<span class="kw4">size_t</span> <span class="kw3">strlen</span><span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy0">*</span> str<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">size_t</span> len <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
	<span class="kw1">while</span> <span class="br0">&#40;</span>str<span class="br0">&#91;</span>len<span class="br0">&#93;</span><span class="br0">&#41;</span>
		len<span class="sy0">++;</span>
	<span class="kw1">return</span> len<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div>
<h4> <span class="mw-headline" id="libc.2Fstring.2Fmemcmp.c"> libc/string/memcmp.c </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;string.h&gt;</span>
&#160;
<span class="kw4">int</span> <span class="kw3">memcmp</span><span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">void</span><span class="sy0">*</span> aptr<span class="sy0">,</span> <span class="kw4">const</span> <span class="kw4">void</span><span class="sy0">*</span> bptr<span class="sy0">,</span> <span class="kw4">size_t</span> size<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">const</span> <span class="kw4">unsigned</span> <span class="kw4">char</span><span class="sy0">*</span> a <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">unsigned</span> <span class="kw4">char</span><span class="sy0">*</span><span class="br0">&#41;</span> aptr<span class="sy0">;</span>
	<span class="kw4">const</span> <span class="kw4">unsigned</span> <span class="kw4">char</span><span class="sy0">*</span> b <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">unsigned</span> <span class="kw4">char</span><span class="sy0">*</span><span class="br0">&#41;</span> bptr<span class="sy0">;</span>
	<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">size_t</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> size<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span>a<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">&lt;</span> b<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="br0">&#41;</span>
			<span class="kw1">return</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span>
		<span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>b<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">&lt;</span> a<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="br0">&#41;</span>
			<span class="kw1">return</span> <span class="nu0">1</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div>
<h4> <span class="mw-headline" id="libc.2Fstring.2Fmemset.c"> libc/string/memset.c </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;string.h&gt;</span>
&#160;
<span class="kw4">void</span><span class="sy0">*</span> <span class="kw3">memset</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="sy0">*</span> bufptr<span class="sy0">,</span> <span class="kw4">int</span> value<span class="sy0">,</span> <span class="kw4">size_t</span> size<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">unsigned</span> <span class="kw4">char</span><span class="sy0">*</span> buf <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">unsigned</span> <span class="kw4">char</span><span class="sy0">*</span><span class="br0">&#41;</span> bufptr<span class="sy0">;</span>
	<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">size_t</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> size<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span>
		buf<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">unsigned</span> <span class="kw4">char</span><span class="br0">&#41;</span> value<span class="sy0">;</span>
	<span class="kw1">return</span> bufptr<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div>
<h4> <span class="mw-headline" id="libc.2Fstring.2Fmemcpy.c"> libc/string/memcpy.c </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;string.h&gt;</span>
&#160;
<span class="kw4">void</span><span class="sy0">*</span> <span class="kw3">memcpy</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="sy0">*</span> restrict dstptr<span class="sy0">,</span> <span class="kw4">const</span> <span class="kw4">void</span><span class="sy0">*</span> restrict srcptr<span class="sy0">,</span> <span class="kw4">size_t</span> size<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">unsigned</span> <span class="kw4">char</span><span class="sy0">*</span> dst <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">unsigned</span> <span class="kw4">char</span><span class="sy0">*</span><span class="br0">&#41;</span> dstptr<span class="sy0">;</span>
	<span class="kw4">const</span> <span class="kw4">unsigned</span> <span class="kw4">char</span><span class="sy0">*</span> src <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">unsigned</span> <span class="kw4">char</span><span class="sy0">*</span><span class="br0">&#41;</span> srcptr<span class="sy0">;</span>
	<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">size_t</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> size<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span>
		dst<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> src<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">;</span>
	<span class="kw1">return</span> dstptr<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div>
<h4> <span class="mw-headline" id="libc.2Fstdio.2Fputs.c"> libc/stdio/puts.c </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;stdio.h&gt;</span>
&#160;
<span class="kw4">int</span> <span class="kw3">puts</span><span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy0">*</span> string<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw1">return</span> <span class="kw3">printf</span><span class="br0">&#40;</span><span class="st0">&quot;%s<span class="es1">\n</span>&quot;</span><span class="sy0">,</span> string<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div>
<h4> <span class="mw-headline" id="libc.2Fstdio.2Fputchar.c"> libc/stdio/putchar.c </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;stdio.h&gt;</span>
&#160;
<span class="co2">#if defined(__is_libk)</span>
<span class="co2">#include &lt;kernel/tty.h&gt;</span>
<span class="co2">#endif</span>
&#160;
<span class="kw4">int</span> <span class="kw3">putchar</span><span class="br0">&#40;</span><span class="kw4">int</span> ic<span class="br0">&#41;</span> <span class="br0">&#123;</span>
<span class="co2">#if defined(__is_libk)</span>
	<span class="kw4">char</span> c <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">char</span><span class="br0">&#41;</span> ic<span class="sy0">;</span>
	terminal_write<span class="br0">&#40;</span><span class="sy0">&amp;</span>c<span class="sy0">,</span> <span class="kw4">sizeof</span><span class="br0">&#40;</span>c<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co2">#else</span>
	<span class="co1">// TODO: Implement stdio and the write system call.</span>
<span class="co2">#endif</span>
	<span class="kw1">return</span> ic<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div>
<h4> <span class="mw-headline" id="libc.2Fstdio.2Fprintf.c"> libc/stdio/printf.c </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;limits.h&gt;</span>
<span class="co2">#include &lt;stdbool.h&gt;</span>
<span class="co2">#include &lt;stdarg.h&gt;</span>
<span class="co2">#include &lt;stdio.h&gt;</span>
<span class="co2">#include &lt;string.h&gt;</span>
&#160;
<span class="kw4">static</span> bool print<span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy0">*</span> data<span class="sy0">,</span> <span class="kw4">size_t</span> length<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">const</span> <span class="kw4">unsigned</span> <span class="kw4">char</span><span class="sy0">*</span> bytes <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">unsigned</span> <span class="kw4">char</span><span class="sy0">*</span><span class="br0">&#41;</span> data<span class="sy0">;</span>
	<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">size_t</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> length<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw3">putchar</span><span class="br0">&#40;</span>bytes<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="sy0">==</span> EOF<span class="br0">&#41;</span>
			<span class="kw1">return</span> <span class="kw2">false</span><span class="sy0">;</span>
	<span class="kw1">return</span> <span class="kw2">true</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">int</span> <span class="kw3">printf</span><span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy0">*</span> restrict format<span class="sy0">,</span> ...<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	va_list parameters<span class="sy0">;</span>
	<span class="kw3">va_start</span><span class="br0">&#40;</span>parameters<span class="sy0">,</span> format<span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
	<span class="kw4">int</span> written <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&#160;
	<span class="kw1">while</span> <span class="br0">&#40;</span><span class="sy0">*</span>format <span class="sy0">!=</span> <span class="st0">'<span class="es5">\0</span>'</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="kw4">size_t</span> maxrem <span class="sy0">=</span> INT_MAX <span class="sy0">-</span> written<span class="sy0">;</span>
&#160;
		<span class="kw1">if</span> <span class="br0">&#40;</span>format<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">!=</span> <span class="st0">'%'</span> <span class="sy0">||</span> format<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="sy0">==</span> <span class="st0">'%'</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span>format<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">==</span> <span class="st0">'%'</span><span class="br0">&#41;</span>
				format<span class="sy0">++;</span>
			<span class="kw4">size_t</span> amount <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
			<span class="kw1">while</span> <span class="br0">&#40;</span>format<span class="br0">&#91;</span>amount<span class="br0">&#93;</span> <span class="sy0">&amp;&amp;</span> format<span class="br0">&#91;</span>amount<span class="br0">&#93;</span> <span class="sy0">!=</span> <span class="st0">'%'</span><span class="br0">&#41;</span>
				amount<span class="sy0">++;</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span>maxrem <span class="sy0">&lt;</span> amount<span class="br0">&#41;</span> <span class="br0">&#123;</span>
				<span class="co1">// TODO: Set errno to EOVERFLOW.</span>
				<span class="kw1">return</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span>
			<span class="br0">&#125;</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>print<span class="br0">&#40;</span>format<span class="sy0">,</span> amount<span class="br0">&#41;</span><span class="br0">&#41;</span>
				<span class="kw1">return</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span>
			format <span class="sy0">+=</span> amount<span class="sy0">;</span>
			written <span class="sy0">+=</span> amount<span class="sy0">;</span>
			<span class="kw1">continue</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
&#160;
		<span class="kw4">const</span> <span class="kw4">char</span><span class="sy0">*</span> format_begun_at <span class="sy0">=</span> format<span class="sy0">++;</span>
&#160;
		<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">*</span>format <span class="sy0">==</span> <span class="st0">'c'</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
			format<span class="sy0">++;</span>
			<span class="kw4">char</span> c <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">char</span><span class="br0">&#41;</span> <span class="kw3">va_arg</span><span class="br0">&#40;</span>parameters<span class="sy0">,</span> <span class="kw4">int</span> <span class="coMULTI">/* char promotes to int */</span><span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>maxrem<span class="br0">&#41;</span> <span class="br0">&#123;</span>
				<span class="co1">// TODO: Set errno to EOVERFLOW.</span>
				<span class="kw1">return</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span>
			<span class="br0">&#125;</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>print<span class="br0">&#40;</span><span class="sy0">&amp;</span>c<span class="sy0">,</span> <span class="kw4">sizeof</span><span class="br0">&#40;</span>c<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
				<span class="kw1">return</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span>
			written<span class="sy0">++;</span>
		<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">*</span>format <span class="sy0">==</span> <span class="st0">'s'</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
			format<span class="sy0">++;</span>
			<span class="kw4">const</span> <span class="kw4">char</span><span class="sy0">*</span> str <span class="sy0">=</span> <span class="kw3">va_arg</span><span class="br0">&#40;</span>parameters<span class="sy0">,</span> <span class="kw4">const</span> <span class="kw4">char</span><span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="kw4">size_t</span> len <span class="sy0">=</span> <span class="kw3">strlen</span><span class="br0">&#40;</span>str<span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span>maxrem <span class="sy0">&lt;</span> len<span class="br0">&#41;</span> <span class="br0">&#123;</span>
				<span class="co1">// TODO: Set errno to EOVERFLOW.</span>
				<span class="kw1">return</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span>
			<span class="br0">&#125;</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>print<span class="br0">&#40;</span>str<span class="sy0">,</span> len<span class="br0">&#41;</span><span class="br0">&#41;</span>
				<span class="kw1">return</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span>
			written <span class="sy0">+=</span> len<span class="sy0">;</span>
		<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="br0">&#123;</span>
			format <span class="sy0">=</span> format_begun_at<span class="sy0">;</span>
			<span class="kw4">size_t</span> len <span class="sy0">=</span> <span class="kw3">strlen</span><span class="br0">&#40;</span>format<span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span>maxrem <span class="sy0">&lt;</span> len<span class="br0">&#41;</span> <span class="br0">&#123;</span>
				<span class="co1">// TODO: Set errno to EOVERFLOW.</span>
				<span class="kw1">return</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span>
			<span class="br0">&#125;</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>print<span class="br0">&#40;</span>format<span class="sy0">,</span> len<span class="br0">&#41;</span><span class="br0">&#41;</span>
				<span class="kw1">return</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span>
			written <span class="sy0">+=</span> len<span class="sy0">;</span>
			format <span class="sy0">+=</span> len<span class="sy0">;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw3">va_end</span><span class="br0">&#40;</span>parameters<span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="kw1">return</span> written<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div>
<h4> <span class="mw-headline" id="libc.2Farch.2Fi386.2Fmake.config"> libc/arch/i386/make.config </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="make source-make"><pre class="de1">ARCH_CFLAGS<span class="sy0">=</span>
ARCH_CPPFLAGS<span class="sy0">=</span>
KERNEL_ARCH_CFLAGS<span class="sy0">=</span>
KERNEL_ARCH_CPPFLAGS<span class="sy0">=</span>
&#160;
ARCH_FREEOBJS<span class="sy0">=</span>\
&#160;
ARCH_HOSTEDOBJS<span class="sy0">=</span>\</pre></div></div>
<h4> <span class="mw-headline" id="libc.2F.gitignore"> libc/.gitignore </span></h4>
<pre>
*.a
*.d
*.o
</pre>
<h3> <span class="mw-headline" id="Miscellaneous"> Miscellaneous </span></h3>
<p>These files go into the root source directory.
</p>
<h4> <span class="mw-headline" id="build.sh"> build.sh </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="co0">#!/bin/sh</span>
<span class="kw1">set</span> <span class="re5">-e</span>
. .<span class="sy0">/</span>headers.sh
&#160;
<span class="kw1">for</span> PROJECT <span class="kw1">in</span> <span class="re1">$PROJECTS</span>; <span class="kw1">do</span>
  <span class="br0">&#40;</span><span class="kw3">cd</span> <span class="re1">$PROJECT</span> <span class="sy0">&amp;&amp;</span> <span class="re2">DESTDIR</span>=<span class="st0">&quot;<span class="es2">$SYSROOT</span>&quot;</span> <span class="re1">$MAKE</span> <span class="kw2">install</span><span class="br0">&#41;</span>
<span class="kw1">done</span></pre></div></div>
<p>You should make this executable script executable by running:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="kw2">chmod</span> +x build.sh</pre></div></div>
<h4> <span class="mw-headline" id="clean.sh"> clean.sh </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="co0">#!/bin/sh</span>
<span class="kw1">set</span> <span class="re5">-e</span>
. .<span class="sy0">/</span>config.sh
&#160;
<span class="kw1">for</span> PROJECT <span class="kw1">in</span> <span class="re1">$PROJECTS</span>; <span class="kw1">do</span>
  <span class="br0">&#40;</span><span class="kw3">cd</span> <span class="re1">$PROJECT</span> <span class="sy0">&amp;&amp;</span> <span class="re1">$MAKE</span> clean<span class="br0">&#41;</span>
<span class="kw1">done</span>
&#160;
<span class="kw2">rm</span> <span class="re5">-rf</span> sysroot
<span class="kw2">rm</span> <span class="re5">-rf</span> isodir
<span class="kw2">rm</span> <span class="re5">-rf</span> myos.iso</pre></div></div>
<p>You should make this executable script executable by running:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="kw2">chmod</span> +x clean.sh</pre></div></div>
<h4> <span class="mw-headline" id="config.sh"> config.sh </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="re2">SYSTEM_HEADER_PROJECTS</span>=<span class="st0">&quot;libc kernel&quot;</span>
<span class="re2">PROJECTS</span>=<span class="st0">&quot;libc kernel&quot;</span>
&#160;
<span class="kw3">export</span> <span class="re2">MAKE</span>=<span class="co1">${MAKE:-make}</span>
<span class="kw3">export</span> <span class="re2">HOST</span>=<span class="co1">${HOST:-$(./default-host.sh)}</span>
&#160;
<span class="kw3">export</span> <span class="re2">AR</span>=<span class="co1">${HOST}</span><span class="re5">-ar</span>
<span class="kw3">export</span> <span class="re2">AS</span>=<span class="co1">${HOST}</span><span class="re5">-as</span>
<span class="kw3">export</span> <span class="re2">CC</span>=<span class="co1">${HOST}</span><span class="re5">-gcc</span>
&#160;
<span class="kw3">export</span> <span class="re2">PREFIX</span>=<span class="sy0">/</span>usr
<span class="kw3">export</span> <span class="re2">EXEC_PREFIX</span>=<span class="re1">$PREFIX</span>
<span class="kw3">export</span> <span class="re2">BOOTDIR</span>=<span class="sy0">/</span>boot
<span class="kw3">export</span> <span class="re2">LIBDIR</span>=<span class="re1">$EXEC_PREFIX</span><span class="sy0">/</span>lib
<span class="kw3">export</span> <span class="re2">INCLUDEDIR</span>=<span class="re1">$PREFIX</span><span class="sy0">/</span>include
&#160;
<span class="kw3">export</span> <span class="re2">CFLAGS</span>=<span class="st_h">'-O2 -g'</span>
<span class="kw3">export</span> <span class="re2">CPPFLAGS</span>=<span class="st_h">''</span>
&#160;
<span class="co0"># Configure the cross-compiler to use the desired system root.</span>
<span class="kw3">export</span> <span class="re2">SYSROOT</span>=<span class="st0">&quot;<span class="es4">$(pwd)</span>/sysroot&quot;</span>
<span class="kw3">export</span> <span class="re2">CC</span>=<span class="st0">&quot;<span class="es2">$CC</span> --sysroot=<span class="es2">$SYSROOT</span>&quot;</span>
&#160;
<span class="co0"># Work around that the -elf gcc targets doesn't have a system include directory</span>
<span class="co0"># because it was configured with --without-headers rather than --with-sysroot.</span>
<span class="kw1">if</span> <span class="kw3">echo</span> <span class="st0">&quot;<span class="es2">$HOST</span>&quot;</span> <span class="sy0">|</span> <span class="kw2">grep</span> <span class="re5">-Eq</span> <span class="re5">--</span> <span class="st_h">'-elf($|-)'</span>; <span class="kw1">then</span>
  <span class="kw3">export</span> <span class="re2">CC</span>=<span class="st0">&quot;<span class="es2">$CC</span> -isystem=<span class="es2">$INCLUDEDIR</span>&quot;</span>
<span class="kw1">fi</span></pre></div></div>
<h4> <span class="mw-headline" id="default-host.sh"> default-host.sh </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="co0">#!/bin/sh</span>
<span class="kw3">echo</span> i686-elf</pre></div></div>
<p>You should make this executable script executable by running:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="kw2">chmod</span> +x default-host.sh</pre></div></div>
<h4> <span class="mw-headline" id="headers.sh"> headers.sh </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="co0">#!/bin/sh</span>
<span class="kw1">set</span> <span class="re5">-e</span>
. .<span class="sy0">/</span>config.sh
&#160;
<span class="kw2">mkdir</span> <span class="re5">-p</span> <span class="st0">&quot;<span class="es2">$SYSROOT</span>&quot;</span>
&#160;
<span class="kw1">for</span> PROJECT <span class="kw1">in</span> <span class="re1">$SYSTEM_HEADER_PROJECTS</span>; <span class="kw1">do</span>
  <span class="br0">&#40;</span><span class="kw3">cd</span> <span class="re1">$PROJECT</span> <span class="sy0">&amp;&amp;</span> <span class="re2">DESTDIR</span>=<span class="st0">&quot;<span class="es2">$SYSROOT</span>&quot;</span> <span class="re1">$MAKE</span> install-headers<span class="br0">&#41;</span>
<span class="kw1">done</span></pre></div></div>
<p>You should make this executable script executable by running:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="kw2">chmod</span> +x headers.sh</pre></div></div>
<h4> <span class="mw-headline" id="iso.sh"> iso.sh </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="co0">#!/bin/sh</span>
<span class="kw1">set</span> <span class="re5">-e</span>
. .<span class="sy0">/</span>build.sh
&#160;
<span class="kw2">mkdir</span> <span class="re5">-p</span> isodir
<span class="kw2">mkdir</span> <span class="re5">-p</span> isodir<span class="sy0">/</span>boot
<span class="kw2">mkdir</span> <span class="re5">-p</span> isodir<span class="sy0">/</span>boot<span class="sy0">/</span>grub
&#160;
<span class="kw2">cp</span> sysroot<span class="sy0">/</span>boot<span class="sy0">/</span>myos.kernel isodir<span class="sy0">/</span>boot<span class="sy0">/</span>myos.kernel
<span class="kw2">cat</span> <span class="sy0">&gt;</span> isodir<span class="sy0">/</span>boot<span class="sy0">/</span>grub<span class="sy0">/</span>grub.cfg <span class="co2">&lt;&lt; EOF
menuentry &quot;myos&quot; {
	multiboot /boot/myos.kernel
}
EOF</span>
grub-mkrescue <span class="re5">-o</span> myos.iso isodir</pre></div></div>
<p>You should make this executable script executable by running:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="kw2">chmod</span> +x iso.sh</pre></div></div>
<h4> <span class="mw-headline" id="qemu.sh"> qemu.sh </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="co0">#!/bin/sh</span>
<span class="kw1">set</span> <span class="re5">-e</span>
. .<span class="sy0">/</span>iso.sh
&#160;
<span class="co4">qemu-system-$</span><span class="br0">&#40;</span>.<span class="sy0">/</span>target-triplet-to-arch.sh <span class="re1">$HOST</span><span class="br0">&#41;</span> <span class="re5">-cdrom</span> myos.iso</pre></div></div>
<p>You should make this executable script executable by running:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="kw2">chmod</span> +x qemu.sh</pre></div></div>
<h4> <span class="mw-headline" id="target-triplet-to-arch.sh"> target-triplet-to-arch.sh </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="co0">#!/bin/sh</span>
<span class="kw1">if</span> <span class="kw3">echo</span> <span class="st0">&quot;$1&quot;</span> <span class="sy0">|</span> <span class="kw2">grep</span> <span class="re5">-Eq</span> <span class="st_h">'i[[:digit:]]86-'</span>; <span class="kw1">then</span>
  <span class="kw3">echo</span> i386
<span class="kw1">else</span>
  <span class="kw3">echo</span> <span class="st0">&quot;$1&quot;</span> <span class="sy0">|</span> <span class="kw2">grep</span> <span class="re5">-Eo</span> <span class="st_h">'^[[:alnum:]_]*'</span>
<span class="kw1">fi</span></pre></div></div>
<p>You should make this executable script executable by running:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="kw2">chmod</span> +x target-triplet-to-arch.sh</pre></div></div>
<h4> <span class="mw-headline" id=".gitignore"> .gitignore </span></h4>
<pre>
*.iso
isodir
sysroot
</pre>
<h2> <span class="mw-headline" id="Cross-Compiling_the_Operating_System"> Cross-Compiling the Operating System </span></h2>
<p>The system is cross-compiled in the same manner as <a href="Bare_Bones" title="Bare Bones">Bare Bones</a>, though with
the complexity of having a system root with the final system and using a libk.
In this example, we elected to use shell scripts to to the top-level build
process, though you could possibly also use a makefile for that or a wholly
different build system. Though, assuming this setup works for you, you can clean
the source tree by invoking:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1">.<span class="sy0">/</span>clean.sh</pre></div></div>
<p>You can install all the system headers into the system root without relying on
the compiler at all, which will be useful later on when switching to a
<a href="Hosted_GCC_Cross-Compiler" title="Hosted GCC Cross-Compiler">Hosted GCC Cross-Compiler</a>, by invoking:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1">.<span class="sy0">/</span>headers.sh</pre></div></div>
<p>You can build a bootable cdrom image of the operating system by invoking:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1">.<span class="sy0">/</span>iso.sh</pre></div></div>
<p>It's probably a good idea to create a quick <i>build-and-then-launch</i> short-cut
like used in this example to run the system in your favorite emulator quickly:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1">.<span class="sy0">/</span>qemu.sh</pre></div></div>
<h2> <span class="mw-headline" id="Troubleshooting"> Troubleshooting </span></h2>
<p>If you receive odd errors during the build, you may have made a mistake during manual copying, perhaps missed a file, forgotten to make a file executable, or bugs in the highlighting software we use cause unintended whitespace to appear. Perform a git repository clone as described above, and use that code instead, or compare the two directory trees with the <tt>diff(1)</tt> diff command line utility. If you made personal changes to the code, those may be at fault.
</p>
<h2> <span class="mw-headline" id="Moving_Forward"> Moving Forward </span></h2>
<p>You should adapt this template to your needs. There's a number of things you
should consider doing now:
</p>
<h3> <span class="mw-headline" id="Renaming_MyOS_to_YourOS"> Renaming MyOS to YourOS </span></h3>
<p>Certainly you wish to name your operating system after your favorite flower,
hometown, boolean value, or whatever marketing told you. Do a search and replace
that replaces <tt>myos</tt> with whatever you wish to call it. Keep in mind that
the name is deliberately lower-case in a few places for technical reasons.
</p>
<h3> <span class="mw-headline" id="Improving_the_Build_System"> Improving the Build System </span></h3>
<dl><dd><i>Main article:</i> <a href="Hard_Build_System" title="Hard Build System">Hard Build System</a>
</dd></dl>
<p>It is probably worth improving the build system. For instance, it could be
useful if <tt>build.sh</tt> accepted command-line options, or perhaps if it used
<tt>make</tt>'s important <tt>-j</tt> option for concurrent builds.
</p><p>It's worth considering how contributors will build your operating system. It's an easy trap to fall into thinking you can make super script that does everything. This will end up complex and insufficiently flexible; or it will be flexible and even more complex. It's better to document what the user should do to prepare a cross toolchain and what prerequisite programs to install. This tutorial shows an example hard build system that merely builds the operating system. You can complete it by documenting how to build a cross-compiler and how to use it.
</p>
<h3> <span class="mw-headline" id="Stack_Smash_Protector"> Stack Smash Protector </span></h3>
<dl><dd><i>Main article:</i> <a href="Stack_Smashing_Protector" title="Stack Smashing Protector">Stack Smashing Protector</a>
</dd></dl>
<p>Early is not too soon to think about security and robustness. You can take advantage of the optional stack smash protector offered by modern compilers that detect stack buffer overruns rather than behaving unexpectedly (or nothing happening, if unlucky).
</p>
<h3> <span class="mw-headline" id="Going_Further"> Going Further </span></h3>
<dl><dd><i>Main article:</i> <a href="Going_Further_on_x86" title="Going Further on x86">Going Further on x86</a>
</dd></dl>
<p>This guide is meant as an overview of what to do, so you have a kernel ready for more features, without actually redesigning it radically when adding them.
</p>
<h3> <span class="mw-headline" id="User-Space"> User-Space </span></h3>
<p>A later tutorial in this series will extend this template with a proper
user-space and an <a href="OS_Specific_Toolchain" title="OS Specific Toolchain">OS Specific Toolchain</a> that fully utilizes the system root.
</p>
<!-- 
NewPP limit report
Preprocessor node count: 1167/1000000
Post-expand include size: 2715/2097152 bytes
Template argument size: 2313/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3448-0!*!0!!en!2!* and timestamp 20180121032704 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=Meaty_Skeleton&amp;oldid=21673#System_Root">http://wiki.osdev.org/index.php?title=Meaty_Skeleton&amp;oldid=21673#System_Root</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="http://wiki.osdev.org/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="Category:Level_1_Tutorials" title="Category:Level 1 Tutorials">Level 1 Tutorials</a></li><li><a href="Category:Bare_bones_tutorials" title="Category:Bare bones tutorials">Bare bones tutorials</a></li><li><a href="Category:C" title="Category:C">C</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Meaty_Skeleton" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="Meaty_Skeleton"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk"><span><a href="Talk:Meaty_Skeleton"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="Sysroot#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="Meaty_Skeleton" >Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=Meaty_Skeleton&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=Meaty_Skeleton&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="Sysroot#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="http://wiki.osdev.org/index.php" id="searchform">
		<input type='hidden' name="title" value="Special:Search"/>
				<input type="search" name="search" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput" />		<input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" />		<input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" />			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="/Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="/Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="/OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="/OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="/OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="/Special:WhatLinksHere/Meaty_Skeleton" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="/Special:RecentChangesLinked/Meaty_Skeleton" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="/index.php?title=Meaty_Skeleton&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="/index.php?title=Meaty_Skeleton&amp;oldid=21673" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 9 November 2017, at 22:03.</li>
											<li id="footer-info-viewcount">This page has been accessed 71,644 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="/OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="/OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimeskins/common/images/osdev.png);" href="/Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/Meaty_Skeleton" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/Meaty_Skeleton" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=Meaty_Skeleton&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=Meaty_Skeleton&amp;oldid=21673" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 9 November 2017, at 22:03.</li>
											<li id="footer-info-viewcount">This page has been accessed 71,644 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script>
<script>
redirectToFragment("#System_Root");
</script>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.037 secs. -->
	</body>
</html>
