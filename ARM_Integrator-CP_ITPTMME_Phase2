<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>ARM Integrator-CP ITPTMME Phase2 - OSDev Wiki</title>
<meta charset="UTF-8" />
<meta name="generator" content="MediaWiki 1.18.0" />
<link rel="shortcut icon" href="favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "ARM_Integrator-CP_ITPTMME_Phase2", "wgTitle": "ARM Integrator-CP ITPTMME Phase2", "wgCurRevisionId": 16088, "wgArticleId": 3503, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": [], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script>
<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #b1b100;}
.c.source-c .kw2 {color: #000000; font-weight: bold;}
.c.source-c .kw3 {color: #000066;}
.c.source-c .kw4 {color: #993333;}
.c.source-c .co1 {color: #666666; font-style: italic;}
.c.source-c .co2 {color: #339933;}
.c.source-c .coMULTI {color: #808080; font-style: italic;}
.c.source-c .es0 {color: #000099; font-weight: bold;}
.c.source-c .es1 {color: #000099; font-weight: bold;}
.c.source-c .es2 {color: #660099; font-weight: bold;}
.c.source-c .es3 {color: #660099; font-weight: bold;}
.c.source-c .es4 {color: #660099; font-weight: bold;}
.c.source-c .es5 {color: #006699; font-weight: bold;}
.c.source-c .br0 {color: #009900;}
.c.source-c .sy0 {color: #339933;}
.c.source-c .st0 {color: #ff0000;}
.c.source-c .nu0 {color: #0000dd;}
.c.source-c .nu6 {color: #208080;}
.c.source-c .nu8 {color: #208080;}
.c.source-c .nu12 {color: #208080;}
.c.source-c .nu16 {color:#800080;}
.c.source-c .nu17 {color:#800080;}
.c.source-c .nu18 {color:#800080;}
.c.source-c .nu19 {color:#800080;}
.c.source-c .me1 {color: #202020;}
.c.source-c .me2 {color: #202020;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-ARM_Integrator-CP_ITPTMME_Phase2 action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">ARM Integrator-CP ITPTMME Phase2</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="ARM_Integrator-CP_ITPTMME_Phase2#mw-head">navigation</a>,
					<a href="ARM_Integrator-CP_ITPTMME_Phase2#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div lang="en" dir="ltr" class="mw-content-ltr"><table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="ARM_Integrator-CP_ITPTMME_Phase2#Processes_.26_Threads.2C_Exception_Handling.2C_And_System_Calls"><span class="tocnumber">1</span> <span class="toctext">Processes &amp; Threads, Exception Handling, And System Calls</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="ARM_Integrator-CP_ITPTMME_Phase2#New_Define_For_Timer_Support"><span class="tocnumber">1.1</span> <span class="toctext">New Define For Timer Support</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="ARM_Integrator-CP_ITPTMME_Phase2#Basic_Linked_List_Utility_Functions"><span class="tocnumber">1.2</span> <span class="toctext">Basic Linked List Utility Functions</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="ARM_Integrator-CP_ITPTMME_Phase2#Separate_Scheduler_Function"><span class="tocnumber">1.3</span> <span class="toctext">Separate Scheduler Function</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="ARM_Integrator-CP_ITPTMME_Phase2#Added_Idle_Thread_And_Kernel_Thread"><span class="tocnumber">1.4</span> <span class="toctext">Added Idle Thread And Kernel Thread</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="ARM_Integrator-CP_ITPTMME_Phase2#Creation_Of_Kernel_And_Idle_Thread"><span class="tocnumber">1.5</span> <span class="toctext">Creation Of Kernel And Idle Thread</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="ARM_Integrator-CP_ITPTMME_Phase2#New_Exception_Handlers"><span class="tocnumber">1.6</span> <span class="toctext">New Exception Handlers</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="ARM_Integrator-CP_ITPTMME_Phase2#Added_memset"><span class="tocnumber">1.7</span> <span class="toctext">Added memset</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="ARM_Integrator-CP_ITPTMME_Phase2#Changes_In_kelfload"><span class="tocnumber">1.8</span> <span class="toctext">Changes In kelfload</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="ARM_Integrator-CP_ITPTMME_Phase2#Changed_To_Creation_Of_Process_From_Modules"><span class="tocnumber">1.9</span> <span class="toctext">Changed To Creation Of Process From Modules</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="ARM_Integrator-CP_ITPTMME_Phase2#SWI_Exception_Entry_And_Exit_Changed"><span class="tocnumber">1.10</span> <span class="toctext">SWI Exception Entry And Exit Changed</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="ARM_Integrator-CP_ITPTMME_Phase2#Added_System_Call_Numbers"><span class="tocnumber">1.11</span> <span class="toctext">Added System Call Numbers</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="ARM_Integrator-CP_ITPTMME_Phase2#New_KPROCESS_And_Updated_KTHREAD"><span class="tocnumber">1.12</span> <span class="toctext">New KPROCESS And Updated KTHREAD</span></a></li>
<li class="toclevel-2 tocsection-14"><a href="ARM_Integrator-CP_ITPTMME_Phase2#Changes_To_KSTATE"><span class="tocnumber">1.13</span> <span class="toctext">Changes To KSTATE</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="ARM_Integrator-CP_ITPTMME_Phase2#Second_Module_Added"><span class="tocnumber">1.14</span> <span class="toctext">Second Module Added</span></a></li>
<li class="toclevel-2 tocsection-16"><a href="ARM_Integrator-CP_ITPTMME_Phase2#First_Module"><span class="tocnumber">1.15</span> <span class="toctext">First Module</span></a></li>
<li class="toclevel-2 tocsection-17"><a href="ARM_Integrator-CP_ITPTMME_Phase2#Change_In_Timer_Initialization"><span class="tocnumber">1.16</span> <span class="toctext">Change In Timer Initialization</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h2> <span class="mw-headline" id="Processes_.26_Threads.2C_Exception_Handling.2C_And_System_Calls"> Processes &amp; Threads, Exception Handling, And System Calls </span></h2>
<p>In this phase we are going to improve our exception handling, rework out tasking system to support processes and threads (instead of tasks), and implement some basic system calls for demonstration.
</p><p>I make a few minor changes and one or two major changes. You can find the full source with:
</p>
<pre>
    git clone http://kmcg3413.net/armthin.git
    git checkout origin/bPHASE1
</pre>
<p>This should give you the source with all the changes below. If you have been following along from the previous pages then you will only have to cover these simple changes. If you are new then I recommend you start from <a href="ARM_Integrator-CP_IRQTimerAndPIC" title="ARM Integrator-CP IRQTimerAndPIC">IRQ, Timer, And PIC</a>.
</p>
<h3> <span class="mw-headline" id="New_Define_For_Timer_Support"> New Define For Timer Support </span></h3>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="coMULTI">/* max number of ticks for a task */</span>
<span class="co2">#define KTASKTICKS 10000</span></pre></div></div>
<p>This sets the time in which threads are interrupted for a context switch. The lower the
higher the frequency or maximum time a thread can execute.
</p>
<h3> <span class="mw-headline" id="Basic_Linked_List_Utility_Functions"> Basic Linked List Utility Functions </span></h3>
<p>I like these functions because they can work with <i>any</i> data structure that has the fields
at the top. It can be cast to type <i>LL</i> and used that way.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1">&#160;
<span class="kw4">typedef</span> <span class="kw4">struct</span> _LL <span class="br0">&#123;</span>
	<span class="kw4">struct</span> _LL			<span class="sy0">*</span>next<span class="sy0">;</span>
	<span class="kw4">struct</span> _LL			<span class="sy0">*</span>prev<span class="sy0">;</span>
<span class="br0">&#125;</span> LL<span class="sy0">;</span>
&#160;
<span class="kw4">void</span> ll_add<span class="br0">&#40;</span><span class="kw4">void</span> <span class="sy0">**</span>p<span class="sy0">,</span> <span class="kw4">void</span> <span class="sy0">*</span>i<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	LL		<span class="sy0">*</span>_i<span class="sy0">;</span>
&#160;
	_i <span class="sy0">=</span> <span class="br0">&#40;</span>LL<span class="sy0">*</span><span class="br0">&#41;</span>i<span class="sy0">;</span>
&#160;
	_i<span class="sy0">-&gt;</span>next <span class="sy0">=</span> <span class="sy0">*</span>p<span class="sy0">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">*</span>p<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		_i<span class="sy0">-&gt;</span>prev <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>LL<span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="sy0">*</span>p<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">-&gt;</span>prev<span class="sy0">;</span>
	<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="br0">&#123;</span>
		_i<span class="sy0">-&gt;</span>prev <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="sy0">*</span>p <span class="sy0">=</span> _i<span class="sy0">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> ll_rem<span class="br0">&#40;</span><span class="kw4">void</span> <span class="sy0">**</span>p<span class="sy0">,</span> <span class="kw4">void</span> <span class="sy0">*</span>i<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	LL			<span class="sy0">*</span>_i<span class="sy0">;</span>
&#160;
	_i <span class="sy0">=</span> <span class="br0">&#40;</span>LL<span class="sy0">*</span><span class="br0">&#41;</span>i<span class="sy0">;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span>_i<span class="sy0">-&gt;</span>prev<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		_i<span class="sy0">-&gt;</span>prev<span class="sy0">-&gt;</span>next <span class="sy0">=</span> _i<span class="sy0">-&gt;</span>next<span class="sy0">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span>_i<span class="sy0">-&gt;</span>next<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		_i<span class="sy0">-&gt;</span>next<span class="sy0">-&gt;</span>prev <span class="sy0">=</span> _i<span class="sy0">-&gt;</span>prev<span class="sy0">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">*</span>p <span class="sy0">==</span> i<span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span>_i<span class="sy0">-&gt;</span>prev<span class="br0">&#41;</span> <span class="br0">&#123;</span>
				<span class="sy0">*</span>p <span class="sy0">=</span> _i<span class="sy0">-&gt;</span>prev<span class="sy0">;</span>
			<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="br0">&#123;</span>
				<span class="sy0">*</span>p <span class="sy0">=</span> _i<span class="sy0">-&gt;</span>next<span class="sy0">;</span>
			<span class="br0">&#125;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div>
<h3> <span class="mw-headline" id="Separate_Scheduler_Function"> Separate Scheduler Function </span></h3>
<p>I have added support for sleeping threads, and a wake up flag. This is by no means a correct design, but rather just a demonstration of how you could put threads to sleep and wake them up. It also supports a timeout which allows a thread to not only wake up with an external signal but also after a specified amount of time.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">void</span> ksched<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
	KSTATE			<span class="sy0">*</span>ks<span class="sy0">;</span>
	KTHREAD			<span class="sy0">*</span>kt<span class="sy0">;</span>
	<span class="kw4">uint32</span>			__lr<span class="sy0">,</span> __sp<span class="sy0">,</span> __spsr<span class="sy0">;</span>
	uintptr			page<span class="sy0">;</span>
&#160;
	ks <span class="sy0">=</span> <span class="br0">&#40;</span>KSTATE<span class="sy0">*</span><span class="br0">&#41;</span>KSTATEADDR<span class="sy0">;</span>
&#160;
	<span class="coMULTI">/* if valid process and thread then store */</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>ks<span class="sy0">-&gt;</span>cproc <span class="sy0">&amp;&amp;</span> ks<span class="sy0">-&gt;</span>cthread<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="coMULTI">/*
			1. store register on stack in thread struct
			2. access hidden registers and store in thread struct
		*/</span>
		kt <span class="sy0">=</span> ks<span class="sy0">-&gt;</span>cthread<span class="sy0">;</span>
		kt<span class="sy0">-&gt;</span>pc <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="sy0">;</span>
		kt<span class="sy0">-&gt;</span>r12 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">2</span><span class="br0">&#93;</span><span class="sy0">;</span>
		kt<span class="sy0">-&gt;</span>r11 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">3</span><span class="br0">&#93;</span><span class="sy0">;</span>
		kt<span class="sy0">-&gt;</span>r10 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">4</span><span class="br0">&#93;</span><span class="sy0">;</span>
		kt<span class="sy0">-&gt;</span>r9 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">5</span><span class="br0">&#93;</span><span class="sy0">;</span>
		kt<span class="sy0">-&gt;</span>r8 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">6</span><span class="br0">&#93;</span><span class="sy0">;</span>
		kt<span class="sy0">-&gt;</span>r7 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">7</span><span class="br0">&#93;</span><span class="sy0">;</span>
		kt<span class="sy0">-&gt;</span>r6 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">8</span><span class="br0">&#93;</span><span class="sy0">;</span>
		kt<span class="sy0">-&gt;</span>r5 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">9</span><span class="br0">&#93;</span><span class="sy0">;</span>
		kt<span class="sy0">-&gt;</span>r4 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">10</span><span class="br0">&#93;</span><span class="sy0">;</span>
		kt<span class="sy0">-&gt;</span>r3 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">11</span><span class="br0">&#93;</span><span class="sy0">;</span>
		kt<span class="sy0">-&gt;</span>r2 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">12</span><span class="br0">&#93;</span><span class="sy0">;</span>
		kt<span class="sy0">-&gt;</span>r1 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">13</span><span class="br0">&#93;</span><span class="sy0">;</span>
		kt<span class="sy0">-&gt;</span>r0 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">14</span><span class="br0">&#93;</span><span class="sy0">;</span>
		kt<span class="sy0">-&gt;</span>cpsr <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">15</span><span class="br0">&#93;</span><span class="sy0">;</span>
		<span class="coMULTI">/* switch to system mode get hidden registers then switch back */</span>
		asm<span class="br0">&#40;</span><span class="st0">&quot;mrs r0, cpsr <span class="es1">\n</span><span class="es1">\
</span>			 mov r1, r0 <span class="es1">\n</span><span class="es1">\
</span>			 bic r0, r0, #0x1f <span class="es1">\n</span><span class="es1">\
</span>			 orr r0, r0, #0x1f <span class="es1">\n</span><span class="es1">\
</span>			 msr cpsr, r0 <span class="es1">\n</span><span class="es1">\
</span>			 mov&#160;%[sp], sp <span class="es1">\n</span><span class="es1">\
</span>			 mov&#160;%[lr], lr <span class="es1">\n</span><span class="es1">\
</span>			 msr cpsr, r1 <span class="es1">\n</span><span class="es1">\
</span>			 &quot;</span> <span class="sy0">:</span> <span class="br0">&#91;</span>sp<span class="br0">&#93;</span><span class="st0">&quot;=r&quot;</span> <span class="br0">&#40;</span>__sp<span class="br0">&#41;</span><span class="sy0">,</span> <span class="br0">&#91;</span>lr<span class="br0">&#93;</span><span class="st0">&quot;=r&quot;</span> <span class="br0">&#40;</span>__lr<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		kt<span class="sy0">-&gt;</span>sp <span class="sy0">=</span> __sp<span class="sy0">;</span>
		kt<span class="sy0">-&gt;</span>lr <span class="sy0">=</span> __lr<span class="sy0">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>ks<span class="sy0">-&gt;</span>cproc<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="coMULTI">/* initial start */</span>
		ks<span class="sy0">-&gt;</span>cproc <span class="sy0">=</span> ks<span class="sy0">-&gt;</span>procs<span class="sy0">;</span>
		ks<span class="sy0">-&gt;</span>cthread <span class="sy0">=</span> ks<span class="sy0">-&gt;</span>procs<span class="sy0">-&gt;</span>threads<span class="sy0">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">while</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span>ks<span class="sy0">-&gt;</span>cthread<span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="coMULTI">/* get next thread */</span>
			ks<span class="sy0">-&gt;</span>cthread <span class="sy0">=</span> ks<span class="sy0">-&gt;</span>cthread<span class="sy0">-&gt;</span>next<span class="sy0">;</span>
		<span class="br0">&#125;</span>
&#160;
		<span class="coMULTI">/* if none get next process */</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>ks<span class="sy0">-&gt;</span>cthread<span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="coMULTI">/* get next process */</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span>ks<span class="sy0">-&gt;</span>cproc<span class="br0">&#41;</span> <span class="br0">&#123;</span>
				ks<span class="sy0">-&gt;</span>cproc <span class="sy0">=</span> ks<span class="sy0">-&gt;</span>cproc<span class="sy0">-&gt;</span>next<span class="sy0">;</span>
			<span class="br0">&#125;</span>
			<span class="coMULTI">/* if none get first process */</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>ks<span class="sy0">-&gt;</span>cproc<span class="br0">&#41;</span> <span class="br0">&#123;</span>
				ks<span class="sy0">-&gt;</span>cproc <span class="sy0">=</span> ks<span class="sy0">-&gt;</span>procs<span class="sy0">;</span>
			<span class="br0">&#125;</span>
			<span class="coMULTI">/* get first thread */</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span>ks<span class="sy0">-&gt;</span>cproc<span class="br0">&#41;</span> <span class="br0">&#123;</span>
				ks<span class="sy0">-&gt;</span>cthread <span class="sy0">=</span> ks<span class="sy0">-&gt;</span>cproc<span class="sy0">-&gt;</span>threads<span class="sy0">;</span>
			<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="br0">&#123;</span>
				ks<span class="sy0">-&gt;</span>cthread <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
			<span class="br0">&#125;</span>
		<span class="br0">&#125;</span>
&#160;
		<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>ks<span class="sy0">-&gt;</span>cthread<span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="kw2">break</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
&#160;
		<span class="coMULTI">/* if current thread is sleeping and current thread equals last thread */</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>ks<span class="sy0">-&gt;</span>cthread<span class="sy0">-&gt;</span>flags <span class="sy0">&amp;</span> KTHREAD_SLEEPING<span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span>ks<span class="sy0">-&gt;</span>cthread <span class="sy0">==</span> kt<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
			PANIC<span class="br0">&#40;</span><span class="st0">&quot;all-threads-sleeping&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
&#160;
		<span class="coMULTI">/* only wakeup if it is sleeping */</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span>ks<span class="sy0">-&gt;</span>cthread<span class="sy0">-&gt;</span>flags <span class="sy0">&amp;</span> KTHREAD_SLEEPING<span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span>ks<span class="sy0">-&gt;</span>cthread<span class="sy0">-&gt;</span>timeout <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="sy0">&amp;&amp;</span> ks<span class="sy0">-&gt;</span><span class="kw3">ctime</span> <span class="sy0">&gt;</span> ks<span class="sy0">-&gt;</span>cthread<span class="sy0">-&gt;</span>timeout<span class="br0">&#41;</span> <span class="br0">&#123;</span>
				<span class="co1">//kprintf(&quot;WOKE UP (timeout)&#160;%x\n&quot;, ks-&gt;cthread);</span>
				<span class="coMULTI">/* wake up thread if passed timeout */</span>
				ks<span class="sy0">-&gt;</span>cthread<span class="sy0">-&gt;</span>flags <span class="sy0">&amp;=</span> ~KTHREAD_SLEEPING<span class="sy0">;</span>
				ks<span class="sy0">-&gt;</span>cthread<span class="sy0">-&gt;</span>r0 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
				<span class="kw2">break</span><span class="sy0">;</span>
			<span class="br0">&#125;</span>
&#160;
			<span class="coMULTI">/* wakeup thread is set to be woken up */</span>
			<span class="kw1">if</span> <span class="br0">&#40;</span>ks<span class="sy0">-&gt;</span>cthread<span class="sy0">-&gt;</span>flags <span class="sy0">&amp;</span> KTHREAD_WAKEUP<span class="br0">&#41;</span> <span class="br0">&#123;</span>
				<span class="co1">//kprintf(&quot;WOKE UP (signal)&#160;%x\n&quot;, ks-&gt;cthread);</span>
				ks<span class="sy0">-&gt;</span>cthread<span class="sy0">-&gt;</span>flags <span class="sy0">&amp;=</span> ~<span class="br0">&#40;</span>KTHREAD_WAKEUP <span class="sy0">|</span> KTHREAD_SLEEPING<span class="br0">&#41;</span><span class="sy0">;</span>
				ks<span class="sy0">-&gt;</span>cthread<span class="sy0">-&gt;</span>r0 <span class="sy0">=</span> ks<span class="sy0">-&gt;</span><span class="kw3">ctime</span> <span class="sy0">-</span> ks<span class="sy0">-&gt;</span>cthread<span class="sy0">-&gt;</span>timeout<span class="sy0">;</span>
				<span class="kw2">break</span><span class="sy0">;</span>
			<span class="br0">&#125;</span>
		<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="br0">&#123;</span>
			<span class="coMULTI">/* run this thread */</span>
			<span class="kw2">break</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
		<span class="coMULTI">/* thread is sleeping or not able to run */</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="coMULTI">/* hopefully we got something or the system should deadlock */</span>
	kt <span class="sy0">=</span> ks<span class="sy0">-&gt;</span>cthread<span class="sy0">;</span>
	<span class="coMULTI">/*
		load registers
	*/</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="sy0">=</span> kt<span class="sy0">-&gt;</span>pc<span class="sy0">;</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">2</span><span class="br0">&#93;</span> <span class="sy0">=</span> kt<span class="sy0">-&gt;</span>r12<span class="sy0">;</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">3</span><span class="br0">&#93;</span> <span class="sy0">=</span> kt<span class="sy0">-&gt;</span>r11<span class="sy0">;</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">4</span><span class="br0">&#93;</span> <span class="sy0">=</span> kt<span class="sy0">-&gt;</span>r10<span class="sy0">;</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">5</span><span class="br0">&#93;</span> <span class="sy0">=</span> kt<span class="sy0">-&gt;</span>r9<span class="sy0">;</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">6</span><span class="br0">&#93;</span> <span class="sy0">=</span> kt<span class="sy0">-&gt;</span>r8<span class="sy0">;</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">7</span><span class="br0">&#93;</span> <span class="sy0">=</span> kt<span class="sy0">-&gt;</span>r7<span class="sy0">;</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">8</span><span class="br0">&#93;</span> <span class="sy0">=</span> kt<span class="sy0">-&gt;</span>r6<span class="sy0">;</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">9</span><span class="br0">&#93;</span> <span class="sy0">=</span> kt<span class="sy0">-&gt;</span>r5<span class="sy0">;</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">10</span><span class="br0">&#93;</span> <span class="sy0">=</span> kt<span class="sy0">-&gt;</span>r4<span class="sy0">;</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">11</span><span class="br0">&#93;</span> <span class="sy0">=</span> kt<span class="sy0">-&gt;</span>r3<span class="sy0">;</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">12</span><span class="br0">&#93;</span> <span class="sy0">=</span> kt<span class="sy0">-&gt;</span>r2<span class="sy0">;</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">13</span><span class="br0">&#93;</span> <span class="sy0">=</span> kt<span class="sy0">-&gt;</span>r1<span class="sy0">;</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">14</span><span class="br0">&#93;</span> <span class="sy0">=</span> kt<span class="sy0">-&gt;</span>r0<span class="sy0">;</span>
	<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">15</span><span class="br0">&#93;</span> <span class="sy0">=</span> kt<span class="sy0">-&gt;</span>cpsr<span class="sy0">;</span>
	<span class="coMULTI">/* switch into system mode restore hidden registers then switch back */</span>
	asm<span class="br0">&#40;</span><span class="st0">&quot;mrs r0, cpsr <span class="es1">\n</span><span class="es1">\
</span>		 mov r1, r0 <span class="es1">\n</span><span class="es1">\
</span>		 bic r0, r0, #0x1f <span class="es1">\n</span><span class="es1">\
</span>		 orr r0, r0, #0x1f <span class="es1">\n</span><span class="es1">\
</span>		 msr cpsr, r0 <span class="es1">\n</span><span class="es1">\
</span>		 mov sp,&#160;%[sp] <span class="es1">\n</span><span class="es1">\
</span>		 mov lr,&#160;%[lr] <span class="es1">\n</span><span class="es1">\
</span>		 msr cpsr, r1 <span class="es1">\n</span><span class="es1">\
</span>		 &quot;</span> <span class="sy0">:</span> <span class="sy0">:</span> <span class="br0">&#91;</span>sp<span class="br0">&#93;</span><span class="st0">&quot;r&quot;</span> <span class="br0">&#40;</span>kt<span class="sy0">-&gt;</span>sp<span class="br0">&#41;</span><span class="sy0">,</span> <span class="br0">&#91;</span>lr<span class="br0">&#93;</span><span class="st0">&quot;r&quot;</span> <span class="br0">&#40;</span>kt<span class="sy0">-&gt;</span>lr<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="coMULTI">/* set TLB table for user space (it can be zero for kernel) */</span>
	kvmm2_getphy<span class="br0">&#40;</span><span class="sy0">&amp;</span>ks<span class="sy0">-&gt;</span>vmm<span class="sy0">,</span> <span class="br0">&#40;</span>uintptr<span class="br0">&#41;</span>ks<span class="sy0">-&gt;</span>cproc<span class="sy0">-&gt;</span>vmm.<span class="me1">table</span><span class="sy0">,</span> <span class="sy0">&amp;</span>page<span class="br0">&#41;</span><span class="sy0">;</span>
	arm4_tlbset1<span class="br0">&#40;</span>page<span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="coMULTI">/* 
		Invalidate all unlocked entries...
&#160;
		..according to the manual there may be a better way to invalidate,
		only some entries per process. But, for now this should work.
&#160;
		If you do not do this then the TLB does not flush and old entries
		from the previous process will still be in the TLB cache.
	*/</span>
	asm<span class="br0">&#40;</span><span class="st0">&quot;mcr p15, #0, r0, c8, c7, #0&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
	<span class="co1">//kprintf(&quot;SWITCH-TO thread:%x cpsr:%x fp:%x sp:%x pc:%x\n&quot;, kt, kt-&gt;cpsr, kt-&gt;r11, kt-&gt;sp, kt-&gt;pc);</span>
&#160;
	<span class="kw4">uint32</span>			<span class="sy0">*</span>p<span class="sy0">;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>kvmm2_getphy<span class="br0">&#40;</span><span class="sy0">&amp;</span>ks<span class="sy0">-&gt;</span>cproc<span class="sy0">-&gt;</span>vmm<span class="sy0">,</span> <span class="nu12">0x90000000</span><span class="sy0">,</span> <span class="br0">&#40;</span>uintptr<span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>p<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="co1">//kprintf(&quot;NO STACK EXISTS??\n&quot;);</span>
	<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="br0">&#123;</span>
		<span class="co1">//kprintf(&quot;writing to stack..%x\n&quot;, kt-&gt;sp);</span>
		<span class="co1">//((uint32*)kt-&gt;sp)[-1] = 0xbb;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span>kvmm2_getphy<span class="br0">&#40;</span><span class="sy0">&amp;</span>ks<span class="sy0">-&gt;</span>cproc<span class="sy0">-&gt;</span>vmm<span class="sy0">,</span> <span class="nu12">0x80000000</span><span class="sy0">,</span> <span class="br0">&#40;</span>uintptr<span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>p<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="kw4">uint32</span>			x<span class="sy0">;</span>
&#160;
		<span class="co1">//kprintf(&quot;CODE PAGE&#160;:%x\n&quot;, p);</span>
&#160;
		p <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="nu12">0x80000000</span><span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
		<span class="co1">//((uint32*)KSTACKEXC)[-1] = 0x80000800;</span>
&#160;
		<span class="co1">//for (x = 0; x &lt; 1024; ++x) {</span>
		<span class="co1">//	p[x] = 0xeafffffe;</span>
		<span class="co1">//}</span>
&#160;
	<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="br0">&#123;</span>
		<span class="co1">//kprintf(&quot;CODE PAGE????\n&quot;);</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>Here we have the basic save thread state and load thread state blocks. These possibly could be implemented in a much faster way, but I choose to avoid premature optimization for the sake of being straight forward. In the middle between the save and load state blocks you have the code to choose the next thread. In it's simplest form it simply grabs the next thread in the current process, and if no thread left it grabs the next process and the first thread. It continues this until it has a thread to run. In the form above it does the exact same except it checks if the thread is sleeping, then it checks the <i>timeout</i> (minimum time to sleep for) and if it is expired it sets the thread as awake and runs it. It also checks if any signal has been asserted to the thread and if so (and only if) then the thread is woken if it is sleeping. You might be wondering why I remove the wake signal (bit) only if the thread is sleeping. This has to do with my future design of the IPC for the system.
</p><p><br />
</p>
<h3> <span class="mw-headline" id="Added_Idle_Thread_And_Kernel_Thread"> Added Idle Thread And Kernel Thread </span></h3>
<p>I added an <i>idle</i> thread that does nothing but yield, and a kernel work thread. The idle thread keeps the scheduler with something to switch too when no other threads are running (supposed to be), but in reality in the current code it just switches to it and it yields. Needs some improvement, but it is simple for now.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">int</span> ksleep<span class="br0">&#40;</span><span class="kw4">uint32</span> timeout<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">int</span>			result<span class="sy0">;</span>
&#160;
	asm<span class="br0">&#40;</span><span class="st0">&quot;	mov r0,&#160;%[in] <span class="es1">\n</span><span class="es1">\
</span>			swi #101 <span class="es1">\n</span><span class="es1">\
</span>			mov&#160;%[result], r0 <span class="es1">\n</span><span class="es1">\
</span>		&quot;</span> <span class="sy0">:</span> <span class="br0">&#91;</span>result<span class="br0">&#93;</span><span class="st0">&quot;=r&quot;</span> <span class="br0">&#40;</span>result<span class="br0">&#41;</span> <span class="sy0">:</span> <span class="br0">&#91;</span>in<span class="br0">&#93;</span><span class="st0">&quot;r&quot;</span> <span class="br0">&#40;</span>timeout<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="coMULTI">/* convert from ticks */</span>
	<span class="kw1">return</span> result<span class="sy0">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> kthread<span class="br0">&#40;</span>KTHREAD <span class="sy0">*</span>th<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">uint32</span>			x<span class="sy0">;</span>
&#160;
	<span class="kw1">for</span> <span class="br0">&#40;</span><span class="sy0">;;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		ksleep<span class="br0">&#40;</span><span class="nu12">0xffff</span><span class="br0">&#41;</span><span class="sy0">;</span>
		kserdbg_putc<span class="br0">&#40;</span><span class="st0">'$'</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> kidle<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw1">for</span> <span class="br0">&#40;</span><span class="sy0">;;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		asm<span class="br0">&#40;</span><span class="st0">&quot;swi #102&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
The <span class="st0">''</span>kidle<span class="st0">''</span> immediantly yields. <span class="me1">The</span> scheduler could be coded differently where it only executes the <span class="st0">''</span>kidle<span class="st0">''</span> <span class="kw1">if</span> there are no other threads to run<span class="sy0">,</span> but I decided to keep it simple at this stage.</pre></div></div>
<h3> <span class="mw-headline" id="Creation_Of_Kernel_And_Idle_Thread"> Creation Of Kernel And Idle Thread </span></h3>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1">        .... <span class="me1">in</span> main ....
	<span class="me1">process</span> <span class="sy0">=</span> <span class="br0">&#40;</span>KPROCESS<span class="sy0">*</span><span class="br0">&#41;</span>kmalloc<span class="br0">&#40;</span><span class="kw4">sizeof</span><span class="br0">&#40;</span>KPROCESS<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="kw3">memset</span><span class="br0">&#40;</span>process<span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="kw4">sizeof</span><span class="br0">&#40;</span>KPROCESS<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	kvmm2_init<span class="br0">&#40;</span><span class="sy0">&amp;</span>process<span class="sy0">-&gt;</span>vmm<span class="br0">&#41;</span><span class="sy0">;</span>
	ll_add<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="sy0">**</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>ks<span class="sy0">-&gt;</span>procs<span class="sy0">,</span> process<span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
	th <span class="sy0">=</span> <span class="br0">&#40;</span>KTHREAD<span class="sy0">*</span><span class="br0">&#41;</span>kmalloc<span class="br0">&#40;</span><span class="kw4">sizeof</span><span class="br0">&#40;</span>KTHREAD<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="kw3">memset</span><span class="br0">&#40;</span>th<span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="kw4">sizeof</span><span class="br0">&#40;</span>KTHREAD<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	ll_add<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="sy0">**</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>process<span class="sy0">-&gt;</span>threads<span class="sy0">,</span> th<span class="br0">&#41;</span><span class="sy0">;</span>
	th<span class="sy0">-&gt;</span>pc <span class="sy0">=</span> <span class="br0">&#40;</span>uintptr<span class="br0">&#41;</span><span class="sy0">&amp;</span>kthread<span class="sy0">;</span>
	th<span class="sy0">-&gt;</span>flags <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
	th<span class="sy0">-&gt;</span>cpsr <span class="sy0">=</span> <span class="nu12">0x60000000</span> <span class="sy0">|</span> ARM4_MODE_SYS<span class="sy0">;</span>
	<span class="coMULTI">/* set stack */</span>
	th<span class="sy0">-&gt;</span>sp <span class="sy0">=</span> <span class="br0">&#40;</span>uintptr<span class="br0">&#41;</span>kmalloc<span class="br0">&#40;</span><span class="nu0">1024</span> <span class="sy0">*</span> <span class="nu0">2</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="nu0">1024</span> <span class="sy0">*</span> <span class="nu0">2</span> <span class="sy0">-</span> <span class="nu0">8</span><span class="sy0">;</span>
	th<span class="sy0">-&gt;</span>r0 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">uint32</span><span class="br0">&#41;</span>th<span class="sy0">;</span>
&#160;
	th <span class="sy0">=</span> <span class="br0">&#40;</span>KTHREAD<span class="sy0">*</span><span class="br0">&#41;</span>kmalloc<span class="br0">&#40;</span><span class="kw4">sizeof</span><span class="br0">&#40;</span>KTHREAD<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="kw3">memset</span><span class="br0">&#40;</span>th<span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="kw4">sizeof</span><span class="br0">&#40;</span>KTHREAD<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	ll_add<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="sy0">**</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>process<span class="sy0">-&gt;</span>threads<span class="sy0">,</span> th<span class="br0">&#41;</span><span class="sy0">;</span>
	th<span class="sy0">-&gt;</span>pc <span class="sy0">=</span> <span class="br0">&#40;</span>uintptr<span class="br0">&#41;</span><span class="sy0">&amp;</span>kidle<span class="sy0">;</span>
	th<span class="sy0">-&gt;</span>flags <span class="sy0">=</span> KTHREAD_KIDLE<span class="sy0">;</span>
	th<span class="sy0">-&gt;</span>cpsr <span class="sy0">=</span> <span class="nu12">0x60000000</span> <span class="sy0">|</span> ARM4_MODE_SYS<span class="sy0">;</span>
	<span class="coMULTI">/* set stack (dont need anything big for idle thread at the moment) */</span>
	th<span class="sy0">-&gt;</span>sp <span class="sy0">=</span> <span class="br0">&#40;</span>uintptr<span class="br0">&#41;</span>kmalloc<span class="br0">&#40;</span><span class="nu0">128</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="nu0">128</span> <span class="sy0">-</span> <span class="nu0">8</span><span class="sy0">;</span>
	th<span class="sy0">-&gt;</span>r0 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">uint32</span><span class="br0">&#41;</span>th<span class="sy0">;</span>
	ks<span class="sy0">-&gt;</span>idleth <span class="sy0">=</span> th<span class="sy0">;</span>
	ks<span class="sy0">-&gt;</span>idleproc <span class="sy0">=</span> process<span class="sy0">;</span>
        ....</pre></div></div>
<p>Here both the kernel thread and <i>idle</i> thread are created under the same process. You could have created a separate process if you like.
</p>
<h3> <span class="mw-headline" id="New_Exception_Handlers"> New Exception Handlers </span></h3>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">void</span> k_exphandler<span class="br0">&#40;</span><span class="kw4">uint32</span> lr<span class="sy0">,</span> <span class="kw4">uint32</span> type<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">uint32</span>			<span class="sy0">*</span>t0mmio<span class="sy0">;</span>
	<span class="kw4">uint32</span>			<span class="sy0">*</span>picmmio<span class="sy0">;</span>
	<span class="kw4">uint32</span>			swi<span class="sy0">;</span>
	KSTATE			<span class="sy0">*</span>ks<span class="sy0">;</span>
	<span class="kw4">int</span>				x<span class="sy0">;</span>
	KTHREAD			<span class="sy0">*</span>kt<span class="sy0">;</span>
	uintptr			out<span class="sy0">;</span>
	<span class="kw4">uint32</span>			r0<span class="sy0">,</span> r1<span class="sy0">;</span>
	KPROCESS		<span class="sy0">*</span>proc<span class="sy0">;</span>
	KTHREAD			<span class="sy0">*</span>th<span class="sy0">;</span>
&#160;
	ks <span class="sy0">=</span> <span class="br0">&#40;</span>KSTATE<span class="sy0">*</span><span class="br0">&#41;</span>KSTATEADDR<span class="sy0">;</span>
&#160;
	<span class="co1">//kserdbg_putc('H');</span>
	<span class="co1">//kserdbg_putc('\n');</span>
&#160;
	<span class="coMULTI">/*  clear interrupt in timer so it will lower its INT line
&#160;
		if you do not clear it, an interrupt will
		be immediantly raised apon return from this
		interrupt
	*/</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span>type <span class="sy0">==</span> ARM4_XRQ_IRQ<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		picmmio <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span><span class="nu12">0x14000000</span><span class="sy0">;</span>
&#160;
		<span class="co1">//kprintf(&quot;picmmio[PIC_IRQ_STATUS]:%x\n&quot;, picmmio[PIC_IRQ_STATUS]);</span>
		<span class="coMULTI">/*
			It is possible that other pins are activated so we just check
			this one bit.
&#160;
			1 &lt;&lt; 4
		*/</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span>picmmio<span class="br0">&#91;</span>PIC_IRQ_STATUS<span class="br0">&#93;</span> <span class="sy0">&amp;</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">&lt;&lt;</span><span class="nu0">6</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
			t0mmio <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span><span class="nu12">0x13000100</span><span class="sy0">;</span>
			t0mmio<span class="br0">&#91;</span>REG_INTCLR<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>			<span class="coMULTI">/* according to the docs u can write any value */</span>
&#160;
			<span class="co1">//kprintf(&quot;t0mmio[REG_BGLOAD]:%x ks-&gt;ctime:%x\n&quot;, t0mmio[REG_BGLOAD], ks-&gt;ctime);</span>
			ks<span class="sy0">-&gt;</span><span class="kw3">ctime</span> <span class="sy0">+=</span> t0mmio<span class="br0">&#91;</span>REG_BGLOAD<span class="br0">&#93;</span><span class="sy0">;</span>
&#160;
			ksched<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="co1">//kprintf(&quot;time:%x\n&quot;, t0mmio[REG_VALUE]);</span>
			<span class="coMULTI">/* go back through normal interrupt return process */</span>
			<span class="kw1">return</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="coMULTI">/*
		Get SWI argument (index).
	*/</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>type <span class="sy0">==</span> ARM4_XRQ_SWINT<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		swi <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>uintptr<span class="br0">&#41;</span>lr <span class="sy0">-</span> <span class="nu0">4</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">&amp;</span> <span class="nu12">0xffff</span><span class="sy0">;</span>
&#160;
		<span class="co1">//kprintf(&quot;SWI thread:%x code:%x\n&quot;, ks-&gt;cthread, swi);</span>
&#160;
		<span class="co1">//((uint32*)KSTACKEXC)[-14] = R0;</span>
		<span class="co1">//((uint32*)KSTACKEXC)[-13] = R1;</span>
&#160;
		<span class="kw1">switch</span> <span class="br0">&#40;</span>swi<span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="kw1">case</span> KSWI_WAKEUP<span class="sy0">:</span>
				<span class="coMULTI">/* wake up thread function */</span>
				r0 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">14</span><span class="br0">&#93;</span><span class="sy0">;</span>
				r1 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">13</span><span class="br0">&#93;</span><span class="sy0">;</span>
				<span class="kw1">for</span> <span class="br0">&#40;</span>proc <span class="sy0">=</span> ks<span class="sy0">-&gt;</span>procs<span class="sy0">;</span> proc<span class="sy0">;</span> proc <span class="sy0">=</span> proc<span class="sy0">-&gt;</span>next<span class="br0">&#41;</span> <span class="br0">&#123;</span>
					<span class="kw1">if</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="br0">&#41;</span>proc <span class="sy0">==</span> r0<span class="br0">&#41;</span> <span class="br0">&#123;</span>
						<span class="kw1">for</span> <span class="br0">&#40;</span>th <span class="sy0">=</span> proc<span class="sy0">-&gt;</span>threads<span class="sy0">;</span> th<span class="sy0">;</span> th <span class="sy0">=</span> th<span class="sy0">-&gt;</span>next<span class="br0">&#41;</span> <span class="br0">&#123;</span>
							<span class="kw1">if</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="br0">&#41;</span>th <span class="sy0">==</span> r1<span class="br0">&#41;</span> <span class="br0">&#123;</span>
								<span class="coMULTI">/* wake up thread */</span>
								th<span class="sy0">-&gt;</span>flags <span class="sy0">|=</span> KTHREAD_WAKEUP<span class="sy0">;</span>
							<span class="br0">&#125;</span>
						<span class="br0">&#125;</span>
					<span class="br0">&#125;</span>
				<span class="br0">&#125;</span>
				<span class="kw2">break</span><span class="sy0">;</span>
			<span class="kw1">case</span> KSWI_GETTICKPERSECOND<span class="sy0">:</span>
				<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">14</span><span class="br0">&#93;</span> <span class="sy0">=</span> ks<span class="sy0">-&gt;</span>tpers<span class="sy0">;</span>
				<span class="kw2">break</span><span class="sy0">;</span>
			<span class="kw1">case</span> KSWI_SLEEP<span class="sy0">:</span>
				<span class="coMULTI">/* thread sleep function */</span>
				r0 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>KSTACKEXC<span class="br0">&#41;</span><span class="br0">&#91;</span><span class="sy0">-</span><span class="nu0">14</span><span class="br0">&#93;</span><span class="sy0">;</span>
&#160;
				<span class="co1">//kprintf(&quot;SLEEPING thread:%x timeout:%x\n&quot;, ks-&gt;cthread, r0);</span>
&#160;
				<span class="kw1">if</span> <span class="br0">&#40;</span>ks<span class="sy0">-&gt;</span>cthread<span class="br0">&#41;</span> <span class="br0">&#123;</span>
					ks<span class="sy0">-&gt;</span>cthread<span class="sy0">-&gt;</span>flags <span class="sy0">|=</span> KTHREAD_SLEEPING<span class="sy0">;</span>
					ks<span class="sy0">-&gt;</span>cthread<span class="sy0">-&gt;</span>timeout <span class="sy0">=</span> r0 <span class="sy0">+</span> ks<span class="sy0">-&gt;</span><span class="kw3">ctime</span><span class="sy0">;</span>
				<span class="br0">&#125;</span>
				ksched<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
				<span class="kw2">break</span><span class="sy0">;</span>
			<span class="kw1">case</span> KSWI_YEILD<span class="sy0">:</span>
				ksched<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
				<span class="kw2">break</span><span class="sy0">;</span>
			<span class="kw1">default</span><span class="sy0">:</span>
				<span class="kw2">break</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
		<span class="kw1">return</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span>type <span class="sy0">!=</span> ARM4_XRQ_IRQ <span class="sy0">&amp;&amp;</span> type <span class="sy0">!=</span> ARM4_XRQ_FIQ <span class="sy0">&amp;&amp;</span> type <span class="sy0">!=</span> ARM4_XRQ_SWINT<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="coMULTI">/*
			Ensure, the exception return code is correctly handling LR with the
			correct offset. I am using the same return for everything except SWI, 
			which requires that LR not be offset before return.
		*/</span>
		KTHREAD			<span class="sy0">*</span>tmp<span class="sy0">;</span>
&#160;
		tmp <span class="sy0">=</span> ks<span class="sy0">-&gt;</span>cthread<span class="sy0">;</span>
&#160;
		kprintf<span class="br0">&#40;</span><span class="st0">&quot;!EXCEPTION<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		kprintf<span class="br0">&#40;</span><span class="st0">&quot;type:%x cproc:%x cthread:%x lr:%x<span class="es1">\n</span>&quot;</span><span class="sy0">,</span> type<span class="sy0">,</span> ks<span class="sy0">-&gt;</span>cproc<span class="sy0">,</span> ks<span class="sy0">-&gt;</span>cthread<span class="sy0">,</span> lr<span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
		ll_rem<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="sy0">**</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>ks<span class="sy0">-&gt;</span>cproc<span class="sy0">-&gt;</span>threads<span class="sy0">,</span> ks<span class="sy0">-&gt;</span>cthread<span class="br0">&#41;</span><span class="sy0">;</span>
		ks<span class="sy0">-&gt;</span>cthread <span class="sy0">=</span> ks<span class="sy0">-&gt;</span>cthread<span class="sy0">-&gt;</span>next<span class="sy0">;</span>
&#160;
		ksched<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
		kdumpthreadinfo<span class="br0">&#40;</span>tmp<span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">return</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>The biggest difference here is the addition of systems call and the termination of a thread when it has an exception. 
</p><p><br />
</p>
<h3> <span class="mw-headline" id="Added_memset"> Added memset </span></h3>
<p>I added a useful utility function <i>memset</i>.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">void</span> <span class="kw3">memset</span><span class="br0">&#40;</span><span class="kw4">void</span> <span class="sy0">*</span>p<span class="sy0">,</span> <span class="kw4">uint8</span> v<span class="sy0">,</span> uintptr sz<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">uint8</span>			<span class="sy0">*</span>_p<span class="sy0">;</span>
	uintptr			x<span class="sy0">;</span>
&#160;
	_p <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">uint8</span><span class="sy0">*</span><span class="br0">&#41;</span>p<span class="sy0">;</span>
&#160;
	<span class="kw1">for</span> <span class="br0">&#40;</span>x <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> x <span class="sy0">&lt;</span> sz<span class="sy0">;</span> <span class="sy0">++</span>x<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		_p<span class="br0">&#91;</span>x<span class="br0">&#93;</span> <span class="sy0">=</span> v<span class="sy0">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div>
<h3> <span class="mw-headline" id="Changes_In_kelfload"> Changes In kelfload </span></h3>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">int</span> kelfload<span class="br0">&#40;</span>KPROCESS <span class="sy0">*</span>proc<span class="sy0">,</span> uintptr addr<span class="sy0">,</span> uintptr sz<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	ELF32_EHDR			<span class="sy0">*</span>ehdr<span class="sy0">;</span>
	ELF32_SHDR			<span class="sy0">*</span>shdr<span class="sy0">;</span>
	<span class="kw4">uint32</span>				x<span class="sy0">,</span> y<span class="sy0">;</span>
	uintptr				page<span class="sy0">,</span> oldpage<span class="sy0">;</span>
	KSTATE				<span class="sy0">*</span>ks<span class="sy0">;</span>
	<span class="kw4">uint8</span>				<span class="sy0">*</span>fb<span class="sy0">;</span>
	KTHREAD				<span class="sy0">*</span>th<span class="sy0">;</span>
&#160;
	kprintf<span class="br0">&#40;</span><span class="st0">&quot;loading elf into memory space<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
	ks <span class="sy0">=</span> <span class="br0">&#40;</span>KSTATE<span class="sy0">*</span><span class="br0">&#41;</span>KSTATEADDR<span class="sy0">;</span>
&#160;
	ehdr <span class="sy0">=</span> <span class="br0">&#40;</span>ELF32_EHDR<span class="sy0">*</span><span class="br0">&#41;</span>addr<span class="sy0">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>ehdr<span class="sy0">-&gt;</span>e_machine <span class="sy0">!=</span> EM_ARM<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		kprintf<span class="br0">&#40;</span><span class="st0">&quot;kelfload: not ARM machine!<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span>ehdr<span class="sy0">-&gt;</span>e_ident<span class="br0">&#91;</span><span class="nu0">4</span><span class="br0">&#93;</span> <span class="sy0">!=</span> <span class="nu12">0x1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		kprintf<span class="br0">&#40;</span><span class="st0">&quot;kelfload: not ELF32 object<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>proc<span class="sy0">-&gt;</span>vmm.<span class="me1">table</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		kvmm2_init<span class="br0">&#40;</span><span class="sy0">&amp;</span>proc<span class="sy0">-&gt;</span>vmm<span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
&#160;
	th <span class="sy0">=</span> <span class="br0">&#40;</span>KTHREAD<span class="sy0">*</span><span class="br0">&#41;</span>kmalloc<span class="br0">&#40;</span><span class="kw4">sizeof</span><span class="br0">&#40;</span>KTHREAD<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="kw3">memset</span><span class="br0">&#40;</span>th<span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="kw4">sizeof</span><span class="br0">&#40;</span>KTHREAD<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
	ll_add<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="sy0">**</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>proc<span class="sy0">-&gt;</span>threads<span class="sy0">,</span> th<span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
	th<span class="sy0">-&gt;</span>pc <span class="sy0">=</span> ehdr<span class="sy0">-&gt;</span>e_entry<span class="sy0">;</span>
	th<span class="sy0">-&gt;</span>flags <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
	th<span class="sy0">-&gt;</span>cpsr <span class="sy0">=</span> <span class="nu12">0x60000000</span> <span class="sy0">|</span> ARM4_MODE_USER<span class="sy0">;</span>
	<span class="coMULTI">/* set stack */</span>
	th<span class="sy0">-&gt;</span>sp <span class="sy0">=</span> <span class="nu12">0x90001000</span><span class="sy0">;</span>
	<span class="coMULTI">/* pass address of serial output as first argument */</span>
	th<span class="sy0">-&gt;</span>r0 <span class="sy0">=</span> <span class="nu12">0xa0000000</span><span class="sy0">;</span>
	<span class="coMULTI">/* map serial output mmio */</span>
	kvmm2_mapsingle<span class="br0">&#40;</span><span class="sy0">&amp;</span>proc<span class="sy0">-&gt;</span>vmm<span class="sy0">,</span> <span class="nu12">0xa0000000</span><span class="sy0">,</span> <span class="nu12">0x16000000</span><span class="sy0">,</span> TLB_C_AP_FULLACCESS<span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="coMULTI">/* map stack page (4K) */</span>
	kvmm2_allocregionat<span class="br0">&#40;</span><span class="sy0">&amp;</span>proc<span class="sy0">-&gt;</span>vmm<span class="sy0">,</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="nu12">0x90000000</span><span class="sy0">,</span> TLB_C_AP_FULLACCESS<span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
	<span class="coMULTI">/* map address space so we can work directly with it */</span>
	kvmm2_getphy<span class="br0">&#40;</span><span class="sy0">&amp;</span>ks<span class="sy0">-&gt;</span>vmm<span class="sy0">,</span> <span class="br0">&#40;</span>uintptr<span class="br0">&#41;</span>proc<span class="sy0">-&gt;</span>vmm.<span class="me1">table</span><span class="sy0">,</span> <span class="sy0">&amp;</span>page<span class="br0">&#41;</span><span class="sy0">;</span>
	oldpage <span class="sy0">=</span> arm4_tlbget1<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	arm4_tlbset1<span class="br0">&#40;</span>page<span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="coMULTI">/* flush the TLB */</span>
	asm<span class="br0">&#40;</span><span class="st0">&quot;mcr p15, #0, r0, c8, c7, #0&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
	<span class="co1">// e_shoff - section table offset</span>
	<span class="co1">// e_shentsize - size of each section entry</span>
	<span class="co1">// e_shnum - count of entries in table</span>
	<span class="kw1">for</span> <span class="br0">&#40;</span>x <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> x <span class="sy0">&lt;</span> ehdr<span class="sy0">-&gt;</span>e_shnum<span class="sy0">;</span> <span class="sy0">++</span>x<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		shdr <span class="sy0">=</span> <span class="br0">&#40;</span>ELF32_SHDR<span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span>addr <span class="sy0">+</span> ehdr<span class="sy0">-&gt;</span>e_shoff <span class="sy0">+</span> x <span class="sy0">*</span> ehdr<span class="sy0">-&gt;</span>e_shentsize<span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span>shdr<span class="sy0">-&gt;</span>sh_addr <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="coMULTI">/* load this into memory */</span>
			<span class="co1">// sh_offset - byte offset in module</span>
			<span class="co1">// sh_size - size of section in module </span>
			<span class="co1">// sh_addr - address to load at</span>
			kvmm2_allocregionat<span class="br0">&#40;</span><span class="sy0">&amp;</span>proc<span class="sy0">-&gt;</span>vmm<span class="sy0">,</span> kvmm2_rndup<span class="br0">&#40;</span>shdr<span class="sy0">-&gt;</span>sh_size<span class="br0">&#41;</span><span class="sy0">,</span> shdr<span class="sy0">-&gt;</span>sh_addr<span class="sy0">,</span> TLB_C_AP_FULLACCESS<span class="br0">&#41;</span><span class="sy0">;</span>
			fb <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">uint8</span><span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span>addr <span class="sy0">+</span> shdr<span class="sy0">-&gt;</span>sh_offset<span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="coMULTI">/* copy */</span>
			<span class="kw1">for</span> <span class="br0">&#40;</span>y <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> y <span class="sy0">&lt;</span> shdr<span class="sy0">-&gt;</span>sh_size<span class="sy0">;</span> <span class="sy0">++</span>y<span class="br0">&#41;</span> <span class="br0">&#123;</span>
				<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint8</span><span class="sy0">*</span><span class="br0">&#41;</span>shdr<span class="sy0">-&gt;</span>sh_addr<span class="br0">&#41;</span><span class="br0">&#91;</span>y<span class="br0">&#93;</span> <span class="sy0">=</span> fb<span class="br0">&#91;</span>y<span class="br0">&#93;</span><span class="sy0">;</span>
			<span class="br0">&#125;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="coMULTI">/* restore previous address space */</span>
 	arm4_tlbset1<span class="br0">&#40;</span>oldpage<span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="coMULTI">/* flush the TLB */</span>
        asm<span class="br0">&#40;</span><span class="st0">&quot;mcr p15, #0, r0, c8, c7, #0&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>Here we simple allocate memory for the sections and then copy them into memory. I switch address spaces and flush the TLB to make this easier to perform. It could be faster just to map the memory into kernel space and copy to it in certain situations, but I decided that this method was the simplest. 
</p>
<h3> <span class="mw-headline" id="Changed_To_Creation_Of_Process_From_Modules"> Changed To Creation Of Process From Modules </span></h3>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1">        .... 
	<span class="co2">#define KMODTYPE_ELFUSER			1</span>
	<span class="coMULTI">/*
		create a task for any attached modules of the correct type
	*/</span>
	kprintf<span class="br0">&#40;</span><span class="st0">&quot;looking at attached modules<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="kw1">for</span> <span class="br0">&#40;</span>m <span class="sy0">=</span> kPkgGetFirstMod<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> m<span class="sy0">;</span> m <span class="sy0">=</span> kPkgGetNextMod<span class="br0">&#40;</span>m<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		kprintf<span class="br0">&#40;</span><span class="st0">&quot;looking at module<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span>m<span class="sy0">-&gt;</span>type <span class="sy0">==</span> KMODTYPE_ELFUSER<span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="coMULTI">/* create new process */</span>
			process <span class="sy0">=</span> <span class="br0">&#40;</span>KPROCESS<span class="sy0">*</span><span class="br0">&#41;</span>kmalloc<span class="br0">&#40;</span><span class="kw4">sizeof</span><span class="br0">&#40;</span>KPROCESS<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="kw3">memset</span><span class="br0">&#40;</span>process<span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="kw4">sizeof</span><span class="br0">&#40;</span>KPROCESS<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
			ll_add<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="sy0">**</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>ks<span class="sy0">-&gt;</span>procs<span class="sy0">,</span> process<span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="coMULTI">/* will create thread in process */</span>
			kelfload<span class="br0">&#40;</span>process<span class="sy0">,</span> <span class="br0">&#40;</span>uintptr<span class="br0">&#41;</span><span class="sy0">&amp;</span>m<span class="sy0">-&gt;</span>slot<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="sy0">,</span> m<span class="sy0">-&gt;</span>size<span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
        .....</pre></div></div>
<p>I simply changed from creating of a task to the creation of a process, and <i>kelfload</i> was changed to create a thread of the passed process instead of a task.
</p>
<h3> <span class="mw-headline" id="SWI_Exception_Entry_And_Exit_Changed"> SWI Exception Entry And Exit Changed </span></h3>
<p>These were changed to push <i>SPSR</i> so it can be saved and restored easily from inside
our new <i>sched()</i> function.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#define KEXP_TOPSWI \
	uint32			lr; \
	asm(&quot;mov sp,&#160;%[ps]&quot;&#160;:&#160;: [ps]&quot;i&quot; (KSTACKEXC)); \
	asm(&quot;push {lr}&quot;); \
	asm(&quot;push {r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12}&quot;); \
	asm(&quot;mrs r0, spsr&quot;); \
	asm(&quot;push {r0}&quot;); \
	asm(&quot;mov&#160;%[ps], lr&quot;&#160;: [ps]&quot;=r&quot; (lr));	</span>
&#160;
<span class="co2">#define KEXP_BOTSWI \
	asm(&quot;pop {r0}&quot;); \
	asm(&quot;msr spsr, r0&quot;); \
	asm(&quot;pop {r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12}&quot;); \
	asm(&quot;LDM sp!, {pc}^&quot;)</span></pre></div></div>
<p>The <i>SWI</i> entry and exit assembly now saves everything the same way as the other exception handlers allowing the scheduler to be called to save the current thread and load the next meaning system calls can switch threads for <i>sleep</i> and <i>yield</i>.
</p>
<h3> <span class="mw-headline" id="Added_System_Call_Numbers"> Added System Call Numbers </span></h3>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#define KSWI_WAKEUP				100</span>
<span class="co2">#define KSWI_SLEEP				101</span>
<span class="co2">#define KSWI_YEILD				102</span>
<span class="co2">#define KSWI_GETTICKPERSECOND	103</span></pre></div></div>
<h3> <span class="mw-headline" id="New_KPROCESS_And_Updated_KTHREAD"> New KPROCESS And Updated KTHREAD </span></h3>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> _KTHREAD <span class="br0">&#123;</span>
	<span class="kw4">struct</span> _KTHREAD		<span class="sy0">*</span>next<span class="sy0">;</span>
	<span class="kw4">struct</span> _KTHREAD		<span class="sy0">*</span>prev<span class="sy0">;</span>
&#160;
	<span class="kw4">uint64</span>				timeout<span class="sy0">;</span>			<span class="coMULTI">/* when to wakeup */</span>
	<span class="kw4">uint8</span>				flags<span class="sy0">;</span>
	<span class="kw4">uint32</span>				r0<span class="sy0">,</span> r1<span class="sy0">,</span> r2<span class="sy0">,</span> r3<span class="sy0">,</span> r4<span class="sy0">,</span> r5<span class="sy0">,</span> r6<span class="sy0">,</span> r7<span class="sy0">,</span> r8<span class="sy0">,</span> r9<span class="sy0">,</span> r10<span class="sy0">,</span> r11<span class="sy0">,</span> r12<span class="sy0">,</span> sp<span class="sy0">,</span> lr<span class="sy0">,</span> cpsr<span class="sy0">,</span> pc<span class="sy0">;</span>
<span class="br0">&#125;</span> KTHREAD<span class="sy0">;</span>
&#160;
<span class="kw4">typedef</span> <span class="kw4">struct</span> _KPROCESS <span class="br0">&#123;</span>
	<span class="kw4">struct</span> _KPROCESS	<span class="sy0">*</span>next<span class="sy0">;</span>
	<span class="kw4">struct</span> _KPROCESS	<span class="sy0">*</span>prev<span class="sy0">;</span>
&#160;
	KVMMTABLE			vmm<span class="sy0">;</span>
	KTHREAD				<span class="sy0">*</span>threads<span class="sy0">;</span>
<span class="br0">&#125;</span> KPROCESS<span class="sy0">;</span></pre></div></div>
<p>The <i>KTHREAD</i> was updated with linked list fields added, <i>timeout</i>, and <i>flags</i>. The <i>KPROCESS</i> is new and was added to provide a process like structure to tasking. The <i>vmm</i> field was moved from the thread structure to the process structure since all threads share the same
address space.
</p>
<h3> <span class="mw-headline" id="Changes_To_KSTATE"> Changes To KSTATE </span></h3>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"> <span class="kw4">typedef</span> <span class="kw4">struct</span> _KSTATE <span class="br0">&#123;</span>
<span class="sy0">-</span>	<span class="coMULTI">/* process/thread support */</span>
<span class="sy0">-</span>	KTHREAD			threads<span class="br0">&#91;</span><span class="nu12">0x10</span><span class="br0">&#93;</span><span class="sy0">;</span>
<span class="sy0">-</span>	<span class="kw4">uint8</span>			threadndx<span class="sy0">;</span>	
<span class="sy0">-</span>	<span class="kw4">uint8</span>			iswitch<span class="sy0">;</span>
<span class="sy0">-</span>	
 	<span class="coMULTI">/* new process/thread support */</span>
<span class="sy0">+</span>	KPROCESS		<span class="sy0">*</span>procs<span class="sy0">;</span>
<span class="sy0">+</span>	KPROCESS		<span class="sy0">*</span>cproc<span class="sy0">;</span>
<span class="sy0">+</span>	KTHREAD			<span class="sy0">*</span>cthread<span class="sy0">;</span>
&#160;
 	<span class="coMULTI">/* physical and heap memory management */</span>
 	KHEAPBM			hphy<span class="sy0">;</span>			<span class="coMULTI">/* kernel physical page heap */</span>
 	KHEAPBM			hchk<span class="sy0">;</span>			<span class="coMULTI">/* data chunk heap */</span>
&#160;
<span class="sy0">+</span>	<span class="coMULTI">/* time management */</span>
<span class="sy0">+</span> 	<span class="kw4">uint64</span>			<span class="kw3">ctime</span><span class="sy0">;</span>
<span class="sy0">+</span>	<span class="kw4">uint32</span>			tpers<span class="sy0">;</span>			<span class="coMULTI">/* ticks per second */</span>
<span class="sy0">+</span>	
 	<span class="coMULTI">/* virtual memory management */</span>
 	KVMMTABLE		vmm<span class="sy0">;</span>			<span class="coMULTI">/* kernel virtual memory map */</span>
 	<span class="kw4">uint32</span>			vmm_ucte<span class="sy0">;</span>		<span class="coMULTI">/* unused coarse table entries */</span></pre></div></div>
<p>The old thread/task structures removed and the new field added. A pointer to the first process entry (linked list) was added, and a pointer to the current process and thread.
</p>
<h3> <span class="mw-headline" id="Second_Module_Added"> Second Module Added </span></h3>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">int</span> _start<span class="br0">&#40;</span><span class="kw4">unsigned</span> <span class="kw4">int</span> <span class="sy0">*</span>smmio<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">int</span>		x<span class="sy0">;</span>
	<span class="kw4">int</span>		y<span class="sy0">;</span>
&#160;
	<span class="kw1">for</span><span class="br0">&#40;</span><span class="sy0">;;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
	<span class="kw1">for</span> <span class="br0">&#40;</span><span class="sy0">;;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="kw1">for</span> <span class="br0">&#40;</span>x <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> x <span class="sy0">&lt;</span> <span class="nu12">0xfffff</span><span class="sy0">;</span> <span class="sy0">++</span>x<span class="br0">&#41;</span><span class="sy0">;</span>
		smmio<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st0">'A'</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div>
<h3> <span class="mw-headline" id="First_Module"> First Module </span></h3>
<p>This module demonstrates going to sleep.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">unsigned</span> <span class="kw4">int</span> getTicksPerSecond<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">unsigned</span> <span class="kw4">int</span>			out<span class="sy0">;</span>
	asm<span class="br0">&#40;</span><span class="st0">&quot;	swi #103 <span class="es1">\n</span><span class="es1">\
</span>			mov&#160;%[out], r0 <span class="es1">\n</span><span class="es1">\
</span>		&quot;</span> <span class="sy0">:</span> <span class="br0">&#91;</span>out<span class="br0">&#93;</span><span class="st0">&quot;=r&quot;</span> <span class="br0">&#40;</span>out<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="kw1">return</span> out<span class="sy0">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> sleep<span class="br0">&#40;</span><span class="kw4">unsigned</span> <span class="kw4">int</span> timeout<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	asm<span class="br0">&#40;</span><span class="st0">&quot;	mov r0,&#160;%[in] <span class="es1">\n</span><span class="es1">\
</span>			swi #101 <span class="es1">\n</span><span class="es1">\
</span>		&quot;</span> <span class="sy0">:</span> <span class="sy0">:</span> <span class="br0">&#91;</span>in<span class="br0">&#93;</span><span class="st0">&quot;r&quot;</span> <span class="br0">&#40;</span>timeout<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">int</span> _start<span class="br0">&#40;</span><span class="kw4">unsigned</span> <span class="kw4">int</span> <span class="sy0">*</span>smmio<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">int</span>				x<span class="sy0">;</span>
	<span class="kw4">int</span>				y<span class="sy0">;</span>
	<span class="kw4">unsigned</span> <span class="kw4">int</span>	tps<span class="sy0">;</span>
&#160;
	tps <span class="sy0">=</span> getTicksPerSecond<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
	<span class="kw1">for</span> <span class="br0">&#40;</span><span class="sy0">;;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		smmio<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st0">'G'</span><span class="sy0">;</span>
		smmio<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st0">'K'</span><span class="sy0">;</span>
		sleep<span class="br0">&#40;</span>tps<span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>This module demonstrates going to sleep instead of busy looping which wastes CPU that could be used for another thread.
</p>
<h3> <span class="mw-headline" id="Change_In_Timer_Initialization"> Change In Timer Initialization </span></h3>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1">	t0mmio <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span><span class="nu12">0x13000100</span><span class="sy0">;</span>
	t0mmio<span class="br0">&#91;</span>REG_LOAD<span class="br0">&#93;</span> <span class="sy0">=</span> KTASKTICKS<span class="sy0">;</span>
	t0mmio<span class="br0">&#91;</span>REG_BGLOAD<span class="br0">&#93;</span> <span class="sy0">=</span> KTASKTICKS<span class="sy0">;</span>			
	t0mmio<span class="br0">&#91;</span>REG_CTRL<span class="br0">&#93;</span> <span class="sy0">=</span> CTRL_ENABLE <span class="sy0">|</span> CTRL_MODE_PERIODIC <span class="sy0">|</span> CTRL_SIZE_32 <span class="sy0">|</span> CTRL_DIV_NONE <span class="sy0">|</span> CTRL_INT_ENABLE<span class="sy0">;</span>
	t0mmio<span class="br0">&#91;</span>REG_INTCLR<span class="br0">&#93;</span> <span class="sy0">=</span> ~<span class="nu0">0</span><span class="sy0">;</span>		<span class="coMULTI">/* make sure interrupt is clear (might not be mandatory) */</span>
	ks<span class="sy0">-&gt;</span>tpers <span class="sy0">=</span> <span class="nu0">1000000</span><span class="sy0">;</span></pre></div></div>
<p>We now use <i>KTASKTICKS</i> and initialize <i>ks-&gt;tpers</i> which is read by threads using a software interrupts (<i>see exphandler</i>). This allows them to adjust their ticks for the sleep call to sleep for a certain amount of actual real time (<i>see exphandler</i> SWI handler).
</p><p>I also switched to using a 1MHZ timer just because I have not yet figured out how to detect the system clock speed. I have a few ideas but I am currently working on more important things, but it might be a good exercise for the reader to try to do this. The board may allow you to determine the system clock speed. Also, an idea is to use the 1MHZ timer to estimate the system clock synchronized timer 0. This might yield a different value on different systems depending on how the system clock timer is implemented in QEMU, but on real hardware it should always be the same.
</p>
<!-- 
NewPP limit report
Preprocessor node count: 233/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3503-0!*!0!!en!*!* and timestamp 20180121072419 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=ARM_Integrator-CP_ITPTMME_Phase2&amp;oldid=16088">http://wiki.osdev.org/index.php?title=ARM_Integrator-CP_ITPTMME_Phase2&amp;oldid=16088</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id='catlinks' class='catlinks catlinks-allhidden'></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=ARM_Integrator-CP_ITPTMME_Phase2" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="ARM_Integrator-CP_ITPTMME_Phase2"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk" class="new"><span><a href="http://wiki.osdev.org/index.php?title=Talk:ARM_Integrator-CP_ITPTMME_Phase2&amp;action=edit&amp;redlink=1"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="ARM_Integrator-CP_ITPTMME_Phase2#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="ARM_Integrator-CP_ITPTMME_Phase2" >Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=ARM_Integrator-CP_ITPTMME_Phase2&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=ARM_Integrator-CP_ITPTMME_Phase2&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="ARM_Integrator-CP_ITPTMME_Phase2#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="http://wiki.osdev.org/index.php" id="searchform">
		<input type='hidden' name="title" value="Special:Search"/>
				<input type="search" name="search" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput" />		<input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" />		<input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" />			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="/Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="/Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="/OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="/OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="/OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="/Special:WhatLinksHere/ARM_Integrator-CP_ITPTMME_Phase2" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="/Special:RecentChangesLinked/ARM_Integrator-CP_ITPTMME_Phase2" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="/index.php?title=ARM_Integrator-CP_ITPTMME_Phase2&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="/index.php?title=ARM_Integrator-CP_ITPTMME_Phase2&amp;oldid=16088" title="Permanent link to this revision of the page">Permanent link</a></li>
		</uskins/common/images/osdev.png);" href="/Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/ARM_Integrator-CP_ITPTMME_Phase2" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/ARM_Integrator-CP_ITPTMME_Phase2" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=ARM_Integrator-CP_ITPTMME_Phase2&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=ARM_Integrator-CP_ITPTMME_Phase2&amp;oldid=16088" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 12 April 2014, at 08:14.</li>
											<li id="footer-info-viewcount">This page has been accessed 2,531 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.029 secs. -->
	</body>
</html>
