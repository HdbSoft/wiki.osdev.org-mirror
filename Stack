<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>Stack - OSDev Wiki</title>
<meta charset="UTF-8" />
<meta name="generator" content="MediaWiki 1.18.0" />
<link rel="shortcut icon" href="favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "Stack", "wgTitle": "Stack", "wgCurRevisionId": 14620, "wgArticleId": 1704, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["OS theory"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script>
<!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Stack action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">Stack</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="Stack#mw-head">navigation</a>,
					<a href="Stack#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div lang="en" dir="ltr" class="mw-content-ltr"><dl><dd><i>Stack can also refer to the TCP/IP stack in <a href="Category:Networking" title="Category:Networking">Networking</a>. This article discuss the datastructure and stacks used in architectures.</i>
</dd></dl>
<div class="thumb tright"><div class="thumbinner" style="width:182px;"><a href="File:Stack.png" class="image"><img alt="" src="images/thumb/9/9f/Stack.png/180px-Stack.png" width="180" height="135" class="thumbimage" /></a>  <div class="thumbcaption"><div class="magnify"><a href="File:Stack.png" class="internal" title="Enlarge"><img src="skins/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>A normal stack, that grows upwards.</div></div></div>
<p>A <b>stack</b> is a datastructure. You can push and pop elements to and from it respectively. Unlike a <a href="http://wiki.osdev.org/index.php?title=FIFO&amp;action=edit&amp;redlink=1" class="new" title="FIFO (page does not exist)">FIFO</a> (first in, first out) however, the popped elements from a stack are the elements that you pushed last. Because of this, a stack is also termed LIFO (last in, first out) or FILO (first in, last out).
</p><p>In the <a href="Category:X86" title="Category:X86">X86 architecture</a>, and many others, there is one stack used for code execution. It is used to store return pointers, when calling routines, but you can also store temporary data and local variables on it.
</p><p><br />
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Stack#Stack_theory"><span class="tocnumber">1</span> <span class="toctext">Stack theory</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="Stack#Stack_example_on_the_X86_architecture"><span class="tocnumber">1.1</span> <span class="toctext">Stack example on the X86 architecture</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="Stack#Setup_the_stack"><span class="tocnumber">1.2</span> <span class="toctext">Setup the stack</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="Stack#Security"><span class="tocnumber">1.3</span> <span class="toctext">Security</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="Stack#Stack_trace"><span class="tocnumber">2</span> <span class="toctext">Stack trace</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="Stack#Unwinding_the_stack"><span class="tocnumber">3</span> <span class="toctext">Unwinding the stack</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="Stack#See_Also"><span class="tocnumber">4</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-8"><a href="Stack#Articles"><span class="tocnumber">4.1</span> <span class="toctext">Articles</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="Stack#Threads"><span class="tocnumber">4.2</span> <span class="toctext">Threads</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="Stack#External_Links"><span class="tocnumber">4.3</span> <span class="toctext">External Links</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h2> <span class="mw-headline" id="Stack_theory"> Stack theory </span></h2>
<p>Many languages and architectures have a stack at its disposal. When return values are stored on it, the concept of stack frames emerges. A stack is divided into a number of stack frames. Each stack frame contains the local/temporary data for the routine, parameters and a return value to the former routine (the caller).
</p>
<h3> <span class="mw-headline" id="Stack_example_on_the_X86_architecture"> Stack example on the X86 architecture </span></h3>
<p>On the X86 architecture the stack grows downwards. The stack frames have a certain structure regarding the calling convention. The CDECL calling convention is the most widely used. It is most likely used by your compiler. Two registers are used:
</p>
<ul><li> <b><tt>ESP</tt>:</b> Extended Stack Pointer. 32 bit value containing the <i>top of stack</i> address (more accurately the bottom of stack on X86!)
</li><li> <b><tt>EBP</tt>:</b> Extended Base Pointer. 32 bit value defining the current stack frame, when using CDECL calling convention. It points at the current local data. It can also access the routine parameters.
</li></ul>
<p>Take care when implementing your kernel. If you use <a href="Segmentation" title="Segmentation">segmentation</a>, the <tt>DS</tt> segment should be configured to have it's base at the same address as SS does. Otherwise you may run into problems when passing pointers to local variables into functions, because <tt>normal GPRs</tt> can't access the stack the way you might think.
</p><p>Here is an example stack. The elements are 4 byte words in protected mode:
</p>
<pre>Memory address:   Stack elements:

               +----------------------------+
 0x105000      | Parameter 1 for routine 1  | \
               +----------------------------+  |
 0x104FFC      | First callers return addr. |   &gt;  Stack frame 1
               +----------------------------+  |
 0x104FF8      | First callers EBP          | /
               +----------------------------+
 0x104FF4   +-&gt;| Parameter 2 for routine 2  | \  &lt;-- Routine 1's EBP
            |  +----------------------------+  |
 0x104FF0   |  | Parameter 1 for routine 2  |  |
            |  +----------------------------+  |
 0x104FEC   |  | Return address, routine 1  |  |
            |  +----------------------------+  |
 0x104FE8   +--| EBP value for routine 1    |   &gt;  Stack frame 2
               +----------------------------+  |
 0x104FE4   +-&gt;| Local data                 |  | &lt;-- Routine 2's EBP
            |  +----------------------------+  |
 0x104FE0   |  | Local data                 |  |
            |  +----------------------------+  |
 0x104FDC   |  | Local data                 | /
            |  +----------------------------+
 0x104FD8   |  | Parameter 1 for routine 3  | \
            |  +----------------------------+  |
 0x104FD4   |  | Return address, routine 2  |  |
            |  +----------------------------+   &gt;  Stack frame 3
 0x104FD0   +--| EBP value for routine 2    |  |
               +----------------------------+  |
 0x104FCC   +-&gt;| Local data                 | /  &lt;-- Routine 3's EBP
            |  +----------------------------+
 0x104FC8   |  | Return address, routine 3  | \
            |  +----------------------------+  |
 0x104FC4   +--| EBP value for routine 3    |  |
               +----------------------------+   &gt;  Stack frame 4
 0x104FC0      | Local data                 |  | &lt;-- Current EBP
               +----------------------------+  |
 0x104FBC      | Local data                 | /
               +----------------------------+
 0x104FB8      |                            |    &lt;-- Current ESP
                \/\/\/\/\/\/\/\/\/\/\/\/\/\/
</pre>
<p>The CDECL calling convention is described here:
</p>
<dl><dt> Caller's responsibilities
</dt></dl>
<ul><li> Push parameters in reverse order (last parameter pushed first)
</li><li> Perform the call
</li><li> Pop the parameters, use them, or simply increment ESP to remove them (stack clearing)
</li><li> The return value is stored in EAX
</li></ul>
<dl><dt> Callee's responsibilities (callee is the routine being called)
</dt></dl>
<ul><li> Store caller's EBP on the stack
</li><li> Save current ESP in EBP
</li><li> Code, storing local data on the stack
</li><li> For a fast exit load the old ESP from EBP, else pop local data elements
</li><li> Pop the old EBP and return &#8211; store return value in EAX
</li></ul>
<p>It looks like this in assembly (NASM):
</p>
<pre>SECTION .text

caller:
    
   &#160;; ...
    
   &#160;; Caller responsibilities:
    PUSH  3        &#160;; push the parameters in reverse order
    PUSH  2
    CALL  callee   &#160;; perform the call
    ADD   ESP, 8   &#160;; stack cleaning (remove the 2 words)
    
   &#160;; ... Use the return value in EAX ...
    
    
callee:
    
   &#160;; Callee responsibilities:
    PUSH  EBP      &#160;; store caller's EBP
    MOV   EBP, ESP &#160;; save current stack pointer in EBP
    
   &#160;; ... Code, store return value in EAX ...
    
   &#160;; Callee responsibilities:
    MOV   ESP, EBP &#160;; remove an unknown number of local data elements
    POP   EBP      &#160;; restore caller's EBP
    RET            &#160;; return
</pre>
<p>The GCC compiler does all this automatically, but if you have to call C/C++ methods from assembly or reverse, you have to know the convention. Now look at one stack frame (the callee's):
</p>
<pre>+-------------------------+
| Parameter 3             |
+-------------------------+
| Parameter 2             |
+-------------------------+
| Parameter 1             |
+-------------------------+
| Caller's return address |
+-------------------------+
| Caller's EBP value      |
+-------------------------+
| Local variable          | &lt;-- Current EBP
+-------------------------+
| Local variable          |
+-------------------------+
| Local variable          |
+-------------------------+
| Temporary data          |
+-------------------------+
| Temporary data          |
+-------------------------+
|                         | &lt;-- Current ESP
+-------------------------+
</pre>
<p>Using <tt>EBP</tt> the callee can access both parameters and local variables:
</p>
<pre>MOV  EAX, [[EBP + 12]] &#160;; Load parameter 1 into EAX

MOV  EAX, [[EBP + 16]] &#160;; Load parameter 2

MOV  EAX, [[EBP + 4 * EBX + 12]] &#160;; Load parameter EBX (0-indexed)

MOV  EAX, [[EBP]]      &#160;; Load local variable 1

MOV  EAX, [[EBP - 4]]  &#160;; Load local variable 2
</pre>
<p>There are other calling conventions for X86 just mentioning a few: Pascal calling convention, fastcall convention, stdcall. Read more on Wikipedia, see the links below.
</p>
<h3> <span class="mw-headline" id="Setup_the_stack"> Setup the stack </span></h3>
<p>When creating a kernel you have to manually setup the stack. It can be done by the <a href="Bootloader" title="Bootloader">bootloader</a>, but it is good to know how anyway.
</p><p>If you go from real mode to protected mode you have to setup the stack as well. This is because the <tt>SS</tt> segment might change, so <tt>ESP</tt> in protected mode does not point at the same location as <tt>SP</tt> in real mode did. If you switch a lot between real mode and protected mode it can be nice for them to share the stack. You have to find a smart solution for that yourself. It can be done.
</p><p>In protected mode you setup the stack by just moving a new pointer value into the <tt>ESP</tt> register:
</p>
<pre>MOV  ESP, 0x105000 &#160;; Set the stack pointer
</pre>
<p>Remember that it grows downwards. You might allocate space for it in the kernel's <tt>.BSS</tt> section if it contains one:
</p>
<pre>SECTION .text

setup_stack:
    
    MOV  ESP, stack_end &#160;; Set the stack pointer

SECTION .bss

stack_begin:
    RESB 4096 &#160;; Reserve 4 KiB stack space
stack_end:
</pre>
<p>If your kernel is booted by a <a href="Multiboot" title="Multiboot">Multiboot</a>-compliant bootloader, like <a href="GRUB" title="GRUB">GRUB</a>, you are provided a memory map. You can setup the stack by looking for free memory chunks of the appropriate size. You just have to ensure that you don't overwrite any important data or code, when setting the stack pointer.
</p>
<h3> <span class="mw-headline" id="Security"> Security </span></h3>
<p>The stack is easy to use, but it has one problem. There is no "end", so it is vulnerable to a variation of the buffer overflow attack. The attacker pushes more elements that the stack is able to contain, so they are pushes outside the stack memory, overwriting code, which the attacker can execute.
</p><p>In X86 protected mode it can be solved by allocating a <a href="GDT" title="GDT" class="mw-redirect">GDT descriptor</a> solely for the stack, which defines its boundaries.
</p>
<h2> <span class="mw-headline" id="Stack_trace"> Stack trace </span></h2>
<p>When debugging a stack trace is often shown and can be helpful. <a href="Stack_Trace" title="Stack Trace">Stack Trace</a> describes how this can be done and provides sample code for X86 CDECL using the stack layout above.
</p>
<h2> <span class="mw-headline" id="Unwinding_the_stack"> Unwinding the stack </span></h2>
<p>Unwinding the stack is complex. It is done when using exceptions, like in <a href="C++" title="C++">C++</a>. It is performed when an exception is thrown. The purpose of unwinding the stack is to call the destructor of local objects of the stack frames and to remove stack frames until an appropriate landing pad is found. The landing pad is the try..catch block in C++ or Java. The catch block has to match the exception, i.e. a RuntimeException object can't be caught as a String object.
</p><p>The unwinding algorithm depends on the architecture. Normally this algorithm is provided in the language runtime library. When using GCC and C++ it is defined in the libsupc++ library linked with your application. However it doesn't happen, when creating a kernel. The libsupc++ library is also too bloated to use in kernel space.
</p>
<h2> <span class="mw-headline" id="See_Also"> See Also </span></h2>
<h3> <span class="mw-headline" id="Articles"> Articles </span></h3>
<h3> <span class="mw-headline" id="Threads"> Threads </span></h3>
<h3> <span class="mw-headline" id="External_Links"> External Links </span></h3>
<ul><li> <a href="http://wikipedia.org/wiki/x86_calling_conventions" class="extiw" title="wikipedia:x86 calling conventions"> x86 calling conventions</a> on Wikipedia.
</li><li> <a href="http://wikipedia.org/wiki/Stack_(data_structure)" class="extiw" title="wikipedia:Stack (data structure)"> Stack (data structure)</a> on Wikipedia.
</li></ul>

<!-- 
NewPP limit report
Preprocessor node count: 117/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:1704-0!*!0!!en!2!* and timestamp 20180121034650 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=Stack&amp;oldid=14620">http://wiki.osdev.org/index.php?title=Stack&amp;oldid=14620</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="http://wiki.osdev.org/Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="Category:OS_theory" title="Category:OS theory">OS theory</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Stack" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="Stack"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk"><span><a href="Talk:Stack"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="Stack#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="Stack" >Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=Stack&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=Stack&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="Stack#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="http://wiki.osdev.org/index.php" id="searchform">
		<input type='hidden' name="title" value="Special:Search"/>
				<input type="search" name="search" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput" />		<input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" />		<input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" />			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navskins/common/images/osdev.png);" href="/Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/Stack" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/Stack" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=Stack&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=Stack&amp;oldid=14620" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 30 April 2013, at 06:29.</li>
											<li id="footer-info-viewcount">This page has been accessed 79,888 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.030 secs. -->
	</body>
</html>
