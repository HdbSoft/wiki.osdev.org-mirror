<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>Go Bare Bones - OSDev Wiki</title>
<meta charset="UTF-8" />
<meta name="generator" content="MediaWiki 1.18.0" />
<link rel="shortcut icon" href="favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "Go_Bare_Bones", "wgTitle": "Go Bare Bones", "wgCurRevisionId": 19340, "wgArticleId": 3823, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["Bare bones tutorials"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script>
<style type="text/css">/*<![CDATA[*/
.source-bash {line-height: normal;}
.source-bash li, .source-bash pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for bash
 * CSS class: source-bash, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.bash.source-bash .de1, .bash.source-bash .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.bash.source-bash  {font-family:monospace;}
.bash.source-bash .imp {font-weight: bold; color: red;}
.bash.source-bash li, .bash.source-bash .li1 {font-weight: normal; vertical-align:top;}
.bash.source-bash .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.bash.source-bash .li2 {font-weight: bold; vertical-align:top;}
.bash.source-bash .kw1 {color: #000000; font-weight: bold;}
.bash.source-bash .kw2 {color: #c20cb9; font-weight: bold;}
.bash.source-bash .kw3 {color: #7a0874; font-weight: bold;}
.bash.source-bash .co0 {color: #666666; font-style: italic;}
.bash.source-bash .co1 {color: #800000;}
.bash.source-bash .co2 {color: #cc0000; font-style: italic;}
.bash.source-bash .co3 {color: #000000; font-weight: bold;}
.bash.source-bash .co4 {color: #666666;}
.bash.source-bash .es1 {color: #000099; font-weight: bold;}
.bash.source-bash .es2 {color: #007800;}
.bash.source-bash .es3 {color: #007800;}
.bash.source-bash .es4 {color: #007800;}
.bash.source-bash .es5 {color: #780078;}
.bash.source-bash .es_h {color: #000099; font-weight: bold;}
.bash.source-bash .br0 {color: #7a0874; font-weight: bold;}
.bash.source-bash .sy0 {color: #000000; font-weight: bold;}
.bash.source-bash .st0 {color: #ff0000;}
.bash.source-bash .st_h {color: #ff0000;}
.bash.source-bash .nu0 {color: #000000;}
.bash.source-bash .re0 {color: #007800;}
.bash.source-bash .re1 {color: #007800;}
.bash.source-bash .re2 {color: #007800;}
.bash.source-bash .re4 {color: #007800;}
.bash.source-bash .re5 {color: #660033;}
.bash.source-bash .ln-xtra, .bash.source-bash li.ln-xtra, .bash.source-bash div.ln-xtra {background-color: #ffc;}
.bash.source-bash span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-go {line-height: normal;}
.source-go li, .source-go pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for go
 * CSS class: source-go, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.go.source-go .de1, .go.source-go .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.go.source-go  {font-family:monospace;}
.go.source-go .imp {font-weight: bold; color: red;}
.go.source-go li, .go.source-go .li1 {font-weight: normal; vertical-align:top;}
.go.source-go .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.go.source-go .li2 {font-weight: bold; vertical-align:top;}
.go.source-go .kw1 {color: #b1b100; font-weight: bold;}
.go.source-go .kw2 {color: #000000; font-weight: bold;}
.go.source-go .kw3 {color: #000066;}
.go.source-go .kw4 {color: #993333;}
.go.source-go .kw5 {color: #003399;}
.go.source-go .co1 {color: #666666; font-style: italic;}
.go.source-go .co2 {color: #0000ff;}
.go.source-go .coMULTI {color: #666666; font-style: italic;}
.go.source-go .es1 {color: #000099; font-weight: bold;}
.go.source-go .es2 {color: #000099;}
.go.source-go .es3 {color: #000099;}
.go.source-go .es4 {color: #000099;}
.go.source-go .es5 {color: #000099;}
.go.source-go .sy1 {color: #339933;}
.go.source-go .sy2 {color: #339933;}
.go.source-go .sy3 {color: #339933;}
.go.source-go .sy4 {color: #000000; font-weight: bold;}
.go.source-go .st0 {color: #cc66cc;}
.go.source-go .nu0 {color: #cc66cc;}
.go.source-go .me0 {color: #004000;}
.go.source-go .ln-xtra, .go.source-go li.ln-xtra, .go.source-go div.ln-xtra {background-color: #ffc;}
.go.source-go span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Go_Bare_Bones action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">Go Bare Bones</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="Go_Bare_Bones#mw-head">navigation</a>,
					<a href="Go_Bare_Bones#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div lang="en" dir="ltr" class="mw-content-ltr"><p>In this tutorial you'll learn how to get started using the Go language to write your own OS. It will be an example of how to create a very minimal system to get text on the screen. It's in no way an example of how you should organize or structure your project.
</p><p><big><b>WAIT! Have you read <a href="Getting_Started" title="Getting Started">Getting Started</a>, <a href="Beginner_Mistakes" title="Beginner Mistakes">Beginner Mistakes</a>, and some of the related <a href="Category:OS_theory" title="Category:OS theory">OS theory</a>?</b></big>
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Go_Bare_Bones#Preface"><span class="tocnumber">1</span> <span class="toctext">Preface</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Go_Bare_Bones#Building_a_Cross-Compiler"><span class="tocnumber">2</span> <span class="toctext">Building a Cross-Compiler</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="Go_Bare_Bones#Overview"><span class="tocnumber">3</span> <span class="toctext">Overview</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="Go_Bare_Bones#Bootstrap_Assembly"><span class="tocnumber">4</span> <span class="toctext">Bootstrap Assembly</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="Go_Bare_Bones#Writing_the_Terminal_package_in_Go"><span class="tocnumber">5</span> <span class="toctext">Writing the Terminal package in Go</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="Go_Bare_Bones#How_imported_packages_are_found"><span class="tocnumber">6</span> <span class="toctext">How imported packages are found</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="Go_Bare_Bones#Writing_a_kernel_in_Go"><span class="tocnumber">7</span> <span class="toctext">Writing a kernel in Go</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="Go_Bare_Bones#Linking_the_Kernel"><span class="tocnumber">8</span> <span class="toctext">Linking the Kernel</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="Go_Bare_Bones#Testing_your_operating_system_.28QEMU.29"><span class="tocnumber">9</span> <span class="toctext">Testing your operating system (QEMU)</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="Go_Bare_Bones#External_Links"><span class="tocnumber">10</span> <span class="toctext">External Links</span></a></li>
</ul>
</td></tr></table>
<h2> <span class="mw-headline" id="Preface"> Preface </span></h2>
<p>It is highly recommended to first read <a href="Bare_Bones" title="Bare Bones">Bare Bones</a> before following this tutorial because it is based on it. Also please keep in mind that the Go language itself was not designed for operating systems development. As such you'll be fighting the language every step of the way.
</p><p>This tutorial assumes you are using a Unix-like operating system such as Linux.
</p>
<h2> <span class="mw-headline" id="Building_a_Cross-Compiler"> Building a Cross-Compiler </span></h2>
<dl><dd><i>Main article: <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC Cross-Compiler</a>, <a href="Why_do_I_need_a_Cross_Compiler?" title="Why do I need a Cross Compiler?">Why do I need a Cross Compiler?</a></i>
</dd></dl>
<p>The first thing you should do is set up a GCC Cross Compiler that supports Go. To do this read and follow <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC Cross-Compiler</a> to the letter with one exception. When configuring the build for GCC we need to enable Go to get the i686-elf-gccgo compiler.
</p>
So instead of using: <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1">..<span class="sy0">/</span>gcc-x.y.z<span class="sy0">/</span>configure <span class="re5">--target</span>=<span class="re1">$TARGET</span> <span class="re5">--prefix</span>=<span class="st0">&quot;<span class="es2">$PREFIX</span>&quot;</span> <span class="re5">--disable-nls</span> <span class="re5">--enable-languages</span>=c,<span class="kw2">c++</span> <span class="re5">--without-headers</span></pre></div></div> We use: <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1">..<span class="sy0">/</span>gcc-x.y.z<span class="sy0">/</span>configure <span class="re5">--target</span>=<span class="re1">$TARGET</span> <span class="re5">--prefix</span>=<span class="st0">&quot;<span class="es2">$PREFIX</span>&quot;</span> <span class="re5">--disable-nls</span> <span class="re5">--enable-languages</span>=c,<span class="kw2">c++</span>,go <span class="re5">--without-headers</span></pre></div></div>
<h2> <span class="mw-headline" id="Overview"> Overview </span></h2>
<p>By now, you should have set up your <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">cross-compiler</a> for i686-elf that supports Go (as described above). This tutorial provides a minimal solution for creating an operating system for x86. It doesn't serve as a recommend skeleton for project structure, but rather as an example of a minimal kernel using another package to put text on the screen. In this simple case, we just need four input files:
</p>
<ul><li> boot.s - kernel entry point that sets up the processor environment
</li><li> kernel.go - your actual kernel routines
</li><li> terminal.go - a package for printing text to the screen
</li><li> linker.ld - for linking the above files
</li></ul>
<h2> <span class="mw-headline" id="Bootstrap_Assembly"> Bootstrap Assembly </span></h2>
<p>We will now create the file called boot.s and discuss its contents a little.
</p>
<pre># Declare constants used for creating a multiboot header.
.set ALIGN,    1&lt;&lt;0             # align loaded modules on page boundaries
.set MEMINFO,  1&lt;&lt;1             # provide memory map
.set FLAGS,    ALIGN | MEMINFO  # this is the Multiboot 'flag' field
.set MAGIC,    0x1BADB002       # 'magic number' lets bootloader find the header
.set CHECKSUM, -(MAGIC + FLAGS) # checksum of above, to prove we are multiboot

# Declare a header as in the Multiboot Standard.
.section .multiboot
.align 4
.long MAGIC
.long FLAGS
.long CHECKSUM

# Currently the stack pointer register (esp) points at anything and using it may
# cause massive harm. Instead, we'll provide our own stack.
.section .bootstrap_stack, &quot;aw&quot;, @nobits
stack_bottom:
.skip 16384 # 16 KiB
stack_top:

# The linker script specifies _start as the entry point to the kernel and the
# bootloader will jump to this position once the kernel has been loaded. It
# doesn't make sense to return from this function as the bootloader is gone.
.section .text
.global _start
.type _start, @function
_start:
	# To set up a stack, we simply set the esp register to point to the top of
	# our stack (as it grows downwards).
	movl $stack_top,&#160;%esp

	# We are now ready to actually execute Go code. Functions that start with a
	# capital letter are exported as &quot;go.&lt;package&gt;.&lt;function&gt;&quot;.
	call go.kernel.Main

	# In case the function returns, we'll want to put the computer into an
	# infinite loop.
	cli
	hlt
.Lhang:
	jmp .Lhang

# Set the size of the _start symbol to the current location '.' minus its start.
# This is useful when debugging or when you implement call tracing.
.size _start, . - _start

# The Go runtime is a big problem when wanting to write a kernel in Go.
# Although not impossible, it's certainly not trivial. At the very least
# you'd need to implement parts of libc that it uses. Porting the runtime
# goes way beyond the scope of this barebone. 
#
# Beware that there are almost no language features you can use at this point.
# The linker will fail with missing symbols when you try to use them.
#
# You have to implement those missing symbols yourself to get things working.
# Sometimes you can get away with declaring them as an empty function. 
# But this won't always work.
#
# After you get this bare bone working, the first priority should be to write
# your own memory allocator. A simple sbrk implementation should suffice for
# symbols like __go_new.
#
# For now we just implement the symbols below as empty functions to get this
# barebone up and running.
#

.global __go_register_gc_roots
.type __go_register_gc_roots, @function
__go_register_gc_roots:
	ret
.size __go_register_gc_roots, . - __go_register_gc_roots

.global __go_runtime_error
.type __go_runtime_error, @function
__go_runtime_error:
	ret
.size __go_runtime_error, . - __go_runtime_error</pre>
<p>You can then assemble boot.s using:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1">i686-elf-as boot.s <span class="re5">-o</span> boot.o</pre></div></div>
<h2> <span class="mw-headline" id="Writing_the_Terminal_package_in_Go"> Writing the Terminal package in Go </span></h2>
<dl><dd><i>Please read <a href="Printing_to_Screen" title="Printing to Screen" class="mw-redirect">Printing to Screen</a> to understand what this code does.</i>
</dd></dl>
<p>Now we'll create the file terminal.go. It's the package "terminal" our kernel will depend on for printing text to the screen. 
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="go source-go"><pre class="de1"><span class="kw1">package</span> terminal
&#160;
<span class="kw1">import</span> <span class="st0">&quot;unsafe&quot;</span>
&#160;
<span class="coMULTI">/*
 * Map the text mode video memory into a multi-dimensional array that can be safely
 * used from Go.
 */</span>
&#160;
<span class="kw4">func</span> get_vidMem<span class="sy1">(</span>addr <span class="kw4">uint32</span><span class="sy1">)</span> <span class="sy3">*</span><span class="sy1">[</span><span class="nu0">25</span><span class="sy1">][</span><span class="nu0">80</span><span class="sy1">][</span><span class="nu0">2</span><span class="sy1">]</span><span class="kw4">byte</span> <span class="sy1">{</span>
	buff <span class="sy2">:=</span> <span class="sy1">(</span><span class="sy3">*</span><span class="sy1">[</span><span class="nu0">25</span><span class="sy1">][</span><span class="nu0">80</span><span class="sy1">][</span><span class="nu0">2</span><span class="sy1">]</span><span class="kw4">byte</span><span class="sy1">)(</span>unsafe<span class="sy3">.</span>Pointer<span class="sy1">(</span><span class="kw4">uintptr</span><span class="sy1">(</span>addr<span class="sy1">)))</span>
	<span class="kw1">return</span> buff	
<span class="sy1">}</span>
&#160;
<span class="coMULTI">/*
 * This isn't a tutorial on the language itself so the rest should make sense to you.
 */</span>
&#160;
<span class="kw1">const</span> <span class="sy1">(</span>
	Black        <span class="sy2">=</span> <span class="nu0">0</span>
	Blue         <span class="sy2">=</span> <span class="nu0">1</span>
	Green        <span class="sy2">=</span> <span class="nu0">2</span>
	Cyan         <span class="sy2">=</span> <span class="nu0">3</span>
	Red          <span class="sy2">=</span> <span class="nu0">4</span>
	Magenta      <span class="sy2">=</span> <span class="nu0">5</span>
	Brown        <span class="sy2">=</span> <span class="nu0">6</span>
	LightGrey    <span class="sy2">=</span> <span class="nu0">7</span>
	DarkGrey     <span class="sy2">=</span> <span class="nu0">8</span>
	LightBlue    <span class="sy2">=</span> <span class="nu0">9</span>
	LightGreen   <span class="sy2">=</span> <span class="nu0">10</span>
	LightCyan    <span class="sy2">=</span> <span class="nu0">11</span>
	LightRed     <span class="sy2">=</span> <span class="nu0">12</span>
	LightMagenta <span class="sy2">=</span> <span class="nu0">13</span>
	LightBrown   <span class="sy2">=</span> <span class="nu0">14</span>
	White        <span class="sy2">=</span> <span class="nu0">15</span>
<span class="sy1">)</span>
&#160;
<span class="kw1">var</span> Column<span class="sy1">,</span> Row <span class="kw4">int</span>
<span class="kw1">var</span> Color <span class="kw4">byte</span>
<span class="kw1">var</span> vidMem <span class="sy3">*</span><span class="sy1">[</span><span class="nu0">25</span><span class="sy1">][</span><span class="nu0">80</span><span class="sy1">][</span><span class="nu0">2</span><span class="sy1">]</span><span class="kw4">byte</span>
&#160;
<span class="kw4">func</span> Init<span class="sy1">()</span> <span class="sy1">{</span>
	vidMem <span class="sy2">=</span> get_vidMem<span class="sy1">(</span><span class="nu0">0xB8000</span><span class="sy1">)</span>
	Color <span class="sy2">=</span> MakeColor<span class="sy1">(</span>LightGrey<span class="sy1">,</span> Black<span class="sy1">)</span>
	Column <span class="sy2">=</span> <span class="nu0">0</span>
	Row <span class="sy2">=</span> <span class="nu0">0</span>
<span class="sy1">}</span>
&#160;
<span class="kw4">func</span> MakeColor<span class="sy1">(</span>fg<span class="sy1">,</span> bg <span class="kw4">byte</span><span class="sy1">)</span> <span class="kw4">byte</span> <span class="sy1">{</span>
	<span class="kw1">return</span> fg <span class="sy3">|</span> bg&lt;&lt;<span class="nu0">4</span>
<span class="sy1">}</span>
&#160;
<span class="kw4">func</span> ScrollUp<span class="sy1">()</span> <span class="sy1">{</span>
	<span class="kw1">for</span> x <span class="sy2">:=</span> <span class="nu0">1</span><span class="sy1">;</span> x &lt; <span class="nu0">25</span><span class="sy1">;</span> x<span class="sy2">++</span> <span class="sy1">{</span>
		vidMem<span class="sy1">[</span>x<span class="sy3">-</span><span class="nu0">1</span><span class="sy1">]</span> <span class="sy2">=</span> vidMem<span class="sy1">[</span>x<span class="sy1">]</span>
	<span class="sy1">}</span>
	Row <span class="sy2">=</span> <span class="nu0">24</span>
<span class="sy1">}</span>
&#160;
<span class="kw4">func</span> Clear<span class="sy1">()</span> <span class="sy1">{</span>
	<span class="kw1">for</span> r <span class="sy2">:=</span> <span class="nu0">0</span><span class="sy1">;</span> r &lt; <span class="nu0">25</span><span class="sy1">;</span> r<span class="sy2">++</span> <span class="sy1">{</span>
		<span class="kw1">for</span> c <span class="sy2">:=</span> <span class="nu0">0</span><span class="sy1">;</span> c &lt; <span class="nu0">80</span><span class="sy1">;</span> c<span class="sy2">++</span> <span class="sy1">{</span>
			vidMem<span class="sy1">[</span>r<span class="sy1">][</span>c<span class="sy1">][</span><span class="nu0">0</span><span class="sy1">]</span> <span class="sy2">=</span> <span class="nu0">32</span>
			vidMem<span class="sy1">[</span>r<span class="sy1">][</span>c<span class="sy1">][</span><span class="nu0">1</span><span class="sy1">]</span> <span class="sy2">=</span> Color
		<span class="sy1">}</span>
	<span class="sy1">}</span>
<span class="sy1">}</span>
&#160;
<span class="kw4">func</span> Poke<span class="sy1">(</span>c rune<span class="sy1">)</span> <span class="sy1">{</span>
	<span class="kw1">if</span> c <span class="sy3">==</span> <span class="st0">'<span class="es1">\n</span>'</span> <span class="sy1">{</span>
		Column <span class="sy2">=</span> <span class="nu0">0</span>
		Row<span class="sy2">++</span>
		<span class="kw1">if</span> Row &gt; <span class="nu0">24</span> <span class="sy1">{</span>
			ScrollUp<span class="sy1">()</span>
		<span class="sy1">}</span>
	<span class="sy1">}</span> <span class="kw1">else</span> <span class="sy1">{</span>
		vidMem<span class="sy1">[</span>Row<span class="sy1">][</span>Column<span class="sy1">][</span><span class="nu0">0</span><span class="sy1">]</span> <span class="sy2">=</span> <span class="kw4">byte</span><span class="sy1">(</span>c<span class="sy1">)</span>
		vidMem<span class="sy1">[</span>Row<span class="sy1">][</span>Column<span class="sy1">][</span><span class="nu0">1</span><span class="sy1">]</span> <span class="sy2">=</span> Color
		Column<span class="sy2">++</span>
		<span class="kw1">if</span> Column &gt; <span class="nu0">79</span> <span class="sy1">{</span>
			Column <span class="sy2">=</span> <span class="nu0">0</span>
			Row<span class="sy2">++</span>
			<span class="kw1">if</span> Row &gt; <span class="nu0">24</span> <span class="sy1">{</span>
				ScrollUp<span class="sy1">()</span>
			<span class="sy1">}</span>
		<span class="sy1">}</span>
	<span class="sy1">}</span>
<span class="sy1">}</span>
&#160;
<span class="kw4">func</span> Print<span class="sy1">(</span>s <span class="kw4">string</span><span class="sy1">)</span> <span class="sy1">{</span>
	<span class="kw1">for</span> c <span class="sy2">:=</span> <span class="nu0">0</span><span class="sy1">;</span> c &lt; <span class="kw3">len</span><span class="sy1">(</span>s<span class="sy1">);</span> c<span class="sy2">++</span> <span class="sy1">{</span>
		Poke<span class="sy1">(</span>rune<span class="sy1">(</span>s<span class="sy1">[</span>c<span class="sy1">]))</span>
	<span class="sy1">}</span>
<span class="sy1">}</span></pre></div></div>
Compile using: <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1">i686-elf-gccgo <span class="re5">-static</span> <span class="re5">-Werror</span> <span class="re5">-nostdlib</span> <span class="re5">-nostartfiles</span> <span class="re5">-nodefaultlibs</span> <span class="re5">-c</span> terminal.go <span class="re5">-o</span> terminal.go.o</pre></div></div>
<h2> <span class="mw-headline" id="How_imported_packages_are_found"> How imported packages are found </span></h2>
<p>When you import a package with gccgo it will look for the import data in the following files and will use the first one it finds.
</p>
<ul><li> .gox
</li><li> .so
</li><li> .a
</li><li> .o
</li></ul>
A .gox file contains just the import data. If you wanted to extract it from our terminal.go.o object file we use: <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1">i686-elf-objcopy <span class="re5">-j</span> .go_export terminal.go.o terminal.gox</pre></div></div>
<h2> <span class="mw-headline" id="Writing_a_kernel_in_Go"> Writing a kernel in Go </span></h2>
<p>Now we create the file kernel.go that contains the Main() function called from our bootstrap assembly we've already created and compiled above. It will import the terminal package we also created &amp; compiled. Then we use that package to print text to the screen.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="go source-go"><pre class="de1"><span class="kw1">package</span> kernel
&#160;
<span class="kw1">import</span> <span class="st0">&quot;terminal&quot;</span>
&#160;
<span class="kw4">func</span> Main<span class="sy1">()</span> <span class="sy1">{</span>
	terminal<span class="sy3">.</span>Init<span class="sy1">()</span>                      <span class="co1">// Initialize terminal</span>
	terminal<span class="sy3">.</span><span class="me1">Color</span> <span class="sy2">=</span> terminal<span class="sy3">.</span><span class="me1">MakeColor</span><span class="sy1">(</span> <span class="co1">// Set color to..</span>
		terminal<span class="sy3">.</span><span class="me1">White</span><span class="sy1">,</span> <span class="co1">// White text...</span>
		terminal<span class="sy3">.</span><span class="me1">Blue</span><span class="sy1">)</span>  <span class="co1">// on a blue background</span>
	terminal<span class="sy3">.</span><span class="me1">Clear</span><span class="sy1">()</span> <span class="co1">// Clear screen</span>
&#160;
	<span class="co1">// Center the text a little</span>
	terminal<span class="sy3">.</span>Row <span class="sy2">=</span> <span class="nu0">11</span>
	terminal<span class="sy3">.</span>Column <span class="sy2">=</span> <span class="nu0">30</span>
&#160;
	<span class="co1">// Print our Hello, World!</span>
	terminal<span class="sy3">.</span><span class="me1">Print</span><span class="sy1">(</span><span class="st0">&quot;Hello, Kernel World!<span class="es1">\n</span>&quot;</span><span class="sy1">)</span>
<span class="sy1">}</span></pre></div></div>
Compile using: <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1">i686-elf-gccgo <span class="re5">-static</span> <span class="re5">-Werror</span> <span class="re5">-nostdlib</span> <span class="re5">-nostartfiles</span> <span class="re5">-nodefaultlibs</span> <span class="re5">-c</span> kernel.go <span class="re5">-o</span> kernel.go.o</pre></div></div>
<h2> <span class="mw-headline" id="Linking_the_Kernel"> Linking the Kernel </span></h2>
<p>Now we create the file linker.ld which will be used as instructions to link the object files we have into the final kernel program, usable by the bootloader.
</p>
<pre>/* The bootloader will look at this image and start execution at the symbol
   designated as the entry point. */
ENTRY(_start)

/* Tell where the various sections of the object files will be put in the final
   kernel image. */
SECTIONS
{
	/* Begin putting sections at 1 MiB, a conventional place for kernels to be
	   loaded at by the bootloader. */
	. = 1M;

	/* First put the multiboot header, as it is required to be put very early
	   early in the image or the bootloader won't recognize the file format.
	   Next we'll put the .text section. */
	.text BLOCK(4K)&#160;: ALIGN(4K)
	{
		*(.multiboot)
		*(.text)
	}

	/* Read-only data. */
	.rodata BLOCK(4K)&#160;: ALIGN(4K)
	{
		*(.rodata)
	}

	/* Read-write data (initialized) */
	.data BLOCK(4K)&#160;: ALIGN(4K)
	{
		*(.data)
	}

	/* Read-write data (uninitialized) and stack */
	.bss BLOCK(4K)&#160;: ALIGN(4K)
	{
		*(COMMON)
		*(.bss)
		*(.bootstrap_stack)
	}

	/* The compiler may produce other sections, by default it will put them in
	   a segment with the same name. Simply add stuff here as needed. */
}</pre>
<p>You can link your kernel using:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1">i686-elf-gcc <span class="re5">-T</span> linker.ld <span class="re5">-o</span> myos.bin <span class="re5">-ffreestanding</span> <span class="re5">-O2</span> <span class="re5">-nostdlib</span> boot.o terminal.go.o kernel.go.o <span class="re5">-lgcc</span></pre></div></div>
<p>The file myos.bin is now your kernel. Note that we are linking against <a href="Libgcc" title="Libgcc">libgcc</a>, which implements various routines that your cross-compiler depends on. Leaving it out will give you problems in the future.
</p>
<h2> <span class="mw-headline" id="Testing_your_operating_system_.28QEMU.29"> Testing your operating system (QEMU) </span></h2>
<p>Virtual Machines are very useful for developing operating systems, as they allow you to quickly test your code and have access to the source code during the execution. Otherwise, you would be in for an endless cycle of reboots that would only annoy you. They start very quickly, especially combined with small operating systems such as ours.
</p><p>QEMU supports booting multiboot kernels directly without using a bootable medium:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1">qemu-system-i386 <span class="re5">-kernel</span> myos.bin</pre></div></div>
<h2> <span class="mw-headline" id="External_Links"> External Links </span></h2>
<ul><li> <a rel="nofollow" class="external text" href="https://www.gnu.org/software/grub/manual/multiboot/multiboot.html">Multiboot Specification</a>
</li><li> <a rel="nofollow" class="external text" href="https://golang.org/doc/install/gccgo">Setting up and using gccgo</a>
</li></ul>

<!-- 
NewPP limit report
Preprocessor node count: 179/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3823-0!*!0!!en!*!* and timestamp 20180121031613 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=Go_Bare_Bones&amp;oldid=19340">http://wiki.osdev.org/index.php?title=Go_Bare_Bones&amp;oldid=19340</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="http://wiki.osdev.org/Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="Category:Bare_bones_tutorials" title="Category:Bare bones tutorials">Bare bones tutorials</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Go_Bare_Bones" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="Go_Bare_Bones"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk" class="new"><span><a href="http://wiki.osdev.org/index.php?title=Talk:Go_Bare_Bones&amp;action=edit&amp;redlink=1"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="Go_Bare_Bones#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="Go_Bare_Bones" >Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=Go_Bare_Bones&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=Go_Bare_Bones&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="Go_Bare_Bones#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="http://wiki.osdev.org/index.php" id="searchform">
		<input type='hidden' name="title" value="Special:Search"/>
				<input type="search" name="search" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput" />		<input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" />		<input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" />			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="/Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="/Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="/OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="/OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="/OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="/Special:WhatLinksHere/Go_Bare_Bones" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="/Special:RecentChangesLinked/Go_Bare_Bones" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="/Special:SpecialPages" title="A list of all special pagesskins/common/images/osdev.png);" href="/Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/Go_Bare_Bones" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/Go_Bare_Bones" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=Go_Bare_Bones&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=Go_Bare_Bones&amp;oldid=19340" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 8 June 2016, at 13:23.</li>
											<li id="footer-info-viewcount">This page has been accessed 5,691 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.030 secs. -->
	</body>
</html>
