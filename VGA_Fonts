<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>VGA Fonts - OSDev Wiki</title>
<meta charset="UTF-8" />
<meta name="generator" content="MediaWiki 1.18.0" />
<link rel="shortcut icon" href="favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "VGA_Fonts", "wgTitle": "VGA Fonts", "wgCurRevisionId": 19989, "wgArticleId": 3092, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["VGA", "Video"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script>
<style type="text/css">/*<![CDATA[*/
.source-asm {line-height: normal;}
.source-asm li, .source-asm pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for asm
 * CSS class: source-asm, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.asm.source-asm .de1, .asm.source-asm .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.asm.source-asm  {font-family:monospace;}
.asm.source-asm .imp {font-weight: bold; color: red;}
.asm.source-asm li, .asm.source-asm .li1 {font-weight: normal; vertical-align:top;}
.asm.source-asm .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.asm.source-asm .li2 {font-weight: bold; vertical-align:top;}
.asm.source-asm .kw1 {color: #00007f; font-weight: bold;}
.asm.source-asm .kw2 {color: #0000ff; font-weight: bold;}
.asm.source-asm .kw3 {color: #00007f;}
.asm.source-asm .kw4 {color: #000000; font-weight: bold;}
.asm.source-asm .kw5 {color: #000000; font-weight: bold;}
.asm.source-asm .co1 {color: #666666; font-style: italic;}
.asm.source-asm .co2 {color: #adadad; font-style: italic;}
.asm.source-asm .es0 {color: #000099; font-weight: bold;}
.asm.source-asm .br0 {color: #009900; font-weight: bold;}
.asm.source-asm .sy0 {color: #339933;}
.asm.source-asm .st0 {color: #7f007f;}
.asm.source-asm .nu0 {color: #0000ff;}
.asm.source-asm .ln-xtra, .asm.source-asm li.ln-xtra, .asm.source-asm div.ln-xtra {background-color: #ffc;}
.asm.source-asm span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #b1b100;}
.c.source-c .kw2 {color: #000000; font-weight: bold;}
.c.source-c .kw3 {color: #000066;}
.c.source-c .kw4 {color: #993333;}
.c.source-c .co1 {color: #666666; font-style: italic;}
.c.source-c .co2 {color: #339933;}
.c.source-c .coMULTI {color: #808080; font-style: italic;}
.c.source-c .es0 {color: #000099; font-weight: bold;}
.c.source-c .es1 {color: #000099; font-weight: bold;}
.c.source-c .es2 {color: #660099; font-weight: bold;}
.c.source-c .es3 {color: #660099; font-weight: bold;}
.c.source-c .es4 {color: #660099; font-weight: bold;}
.c.source-c .es5 {color: #006699; font-weight: bold;}
.c.source-c .br0 {color: #009900;}
.c.source-c .sy0 {color: #339933;}
.c.source-c .st0 {color: #ff0000;}
.c.source-c .nu0 {color: #0000dd;}
.c.source-c .nu6 {color: #208080;}
.c.source-c .nu8 {color: #208080;}
.c.source-c .nu12 {color: #208080;}
.c.source-c .nu16 {color:#800080;}
.c.source-c .nu17 {color:#800080;}
.c.source-c .nu18 {color:#800080;}
.c.source-c .nu19 {color:#800080;}
.c.source-c .me1 {color: #202020;}
.c.source-c .me2 {color: #202020;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-VGA_Fonts action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">VGA Fonts</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="VGA_Fonts#mw-head">navigation</a>,
					<a href="VGA_Fonts#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div lang="en" dir="ltr" class="mw-content-ltr"><p>So you know how to display characters in text mode, and now you want to do it in graphics mode. It's not complicated, but definitely more complex than writing an ASCII code at a specific offset in memory. You'll have to do it pixel by pixel.
</p><p>But how do you know what to draw? It's stored in data matrix called bitmap fonts.
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="VGA_Fonts#Decoding_of_bitmap_fonts"><span class="tocnumber">1</span> <span class="toctext">Decoding of bitmap fonts</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="VGA_Fonts#How_to_get_fonts.3F"><span class="tocnumber">2</span> <span class="toctext">How to get fonts?</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="VGA_Fonts#Store_it_in_an_array"><span class="tocnumber">2.1</span> <span class="toctext">Store it in an array</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="VGA_Fonts#Store_it_in_a_file"><span class="tocnumber">2.2</span> <span class="toctext">Store it in a file</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="VGA_Fonts#Get_the_copy_stored_in_the_VGA_BIOS"><span class="tocnumber">2.3</span> <span class="toctext">Get the copy stored in the VGA BIOS</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="VGA_Fonts#Get_from_VGA_RAM_directly"><span class="tocnumber">2.4</span> <span class="toctext">Get from VGA RAM directly</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-7"><a href="VGA_Fonts#Set_VGA_fonts"><span class="tocnumber">3</span> <span class="toctext">Set VGA fonts</span></a>
<ul>
<li class="toclevel-2 tocsection-8"><a href="VGA_Fonts#Set_fonts_via_BIOS"><span class="tocnumber">3.1</span> <span class="toctext">Set fonts via BIOS</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="VGA_Fonts#Set_fonts_directly"><span class="tocnumber">3.2</span> <span class="toctext">Set fonts directly</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-10"><a href="VGA_Fonts#Displaying_a_character"><span class="tocnumber">4</span> <span class="toctext">Displaying a character</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="VGA_Fonts#See_Also"><span class="tocnumber">5</span> <span class="toctext">See Also</span></a></li>
<li class="toclevel-1 tocsection-12"><a href="VGA_Fonts#External_Links"><span class="tocnumber">6</span> <span class="toctext">External Links</span></a></li>
</ul>
</td></tr></table>
<h2> <span class="mw-headline" id="Decoding_of_bitmap_fonts"> Decoding of bitmap fonts </span></h2>
<p>How is a character stored in memory? It's quite simple, 0 encodes background, 1 encodes foreground color. VGA fonts are always 8 bits wide so that each byte contains exactly one row.
For letter 'A' in the typical 8x16 font it would be (in binary):
</p>
<pre>
00000000b  byte  0
00000000b  byte  1
00000000b  byte  2
00010000b  byte  3
00111000b  byte  4
01101100b  byte  5
11000110b  byte  6
11000110b  byte  7
11111110b  byte  8
11000110b  byte  9
11000110b  byte 10
11000110b  byte 11
11000110b  byte 12
00000000b  byte 13
00000000b  byte 14
00000000b  byte 15
</pre>
<p>The full bitmap contains bitmaps for every character, thus it's 256*16 bytes, 4096 bytes long. If you want to get the bitmap for a specific character, you have to multiply the ASCII code by 16 (number of rows in a character), add the offset of your bitmap and you're ready to go.
</p>
<h2> <span class="mw-headline" id="How_to_get_fonts.3F"> How to get fonts? </span></h2>
<p>There're several ways. You can have it in a file on your filesystem. You can hardcode it in an array. But sometimes 4k is so much that you cannot afford, and reading a file is not an option (like in a boot loader), in which case you'll have to read the one used by the card (to display text mode characters) from VGA RAM.
</p>
<h3> <span class="mw-headline" id="Store_it_in_an_array"> Store it in an array </span></h3>
<p>Easiest way, but increases your code by 4k. There are several sources that provide the entire font in binary or source format so you do not need to manually write it out.
</p>
<h3> <span class="mw-headline" id="Store_it_in_a_file"> Store it in a file </span></h3>
<p>Most modular way. You can use different fonts if you like. Downside you'll need a working filesystem implementation. As for the file format, I'd suggest to use Linux's <a href="PC_Screen_Font" title="PC Screen Font">PC Screen Font</a> format so that you can use the console fonts shipped with your Linux distribution.
</p>
<h3> <span class="mw-headline" id="Get_the_copy_stored_in_the_VGA_BIOS"> Get the copy stored in the VGA BIOS </span></h3>
<p>It's a standard BIOS call (no need to check it's persistence). If you're still in real mode, it's quite easy to use.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">		<span class="co1">;in: es:di=4k buffer</span>
		<span class="co1">;out: buffer filled with font</span>
		<span class="kw1">push</span>			<span class="kw3">ds</span>
		<span class="kw1">push</span>			<span class="kw3">es</span>
		<span class="co1">;ask BIOS to return VGA bitmap fonts</span>
		<span class="kw1">mov</span>			<span class="kw3">ax</span><span class="sy0">,</span> <span class="nu0">1130h</span>
		<span class="kw1">mov</span>			<span class="kw3">bh</span><span class="sy0">,</span> <span class="nu0">6</span>
		<span class="kw1">int</span>			<span class="nu0">10h</span>
		<span class="co1">;copy charmap</span>
		<span class="kw1">push</span>			<span class="kw3">es</span>
		<span class="kw1">pop</span>			<span class="kw3">ds</span>
		<span class="kw1">pop</span>			<span class="kw3">es</span>
		<span class="kw1">mov</span>			<span class="kw3">si</span><span class="sy0">,</span> <span class="kw3">bp</span>
		<span class="kw1">mov</span>			<span class="kw3">cx</span><span class="sy0">,</span> <span class="nu0">256</span><span class="sy0">*</span><span class="nu0">16</span><span class="sy0">/</span><span class="nu0">4</span>
		<span class="kw1">rep</span>			<span class="kw1">movsd</span>
		<span class="kw1">pop</span>			<span class="kw3">ds</span></pre></div></div>
<h3> <span class="mw-headline" id="Get_from_VGA_RAM_directly"> Get from VGA RAM directly </span></h3>
<p>Maybe you're already in protected mode, so cannot access BIOS functions. In this case you can still get the bitmap by programming VGA registers. Be careful that the VGA always reserves space for 8x32 fonts so you will need to trim off the bottom 16 bytes of each character during the copy:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">		<span class="co1">;in: edi=4k buffer</span>
		<span class="co1">;out: buffer filled with font</span>
		<span class="co1">;clear even/odd mode</span>
		<span class="kw1">mov</span>			<span class="kw3">dx</span><span class="sy0">,</span> <span class="nu0">03ceh</span>
		<span class="kw1">mov</span>			<span class="kw3">ax</span><span class="sy0">,</span> <span class="nu0">5</span>
		<span class="kw1">out</span>			<span class="kw3">dx</span><span class="sy0">,</span> <span class="kw3">ax</span>
		<span class="co1">;map VGA memory to 0A0000h</span>
		<span class="kw1">mov</span>			<span class="kw3">ax</span><span class="sy0">,</span> <span class="nu0">0406h</span>
		<span class="kw1">out</span>			<span class="kw3">dx</span><span class="sy0">,</span> <span class="kw3">ax</span>
		<span class="co1">;set bitplane 2</span>
		<span class="kw1">mov</span>			<span class="kw3">dx</span><span class="sy0">,</span> <span class="nu0">03c4h</span>
		<span class="kw1">mov</span>			<span class="kw3">ax</span><span class="sy0">,</span> <span class="nu0">0402h</span>
		<span class="kw1">out</span>			<span class="kw3">dx</span><span class="sy0">,</span> <span class="kw3">ax</span>
		<span class="co1">;clear even/odd mode (the other way, don't ask why)</span>
		<span class="kw1">mov</span>			<span class="kw3">ax</span><span class="sy0">,</span> <span class="nu0">0604h</span>
		<span class="kw1">out</span>			<span class="kw3">dx</span><span class="sy0">,</span> <span class="kw3">ax</span>
		<span class="co1">;copy charmap</span>
		<span class="kw1">mov</span>			<span class="kw3">esi</span><span class="sy0">,</span> <span class="nu0">0A0000h</span>
		<span class="kw1">mov</span>			<span class="kw3">ecx</span><span class="sy0">,</span> <span class="nu0">256</span>
		<span class="co1">;copy 16 bytes to bitmap</span>
@@<span class="sy0">:</span>		<span class="kw1">movsd</span>
		<span class="kw1">movsd</span>
		<span class="kw1">movsd</span>
		<span class="kw1">movsd</span>
		<span class="co1">;skip another 16 bytes</span>
		<span class="kw1">add</span>			<span class="kw3">esi</span><span class="sy0">,</span> <span class="nu0">16</span>
		<span class="kw1">loop</span>			<span class="kw5">@b</span>
		<span class="co1">;restore VGA state to normal operation</span>
		<span class="kw1">mov</span>			<span class="kw3">ax</span><span class="sy0">,</span> <span class="nu0">0302h</span>
		<span class="kw1">out</span>			<span class="kw3">dx</span><span class="sy0">,</span> <span class="kw3">ax</span>
		<span class="kw1">mov</span>			<span class="kw3">ax</span><span class="sy0">,</span> <span class="nu0">0204h</span>
		<span class="kw1">out</span>			<span class="kw3">dx</span><span class="sy0">,</span> <span class="kw3">ax</span>
		<span class="kw1">mov</span>			<span class="kw3">dx</span><span class="sy0">,</span> <span class="nu0">03ceh</span>
		<span class="kw1">mov</span>			<span class="kw3">ax</span><span class="sy0">,</span> <span class="nu0">1005h</span>
		<span class="kw1">out</span>			<span class="kw3">dx</span><span class="sy0">,</span> <span class="kw3">ax</span>
		<span class="kw1">mov</span>			<span class="kw3">ax</span><span class="sy0">,</span> <span class="nu0">0E06h</span>
		<span class="kw1">out</span>			<span class="kw3">dx</span><span class="sy0">,</span> <span class="kw3">ax</span></pre></div></div>
<p>It worth mentioning that it has to be done <b>before</b> you switch to VBE graphics mode, because VGA registers are usually not accessible afterwards. This means you won't be able to map the VGA card's font memory to screen memory, and you will read only garbage.
</p>
<h2> <span class="mw-headline" id="Set_VGA_fonts"> Set VGA fonts </span></h2>
<p>If you're still in text mode and want the VGA card to draw different glyphs, you can set the VGA font. It's worthless in graphics mode (because characters are displayed by your code there, not by the card), I only wrote this section for completeness. Modifying the font bitmaps in VGA RAM isn't hard if you read carefully what's written so far. I'll left it to you as a homework.
</p>
<h3> <span class="mw-headline" id="Set_fonts_via_BIOS"> Set fonts via BIOS </span></h3>
<p>Hint: check Ralph Brown Interrupt list Int 10/AX=1110h.
</p>
<h3> <span class="mw-headline" id="Set_fonts_directly"> Set fonts directly </span></h3>
<p>Hint: use the same code as above, but swap source and destination for "movsd".
</p>
<h2> <span class="mw-headline" id="Displaying_a_character"> Displaying a character </span></h2>
<p>And finally we came to the point where we can display a character. I'll assume you have a putpixel procedure ready.
We have to draw 8x16 pixels, one for every bit in the bitmap.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co1">//this is the bitmap font you've loaded</span>
<span class="kw4">unsigned</span> <span class="kw4">char</span> <span class="sy0">*</span>font<span class="sy0">;</span>
&#160;
<span class="kw4">void</span> drawchar<span class="br0">&#40;</span><span class="kw4">unsigned</span> <span class="kw4">char</span> c<span class="sy0">,</span> <span class="kw4">int</span> x<span class="sy0">,</span> <span class="kw4">int</span> y<span class="sy0">,</span> <span class="kw4">int</span> fgcolor<span class="sy0">,</span> <span class="kw4">int</span> bgcolor<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw4">int</span> cx<span class="sy0">,</span>cy<span class="sy0">;</span>
	<span class="kw4">int</span> mask<span class="br0">&#91;</span><span class="nu0">8</span><span class="br0">&#93;</span><span class="sy0">=</span><span class="br0">&#123;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">4</span><span class="sy0">,</span><span class="nu0">8</span><span class="sy0">,</span><span class="nu0">16</span><span class="sy0">,</span><span class="nu0">32</span><span class="sy0">,</span><span class="nu0">64</span><span class="sy0">,</span><span class="nu0">128</span><span class="br0">&#125;</span><span class="sy0">;</span>
	<span class="kw4">unsigned</span> <span class="kw4">char</span> <span class="sy0">*</span>gylph<span class="sy0">=</span>font<span class="sy0">+</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>c<span class="sy0">*</span><span class="nu0">16</span><span class="sy0">;</span>
&#160;
	<span class="kw1">for</span><span class="br0">&#40;</span>cy<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span>cy<span class="sy0">&lt;</span><span class="nu0">16</span><span class="sy0">;</span>cy<span class="sy0">++</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
		<span class="kw1">for</span><span class="br0">&#40;</span>cx<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span>cx<span class="sy0">&lt;</span><span class="nu0">8</span><span class="sy0">;</span>cx<span class="sy0">++</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
			putpixel<span class="br0">&#40;</span>glyph<span class="br0">&#91;</span>cy<span class="br0">&#93;</span><span class="sy0">&amp;</span>mask<span class="br0">&#91;</span>cx<span class="br0">&#93;</span><span class="sy0">?</span>fgcolor<span class="sy0">:</span>bgcolor<span class="sy0">,</span>x<span class="sy0">+</span>cx<span class="sy0">,</span>y<span class="sy0">+</span>cy<span class="sy0">-</span><span class="nu0">12</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>The arguments are straightforward. You may wonder why to subtract 12 from y. It's for the baseline: you specify y coordinate as the bottom of the character, not counting the "piggy tail" in a glyph that goes down (like in "p","g","q" etc.). I other words it's the most bottom row of letter "A" that has a bit set.
</p><p>Although it's mostly useful to erase the screen under the glyph, in some cases it could be bad (eg.: writing on a shiny gradiented button). So here's a slightly modificated version, that uses a transparent background.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co1">//this is the bitmap font you've loaded</span>
<span class="kw4">unsigned</span> <span class="kw4">char</span> <span class="sy0">*</span>font<span class="sy0">;</span>
&#160;
<span class="kw4">void</span> drawchar_transparent<span class="br0">&#40;</span><span class="kw4">unsigned</span> <span class="kw4">char</span> c<span class="sy0">,</span> <span class="kw4">int</span> x<span class="sy0">,</span> <span class="kw4">int</span> y<span class="sy0">,</span> <span class="kw4">int</span> fgcolor<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw4">int</span> cx<span class="sy0">,</span>cy<span class="sy0">;</span>
	<span class="kw4">int</span> mask<span class="br0">&#91;</span><span class="nu0">8</span><span class="br0">&#93;</span><span class="sy0">=</span><span class="br0">&#123;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">4</span><span class="sy0">,</span><span class="nu0">8</span><span class="sy0">,</span><span class="nu0">16</span><span class="sy0">,</span><span class="nu0">32</span><span class="sy0">,</span><span class="nu0">64</span><span class="sy0">,</span><span class="nu0">128</span><span class="br0">&#125;</span><span class="sy0">;</span>
	<span class="kw4">unsigned</span> <span class="kw4">char</span> <span class="sy0">*</span>gylph<span class="sy0">=</span>font<span class="sy0">+</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>c<span class="sy0">*</span><span class="nu0">16</span><span class="sy0">;</span>
&#160;
	<span class="kw1">for</span><span class="br0">&#40;</span>cy<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span>cy<span class="sy0">&lt;</span><span class="nu0">16</span><span class="sy0">;</span>cy<span class="sy0">++</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
		<span class="kw1">for</span><span class="br0">&#40;</span>cx<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span>cx<span class="sy0">&lt;</span><span class="nu0">8</span><span class="sy0">;</span>cx<span class="sy0">++</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
			<span class="kw1">if</span><span class="br0">&#40;</span>glyph<span class="br0">&#91;</span>cy<span class="br0">&#93;</span><span class="sy0">&amp;</span>mask<span class="br0">&#91;</span>cx<span class="br0">&#93;</span><span class="br0">&#41;</span> putpixel<span class="br0">&#40;</span>fgcolor<span class="sy0">,</span>x<span class="sy0">+</span>cx<span class="sy0">,</span>y<span class="sy0">+</span>cy<span class="sy0">-</span><span class="nu0">12</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>As you can see, we have only foreground color this time, and the putpixel call has a condition: only invoked if the according bit in the bitmap is set.
</p><p>Of course the code above will be excruciatingly slow (mostly due to doing one pixel at a time, and repeatedly recalculating the address for each pixel within the "putpixel()" function). For much better performance, the code above can be optimised to use boolean operations and a "mask lookup table" instead. For example (for an 8-bpp mode):
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co1">//this is the bitmap font you've loaded</span>
<span class="kw4">unsigned</span> <span class="kw4">char</span> <span class="sy0">*</span>font<span class="sy0">;</span>
&#160;
<span class="kw4">void</span> drawchar_8BPP<span class="br0">&#40;</span><span class="kw4">unsigned</span> <span class="kw4">char</span> c<span class="sy0">,</span> <span class="kw4">int</span> x<span class="sy0">,</span> <span class="kw4">int</span> y<span class="sy0">,</span> <span class="kw4">int</span> fgcolor<span class="sy0">,</span> <span class="kw4">int</span> bgcolor<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw4">void</span> <span class="sy0">*</span>dest<span class="sy0">;</span>
	<span class="kw4">uint32_t</span> <span class="sy0">*</span>dest32<span class="sy0">;</span>
	<span class="kw4">unsigned</span> <span class="kw4">char</span> <span class="sy0">*</span>src<span class="sy0">;</span>
	<span class="kw4">int</span> row<span class="sy0">;</span>
	<span class="kw4">uint32_t</span> fgcolor32<span class="sy0">;</span>
	<span class="kw4">uint32_t</span> bgcolor32<span class="sy0">;</span>
&#160;
	fgcolor32 <span class="sy0">=</span> fgcolor <span class="sy0">|</span> <span class="br0">&#40;</span>fgcolor <span class="sy0">&lt;&lt;</span> <span class="nu0">8</span><span class="br0">&#41;</span> <span class="sy0">|</span> <span class="br0">&#40;</span>fgcolor <span class="sy0">&lt;&lt;</span> <span class="nu0">16</span><span class="br0">&#41;</span> <span class="sy0">|</span> <span class="br0">&#40;</span>fgcolor <span class="sy0">&lt;&lt;</span> <span class="nu0">24</span><span class="br0">&#41;</span><span class="sy0">;</span>
	bgcolor32 <span class="sy0">=</span> bgcolor <span class="sy0">|</span> <span class="br0">&#40;</span>bgcolor <span class="sy0">&lt;&lt;</span> <span class="nu0">8</span><span class="br0">&#41;</span> <span class="sy0">|</span> <span class="br0">&#40;</span>bgcolor <span class="sy0">&lt;&lt;</span> <span class="nu0">16</span><span class="br0">&#41;</span> <span class="sy0">|</span> <span class="br0">&#40;</span>bgcolor <span class="sy0">&lt;&lt;</span> <span class="nu0">24</span><span class="br0">&#41;</span><span class="sy0">;</span>
	src <span class="sy0">=</span> font <span class="sy0">+</span> c <span class="sy0">*</span> <span class="nu0">16</span><span class="sy0">;</span>
	dest <span class="sy0">=</span> videoBuffer <span class="sy0">+</span> y <span class="sy0">*</span> bytes_per_line <span class="sy0">+</span> x<span class="sy0">;</span>
	<span class="kw1">for</span><span class="br0">&#40;</span>row <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> row <span class="sy0">&lt;</span> <span class="nu0">16</span><span class="sy0">;</span> row<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="kw1">if</span><span class="br0">&#40;</span><span class="sy0">*</span>src <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
			mask_low <span class="sy0">=</span> mask_table<span class="br0">&#91;</span><span class="sy0">*</span>src<span class="br0">&#93;</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="sy0">;</span>
			mask_high <span class="sy0">=</span> mask_table<span class="br0">&#91;</span><span class="sy0">*</span>src<span class="br0">&#93;</span><span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="sy0">;</span>
			dest32 <span class="sy0">=</span> dest<span class="sy0">;</span>
			dest32<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#40;</span>bgcolor32 <span class="sy0">&amp;</span> ~mask_low<span class="br0">&#41;</span> <span class="sy0">|</span> <span class="br0">&#40;</span>fgcolor32 <span class="sy0">&amp;</span> mask_low<span class="br0">&#41;</span><span class="sy0">;</span>
			dest32<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#40;</span>bgcolor32 <span class="sy0">&amp;</span> ~mask_high<span class="br0">&#41;</span> <span class="sy0">|</span> <span class="br0">&#40;</span>fgcolor32 <span class="sy0">&amp;</span> mask_high<span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
		src<span class="sy0">++;</span>
		dest <span class="sy0">+=</span> bytes_per_line<span class="sy0">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&#160;
&#160;
<span class="kw4">void</span> drawchar_transparent_8BPP<span class="br0">&#40;</span><span class="kw4">unsigned</span> <span class="kw4">char</span> c<span class="sy0">,</span> <span class="kw4">int</span> x<span class="sy0">,</span> <span class="kw4">int</span> y<span class="sy0">,</span> <span class="kw4">int</span> fgcolor<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw4">void</span> <span class="sy0">*</span>dest<span class="sy0">;</span>
	<span class="kw4">uint32_t</span> <span class="sy0">*</span>dest32<span class="sy0">;</span>
	<span class="kw4">unsigned</span> <span class="kw4">char</span> <span class="sy0">*</span>src<span class="sy0">;</span>
	<span class="kw4">int</span> row<span class="sy0">;</span>
	<span class="kw4">uint32_t</span> fgcolor32<span class="sy0">;</span>
&#160;
	fgcolor32 <span class="sy0">=</span> fgcolor <span class="sy0">|</span> <span class="br0">&#40;</span>fgcolor <span class="sy0">&lt;&lt;</span> <span class="nu0">8</span><span class="br0">&#41;</span> <span class="sy0">|</span> <span class="br0">&#40;</span>fgcolor <span class="sy0">&lt;&lt;</span> <span class="nu0">16</span><span class="br0">&#41;</span> <span class="sy0">|</span> <span class="br0">&#40;</span>fgcolor <span class="sy0">&lt;&lt;</span> <span class="nu0">24</span><span class="br0">&#41;</span><span class="sy0">;</span>
	src <span class="sy0">=</span> font <span class="sy0">+</span> c <span class="sy0">*</span> <span class="nu0">16</span><span class="sy0">;</span>
	dest <span class="sy0">=</span> videoBuffer <span class="sy0">+</span> y <span class="sy0">*</span> bytes_per_line <span class="sy0">+</span> x<span class="sy0">;</span>
	<span class="kw1">for</span><span class="br0">&#40;</span>row <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> row <span class="sy0">&lt;</span> <span class="nu0">16</span><span class="sy0">;</span> row<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="kw1">if</span><span class="br0">&#40;</span><span class="sy0">*</span>src <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
			mask_low <span class="sy0">=</span> mask_table<span class="br0">&#91;</span><span class="sy0">*</span>src<span class="br0">&#93;</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="sy0">;</span>
			mask_high <span class="sy0">=</span> mask_table<span class="br0">&#91;</span><span class="sy0">*</span>src<span class="br0">&#93;</span><span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="sy0">;</span>
			dest32 <span class="sy0">=</span> dest<span class="sy0">;</span>
			dest32<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#40;</span>dest<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">&amp;</span> ~mask_low<span class="br0">&#41;</span> <span class="sy0">|</span> <span class="br0">&#40;</span>fgcolor32 <span class="sy0">&amp;</span> mask_low<span class="br0">&#41;</span><span class="sy0">;</span>
			dest32<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#40;</span>dest<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="sy0">&amp;</span> ~mask_high<span class="br0">&#41;</span> <span class="sy0">|</span> <span class="br0">&#40;</span>fgcolor32 <span class="sy0">&amp;</span> mask_high<span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
		src<span class="sy0">++;</span>
		dest <span class="sy0">+=</span> bytes_per_line<span class="sy0">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>In this case the address in display memory is only calculated once (rather than up to 128 times) and 8 pixels are done in parallel (which removes the inner loop completely).
</p><p>The main downside for this approach is that you need a different function for each "bits per pixel", except that 15-bpp and 16-bpp can use the same code. For worst case (32-bpp) the lookup table costs 8 KiB. The lookup table for 32-bpp can be re-used for 24-bpp, and for 4-bpp no lookup table is needed at all. To support all standard bit depths that VBE is capable of; this gives a total of 5 versions of each "draw character" function (4-bpp, 8-bpp, 15-bpp and 16-bpp, 24-bpp, 32-bpp) and 3 lookup tables (8-bpp, 15-bpp and 16-bpp, 24-bpp and 32-bpp) which cost a combined total of 14 KiB of data if you use static tables (rather than dynamically generating the desired lookup table if/when needed).
</p>
<h2> <span class="mw-headline" id="See_Also"> See Also </span></h2>
<ul><li> <a href="VGA_Hardware" title="VGA Hardware">VGA Hardware</a>
</li></ul>
<h2> <span class="mw-headline" id="External_Links"> External Links </span></h2>
<ul><li> <a rel="nofollow" class="external text" href="http://www.inp.nsk.su./~bolkhov/files/fonts/univga/">UNI-VGA</a> - A free Unicode VGA font (.bdf)
</li><li> <a rel="nofollow" class="external text" href="http://sourceforge.net/projects/bdf2c/">bdf2c</a> - .bdf font to C source converter.
</li></ul>

<!-- 
NewPP limit report
Preprocessor node count: 118/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3092-0!*!0!!en!*!* and timestamp 20180121043357 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=VGA_Fonts&amp;oldid=19989">http://wiki.osdev.org/index.php?title=VGA_Fonts&amp;oldid=19989</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="http://wiki.osdev.org/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="Category:VGA" title="Category:VGA">VGA</a></li><li><a href="Category:Video" title="Category:Video">Video</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=VGA_Fonts" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="VGA_Fonts"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk" class="new"><span><a href="http://wiki.osdev.org/index.php?title=Talk:VGA_Fonts&amp;action=edit&amp;redlink=1"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="VGA_Fonts#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="VGA_Fonts" >Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=VGA_Fonts&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=VGA_Fonts&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="VGA_Fonts#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="http://wiki.osdev.org/index.php" id="searchform">
		<input type='hidden' name="title" value="Special:Search"/>
				<input type="search" name="search" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput" />		<input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" />		<input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" />			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="/Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="/Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="/OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="/OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="/OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /abouskins/common/images/osdev.png);" href="/Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/VGA_Fonts" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/VGA_Fonts" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=VGA_Fonts&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=VGA_Fonts&amp;oldid=19989" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 15 December 2016, at 11:56.</li>
											<li id="footer-info-viewcount">This page has been accessed 34,654 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.041 secs. -->
	</body>
</html>
