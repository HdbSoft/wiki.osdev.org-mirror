<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>Segment Limits - OSDev Wiki</title>
<meta charset="UTF-8" />
<meta name="generator" content="MediaWiki 1.18.0" />
<link rel="canonical" href="Segment_Limits" />
<link rel="shortcut icon" href="favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "Segment_Limits", "wgTitle": "Segment Limits", "wgCurRevisionId": 19291, "wgArticleId": 3548, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["Memory management"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script>
<!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Segment_Limits action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">Segment Limits</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub">(Redirected from <a href="http://wiki.osdev.org/index.php?title=Expand_Down&amp;redirect=no" title="Expand Down">Expand Down</a>)</div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="Expand_Down#mw-head">navigation</a>,
					<a href="Expand_Down#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div lang="en" dir="ltr" class="mw-content-ltr"><table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Expand_Down#Protected_Mode"><span class="tocnumber">1</span> <span class="toctext">Protected Mode</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="Expand_Down#16-Bit_Entry"><span class="tocnumber">1.1</span> <span class="toctext">16-Bit Entry</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="Expand_Down#32-Bit_Entry"><span class="tocnumber">1.2</span> <span class="toctext">32-Bit Entry</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-4"><a href="Expand_Down#Segmentation"><span class="tocnumber">2</span> <span class="toctext">Segmentation</span></a>
<ul>
<li class="toclevel-2 tocsection-5"><a href="Expand_Down#Security"><span class="tocnumber">2.1</span> <span class="toctext">Security</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="Expand_Down#Code"><span class="tocnumber">2.2</span> <span class="toctext">Code</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="Expand_Down#Heap"><span class="tocnumber">2.3</span> <span class="toctext">Heap</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="Expand_Down#Stack"><span class="tocnumber">2.4</span> <span class="toctext">Stack</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-9"><a href="Expand_Down#Expand_Down"><span class="tocnumber">3</span> <span class="toctext">Expand Down</span></a>
<ul>
<li class="toclevel-2 tocsection-10"><a href="Expand_Down#16-Bit_Example"><span class="tocnumber">3.1</span> <span class="toctext">16-Bit Example</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="Expand_Down#32-Bit_Example"><span class="tocnumber">3.2</span> <span class="toctext">32-Bit Example</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-12"><a href="Expand_Down#Related_Articles"><span class="tocnumber">4</span> <span class="toctext">Related Articles</span></a></li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Protected_Mode"> Protected Mode </span></h1>
<p>In x86 Protected Mode, a Segment is described by two parameters, the Base address and the Limit:
</p>
<ul><li> The Base address is where in the CPU-addressable space the Segment starts;
</li><li> The Limit is the last Segment-relative address that can be accessed offset from the Base.
</li></ul>
<p>For example, a Memory Descriptor entry in the Global Descriptor Table may describe an Expand Up Data Descriptor starting at <code>0005_0000h</code> for <code>0000_C000h</code> - in other words, 48 kiB (+1 byte) in the middle of Conventional RAM.
</p><p>Given the above Descriptor assigned to the <code>DS</code> segment register, accessing a Byte at <code>[DS:0000_0000h]</code> or <code>[DS:0000_C000h]</code> will work, but <code>[DS:0000_C001h]</code> or above won't. The biggest advantage of this mechanism is that various offsets embedded in a program don't need to be "fixed up" at load time to cater for the load address of the program: since every offset is relative to a Segment's Base, the fix-ups are performed by the CPU at run time.
</p><p>While the Base address is affected by things like Paging (if enabled), the Limit is simply the number of contiguous bytes after that: any access higher than the Limit will cause a General Protection Fault. Unless the Descriptor is for an <a href="Expand_Down#Expand_Down">Expand Down</a> segment, in which case everything changes (see below)...
</p>
<h2> <span class="mw-headline" id="16-Bit_Entry"> 16-Bit Entry </span></h2>
<p>When Intel introduced Descriptor Tables in the 80286 (with 16-bit data but a 24-bit address bus), they defined one Entry to be 8 bytes. That made it easy to use a Segment Register as a Selector, with a couple of leftover bits as a GDT/LDT selector and Privilege Level selector. Of the 8 bytes, they only needed 6: 3 for the (24-bit maximum) Base, 2 for the (16-bit maximum) Limit, and 1 for the Entry's Type (Data vs Code vs System). They specified that the last two bytes of the eight were reserved, and must be zero.
</p><p>Since the Limit was 16 bits, Intel needed to decide how to interpret the edge conditions of 0 kiB and 64 kiB: would a Limit of <code>0000h</code> mean no access (what's the point of a zero-length Segment?) or full access (all 64 kiB available)? So (of course) they chose the third option: the Limit would be the last <em>accessible</em> byte. A Limit of <code>0000h</code> allowed only 1 accessible address, while <code>FFFFh</code> allowed all of them.
</p>
<h2> <span class="mw-headline" id="32-Bit_Entry"> 32-Bit Entry </span></h2>
<p>When Intel introduced the 32-bit 80386 (with both 32-bit data and address buses), they had a problem. They needed one more byte to hold the new 32-bit Base, but <em>two</em> more bytes to hold the new 32-bit Limit - and they only had two bytes spare. They still wanted to be backward-compatible and run existing 80286 software unchanged, but they also wanted to take full advantage of the new 32-bit addresses.
</p><p>But Intel realised that when dealing with really large Segments, a programmer wouldn't be agonizing over whether it should be 12,086,384 or 12,086,385 bytes in size. At those sorts of sizes - <em>especially</em> with the '386's new paging functionality - a programmer would be working at a higher granularity: in 4 kiB Pages rather than bytes. A Page needs 12 bits to address into, so if the Limit field was marked as Page-granular rather than byte-granular, it would only need to be (32-12=) 20 bits in size - and 16 were already defined!
</p><p>So they made a compromise in the Descriptor Table Entry. They did add an extra byte for the Base, making it fully 32-bit addressable, but they turned the last available byte into a compound Limit-with-Flags record. The last four bits required for the maximum-sized Limit was the low nybble of that byte, and the high nybble was used for two flags, called Gran and Big:
</p>
<ul><li> Gran is obvious - it indicates whether to use byte-granular (=0) or Page-granular (=1) calculations on the Limit. With a 20-bit Limit in byte-granular mode, it is possible to fine-tune a Segment to anything from 1 byte to 1 MiB. In Page-granular mode, you can specify anything from 4 kiB to 4 GiB in 4 kiB jumps. The 20-bit Limit is shifted 12 bits to the left, and <code>1</code>s are shifted in. A Page-granular Limit of <code>0_0000h</code> actually means <code>0000_0FFFh</code>.
</li><li> Big is less obvious - it indicates whether addresses used by implicit registers will be 16-bit (=0) or 32-bit (=1). What are implicit registers? There are only two: <code>(E)IP</code> and <code>(E)SP</code>. When used for a Code segment, instructions are fetched by either <code>IP</code> or <code>EIP</code>. When used for a Stack, values are pushed using either <code>SP</code> or <code>ESP</code>. The Big flag indicates which one.<br />Incidentally, when used in a Code Descriptor, the Big flag is also known as the Default flag. It sets the Default 16- or 32-bit mode that instructions will be interpreted by, when executed in this Segment. For example, the <code>B8h</code> op-code under a Default=0 Code Segment means <code>MOV AX,...</code> and needs to be followed by 2 bytes for the 16-bit value to load. Under a Default=1 Code Segment it means <code>MOV EAX,...</code> and needs to be followed by 4 bytes for the 32-bit value to load. The <code>OpSiz (66h)</code> and <code>AdSiz (67h)</code> instruction prefixes toggle the current Default interpretation.
</li></ul>
<p>The effect of the Big flag is subtle: it influences things like in Code Segments the size of the value pushed during a <code>CALL</code>, and in Data Segments the Segment wrap for Stacks - if <code>ESP</code> is <code>0000_0000h</code>, a <code>PUSH EAX</code> will make <code>ESP</code> either <code>0000_FFFCh</code> or <code>FFFF_FFFCh</code> depending on that flag - which doesn't mean much until you get to <a href="Expand_Down#Expand_Down">Expand Down</a> Segments.
</p>
<h1> <span class="mw-headline" id="Segmentation"> Segmentation </span></h1>
<p>Segmentation has its detractors. Indeed, most Operating Systems today don't use it - or at least only the minimum vestigial references as required by the architecture. However, the OS then doesn't have the hardware security features inherent in Segmentation; it must perform address fix-ups at load time; and shared code becomes a nightmare. Segmentation solves all of this - abandoning it means that the OS has to duplicate the work.
</p><p>Some examples might make things clearer.
</p>
<h2> <span class="mw-headline" id="Security"> Security </span></h2>
<p>Many of today's security bugs (and probably application bugs too) are as a result of invalid memory accesses. Whether that's through buffer under/overflows or random pointers, many security-related flaws involve accessing memory that weren't designed to be accessed. To (attempt to) counter these, all sorts of systems have been invented: <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/Address_space_layout_randomization%7C">Address Space Layout Randomisation (ASLR)</a>; stack canaries/guard pages; deny execute access; et al. These are designed to limit the damage that accidental or malicious memory references can wreak - and often don't completely work.
</p><p>The point is that Segmentation already protected against all of that! No memory access (even by the kernel) can go beyond the associated data: you can't overflow the Stack to modify Heap data; or write data then execute it as code. While it is still possible to do these tricky things, by default Segmentation <i><b>disables</b></i> this, whereas the flat memory model perforce by default enables it.
</p>
<h2> <span class="mw-headline" id="Code"> Code </span></h2>
<p>When you write code, you don't usually care (or need to know) where the code ends up in memory. In fact, the latest OSes actually <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/Address_space_layout_randomization%7C"><i>randomise</i></a> where code goes to prevent malicious use of that knowledge.
</p><p>So at compile time the linker arbitrary allocates memory locations as needed, and writes a table for the OS Loader to reference when it loads the code into memory. The main program usually gets loaded at the same place in the Virtual Address Space - but (dynamically linked) libraries may not be. If two libraries are linked with overlapping addresses, then the OS Loader has to perform a "fix-up" at load time, adding a delta to each and every embedded code reference to accommodate the change in load location. This slows down the application launch process with housekeeping. Worse, that also means that you can't "page out" the code when RAM gets tight without either writing that code to the Page File, or re-fixing it up when loading it back again.
</p><p>How does Segmentation fix this? The code can refer to relative Segment locations rather than absolute memory locations. You want to jump to a routine? Reference the Segment number and the offset within that Segment. The (local) Segment can be fixed at link time - all the relative references don't change, regardless of where the code is loaded. The OS Loader can place the code at whatever absolute address it likes - it just fills in the appropriate Local Descriptor Table entry with the address - the actual code doesn't have to change. Need to page out the code and reload it? Use whatever new absolute address you like, since the Segment address doesn't change - no fix-ups required.
</p>
<h2> <span class="mw-headline" id="Heap"> Heap </span></h2>
<p>Imagine that you define a Heap to be 4 kiB in size. You put it in its own Segment, and allow the program to <code>alloc()</code> and <code>free()</code> chunks of memory from it. If an <code>alloc()</code> comes through for more memory than is available, the code has two choices:
</p>
<ul><li> It can deny the request;
</li><li> It can increase the Segment size, which may require moving the whole Segment to a new area of RAM.
</li></ul>
<p>This second option is where the beauty of Segmentation comes in: after the move, the Segment's Base address can be modified to point to the new memory <i><b>and the calling program doesn't know anything happened</b></i>. It still accesses the Heap with the same Selector value, and unless it uses the <code>LSL</code> (Load Segment Limit) instruction, it won't even know that the Segment grew.
</p>
<h2> <span class="mw-headline" id="Stack"> Stack </span></h2>
<p>The point is that growing a Heap doesn't affect any of the offsets in the original data: even the stored Selector value doesn't change. Unfortunately, the same is not true for Stacks.
</p><p>Now imagine that you define a 4 kiB Stack. Again it is in its own Segment, and <code>SP</code> starts at <code>1000h</code> and works its way downwards. When it hits <code>0000h</code> it's a valid address - but one more <code>PUSH</code> will make <code>SP</code> overflow the Limit. At this point the code has two choices:
</p>
<ul><li> It can abort the program due to lack of Stack space;
</li><li> It can increase the Stack's size, which again may require moving the whole Segment to a new area of RAM.
</li></ul>
<p>The move is again not a problem: change the Segment's Base and it's done. But the Limit is the problem: there's nowhere for the Stack to grow to! Just increasing the Limit won't do anything: the Stack is at the bottom of the Segment, not the top. And moving all the data inside the Stack to the top of the new Segment <em>really</em> won't work: it will muck up all the saved offsets, since (for example) <code>1000h</code> needs to become <code>2000h</code> - but which values need to be changed? And what about the values stored in the program's registers? Which of those should be changed?
</p>
<h1> <span class="mw-headline" id="Expand_Down"> Expand Down </span></h1>
<p>So in short, growing a Stack like you can a Heap (described <a href="Expand_Down#Heap">above</a>) can't be done. At least, not using traditional Data Segments anyway, which is why Intel designed Expand Down Segments. As it sounds, they're designed to be used with Stacks to permit them to be expanded during run-time. Just by setting a single bit in the Descriptor Table Entry's Type field changes the interpretation of the whole Data Segment completely.
</p><p>There are two ways to look at Expand Down Segments:
</p>
<ul><li> Valid vs Invalid:
<ul><li> An Expand Up Segment uses the Limit to define valid and invalid addresses above Base;
</li><li> The Expand Down flag swaps them, making the once-valid addresses invalid, and vice versa.
</li></ul>
</li><li> Arithmetically:
<ul><li> An Expand Up Segment defines the Base and the largest possible offset you're allowed to add to that Base:
</li><li> The Expand Down flag for a 32-bit Segment makes the Base actually the <em>top</em> of the accessed memory, and the Limit (+1) becomes the lowest possible offset you can access <em>below</em> that.<br />This is slightly incorrect since the CPU is still adding the offset to the Base - but since the offset is so large it's effectively negative, resulting in a <em>smaller</em> final address.
</li><li> The Expand Down flag for a 16-bit Segment has the Base 64 kiB <em>below</em> the highest accessible address.
</li></ul>
</li></ul>
<h2> <span class="mw-headline" id="16-Bit_Example"> 16-Bit Example </span></h2>
<p>So a 16-bit Stack of 1 kiB with a Base address of <code>05_0000h</code> and a Limit of <code>FC00h</code> (marked Expand Down, of course) would <em>start</em> with an <code>SP</code> of <code>0000h</code> - which may look worrying to some programmers. But it's perfectly safe: the first <code>PUSH AX</code> or <code>CALL</code> would make <code>SP</code> <code>FFFEh</code> and store the value there, which would actually store the value at RAM location <code>05_FFFEh</code>. Subsequent Stack operations would continue to decrease <code>SP</code> until it hit the value <code>FC00h</code> - where an access would cause a Stack Fault.
</p><p>The sharp-eyed among you will have seen the difference: an Expand Up Segment's Limit is inclusive - the specified Limit is still an accessible byte. That means that in an Expand Down Segment, the Limit is <em>ex</em>clusive - it is effectively the highest address that <em>cannot</em> be accessed. So a better Limit for the above example would be <code>FBFFh</code>.
</p><p>And now "growing" the Stack is easy: decrease the Limit as desired, and move the memory if necessary (not forgetting that Base is 64 kiB below the top of the area of memory that contains the data). Again, none of the offsets inside the Stack need to be modified.
</p>
<h2> <span class="mw-headline" id="32-Bit_Example"> 32-Bit Example </span></h2>
<p>A 32-bit Expand Down Segment follows on from the 16-bit version exactly, but now the 64 kiB mathematics becomes 4 GiB mathematics - which is the size of the address space! Thus, the Base can be seen as the <em>top</em> of the accessed memory, and the Limit is the highest <em>in</em>accessible location <em>below</em> that. The problem comes from the fact that the Limit only has 20 bits of resolution, and the Gran flag can't help us now.
</p><p>The <a href="Expand_Down#16-Bit_Example">16-bit example</a> above specified a 1 kiB Stack with a starting Limit of <code>FC00h</code> (later adjusted to <code>FBFFh</code> as explained). The 32-bit equivalent would be <code>FFFF_FBFF</code> - but that won't fit inside the 20-bit Limit field! And specifying it as Page-granular with the Gran flag won't help either - 20 bits means either <code>F_FFFFh</code> or <code>F_FFFEh</code>, which when shifted would become <code>FFFF_FFFFh</code> and <code>FFFF_EFFFh</code> respectively.
</p><p>I find everything to do with 32-bit (Big) Expand Down Segments humorous:
</p>
<ul><li> A Page-granular Limit of <code>F_FFFFh</code> defines a Segment whose highest <em>in</em>accessible address is <code>FFFF_FFFFh</code> - in other words, nothing is accessible!
</li><li> A byte-granular Limit of <code>0_0000h</code> defines a Segment whose highest <em>in</em>accessible address is <code>0000_0000h</code> - in other words, the lowest byte is not accessible!
</li><li> A byte-granular Limit of <code>0_FFFFh</code> defines a Segment whose lowest accessible address is 64 kiB - and everything above!
</li></ul>
<p>In other words, you can specify the size of a Stack to the <em>byte</em> - as long as you want it somewhere between 3.999 and 4.0 GiB in size. If you only want a 6 kiB Stack though, you either have to:
</p>
<ul><li> Use the Gran bit, rounding off the size to 4 kiB chunks (4 or 8 kiB instead of 6); or
</li><li> Use a 16-bit entry (Big=0, using <code>SP</code> rather then <code>ESP</code>) with a maximum Limit of only 64 kiB. Sizes between 64 kiB and 1 MiB that can be specified to the <em>byte</em> in Expand Up Segments aren't available with Expand Down ones.
</li></ul>
<h1> <span class="mw-headline" id="Related_Articles"> Related Articles </span></h1>
<ul><li> <a href="Segmentation" title="Segmentation">Segmentation</a>
</li><li> <a href="GDT" title="GDT" class="mw-redirect">GDT</a>
</li></ul>

<!-- 
NewPP limit report
Preprocessor node count: 68/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3548-0!*!0!!en!*!* and timestamp 20180121064203 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=Segment_Limits&amp;oldid=19291#Expand_Down">http://wiki.osdev.org/index.php?title=Segment_Limits&amp;oldid=19291#Expand_Down</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="http://wiki.osdev.org/Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="Category:Memory_management" title="Category:Memory management">Memory management</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Segment_Limits" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="Segment_Limits"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk" class="new"><span><a href="http://wiki.osdev.org/index.php?title=Talk:Segment_Limits&amp;action=edit&amp;redlink=1"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="Expand_Down#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="Segment_Limits" >Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=Segment_Limits&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=Segment_Limits&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="Expand_Down#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="http://wiki.osdev.org/index.php" id="searchform">
		<input type='hidden' name="title" value="Special:Search"/>
				<input type="search" name="search" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput" />		<input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" />		<input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" />			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="/Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="/Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="/OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="/OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="/OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="/Special:WhatLinksHere/Segment_Limits" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="/Special:RecentChangesLinked/Segment_Limits" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="/index.php?title=Segment_Limits&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="/index.php?title=Segment_Limits&amp;oldid=19291" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modifskins/common/images/osdev.png);" href="/Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/Segment_Limits" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/Segment_Limits" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=Segment_Limits&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=Segment_Limits&amp;oldid=19291" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 30 May 2016, at 04:06.</li>
											<li id="footer-info-viewcount">This page has been accessed 12,076 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script>
<script>
redirectToFragment("#Expand_Down");
</script>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.033 secs. -->
	</body>
</html>
