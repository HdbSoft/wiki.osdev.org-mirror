<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>ARM Integrator-CP IRQTimerPICTasksMMAndMods - OSDev Wiki</title>
<meta charset="UTF-8" />
<meta name="generator" content="MediaWiki 1.18.0" />
<link rel="shortcut icon" href="favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "ARM_Integrator-CP_IRQTimerPICTasksMMAndMods", "wgTitle": "ARM Integrator-CP IRQTimerPICTasksMMAndMods", "wgCurRevisionId": 16312, "wgArticleId": 3483, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": [], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script>
<style type="text/css">/*<![CDATA[*/
.source-python {line-height: normal;}
.source-python li, .source-python pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for python
 * CSS class: source-python, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.python.source-python .de1, .python.source-python .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.python.source-python  {font-family:monospace;}
.python.source-python .imp {font-weight: bold; color: red;}
.python.source-python li, .python.source-python .li1 {font-weight: normal; vertical-align:top;}
.python.source-python .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.python.source-python .li2 {font-weight: bold; vertical-align:top;}
.python.source-python .kw1 {color: #ff7700;font-weight:bold;}
.python.source-python .kw2 {color: #008000;}
.python.source-python .kw3 {color: #dc143c;}
.python.source-python .kw4 {color: #0000cd;}
.python.source-python .co1 {color: #808080; font-style: italic;}
.python.source-python .coMULTI {color: #808080; font-style: italic;}
.python.source-python .es0 {color: #000099; font-weight: bold;}
.python.source-python .br0 {color: black;}
.python.source-python .sy0 {color: #66cc66;}
.python.source-python .st0 {color: #483d8b;}
.python.source-python .nu0 {color: #ff4500;}
.python.source-python .me1 {color: black;}
.python.source-python .ln-xtra, .python.source-python li.ln-xtra, .python.source-python div.ln-xtra {background-color: #ffc;}
.python.source-python span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #b1b100;}
.c.source-c .kw2 {color: #000000; font-weight: bold;}
.c.source-c .kw3 {color: #000066;}
.c.source-c .kw4 {color: #993333;}
.c.source-c .co1 {color: #666666; font-style: italic;}
.c.source-c .co2 {color: #339933;}
.c.source-c .coMULTI {color: #808080; font-style: italic;}
.c.source-c .es0 {color: #000099; font-weight: bold;}
.c.source-c .es1 {color: #000099; font-weight: bold;}
.c.source-c .es2 {color: #660099; font-weight: bold;}
.c.source-c .es3 {color: #660099; font-weight: bold;}
.c.source-c .es4 {color: #660099; font-weight: bold;}
.c.source-c .es5 {color: #006699; font-weight: bold;}
.c.source-c .br0 {color: #009900;}
.c.source-c .sy0 {color: #339933;}
.c.source-c .st0 {color: #ff0000;}
.c.source-c .nu0 {color: #0000dd;}
.c.source-c .nu6 {color: #208080;}
.c.source-c .nu8 {color: #208080;}
.c.source-c .nu12 {color: #208080;}
.c.source-c .nu16 {color:#800080;}
.c.source-c .nu17 {color:#800080;}
.c.source-c .nu18 {color:#800080;}
.c.source-c .nu19 {color:#800080;}
.c.source-c .me1 {color: #202020;}
.c.source-c .me2 {color: #202020;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-ARM_Integrator-CP_IRQTimerPICTasksMMAndMods action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">ARM Integrator-CP IRQTimerPICTasksMMAndMods</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="ARM_Integrator-CP_IRQTimerPICTasksMMAndMods#mw-head">navigation</a>,
					<a href="ARM_Integrator-CP_IRQTimerPICTasksMMAndMods#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div lang="en" dir="ltr" class="mw-content-ltr"><table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="ARM_Integrator-CP_IRQTimerPICTasksMMAndMods#ARM_Integrator-CP_IRQ.2C_Timer.2C_PIC.2C_Tasks.2C_Modules.2C_And_ELF32"><span class="tocnumber">1</span> <span class="toctext">ARM Integrator-CP IRQ, Timer, PIC, Tasks, Modules, And ELF32</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="ARM_Integrator-CP_IRQTimerPICTasksMMAndMods#Author"><span class="tocnumber">1.1</span> <span class="toctext">Author</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="ARM_Integrator-CP_IRQTimerPICTasksMMAndMods#Intro"><span class="tocnumber">1.2</span> <span class="toctext">Intro</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="ARM_Integrator-CP_IRQTimerPICTasksMMAndMods#Attaching_A_Module"><span class="tocnumber">1.3</span> <span class="toctext">Attaching A Module</span></a>
<ul>
<li class="toclevel-3 tocsection-5"><a href="ARM_Integrator-CP_IRQTimerPICTasksMMAndMods#Python_Script"><span class="tocnumber">1.3.1</span> <span class="toctext">Python Script</span></a></li>
<li class="toclevel-3 tocsection-6"><a href="ARM_Integrator-CP_IRQTimerPICTasksMMAndMods#Module_Enumeration_Code"><span class="tocnumber">1.3.2</span> <span class="toctext">Module Enumeration Code</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-7"><a href="ARM_Integrator-CP_IRQTimerPICTasksMMAndMods#Loading_An_Elf_Module"><span class="tocnumber">1.4</span> <span class="toctext">Loading An Elf Module</span></a>
<ul>
<li class="toclevel-3 tocsection-8"><a href="ARM_Integrator-CP_IRQTimerPICTasksMMAndMods#ELF_Binary_Code"><span class="tocnumber">1.4.1</span> <span class="toctext">ELF Binary Code</span></a></li>
<li class="toclevel-3 tocsection-9"><a href="ARM_Integrator-CP_IRQTimerPICTasksMMAndMods#Kernel_Code"><span class="tocnumber">1.4.2</span> <span class="toctext">Kernel Code</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-10"><a href="ARM_Integrator-CP_IRQTimerPICTasksMMAndMods#Full_Source"><span class="tocnumber">2</span> <span class="toctext">Full Source</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="ARM_Integrator-CP_IRQTimerPICTasksMMAndMods#Going_Further"><span class="tocnumber">3</span> <span class="toctext">Going Further</span></a></li>
</ul>
</td></tr></table>
<h2> <span class="mw-headline" id="ARM_Integrator-CP_IRQ.2C_Timer.2C_PIC.2C_Tasks.2C_Modules.2C_And_ELF32"> ARM Integrator-CP IRQ, Timer, PIC, Tasks, Modules, And ELF32 </span></h2>
<table class="wikitable">
<tr>
<th> Page
</th>
<th> Description
</th></tr>
<tr>
<td> <a href="ARM_Integrator-CP_IRQTimerAndPIC" title="ARM Integrator-CP IRQTimerAndPIC">IRQ, Timer, And PIC</a>
</td>
<td> This demonstration just uses the IRQ, Timer, And PIC.
</td></tr>
<tr>
<td> <a href="ARM_Integrator-CP_IRQTimerAndPICAndTaskSwitch" title="ARM Integrator-CP IRQTimerAndPICAndTaskSwitch">IRQ, Timer, PIC, And Tasks</a>
</td>
<td> This shows how to switch between tasks using the timer, and builds from the previous page.
</td></tr>
<tr>
<td> <a href="http://wiki.osdev.org/User:Pancakes/ARM_Integrator-CP_IRQTimerPICTasksAndMM" title="User:Pancakes/ARM Integrator-CP IRQTimerPICTasksAndMM">IRQ, Timer, PIC, Tasks, And MM</a>
</td>
<td> This shows how to integrate virtual memory, and builds from the previous page.
</td></tr>
<tr>
<td> <a href="http://wiki.osdev.org/User:Pancakes/ARM_Integrator-CP_VMM2" title="User:Pancakes/ARM Integrator-CP VMM2">Virtual Memory With Paged Kernel</a>
</td>
<td> This shows a method to have kernel space paged.
</td></tr></table>
<h3> <span class="mw-headline" id="Author"> Author </span></h3>
<p>I <a href="http://wiki.osdev.org/User:Pancakes" title="User:Pancakes">Pancakes</a> wrote this to help jump start you into developing for the ARM using QEMU or even a real piece of hardware. I have wrote software for both emulators and real hardware, but this has only been tested on QEMU so far. Please make any needed changes if you find problems. Also let me know at <a rel="nofollow" class="external text" href="mailto:kmcg3413@gmail.com">kmcg3413@gmail.com</a> if you find this useful, have comments, or suggestions.
</p><p><br />
</p>
<h3> <span class="mw-headline" id="Intro"> Intro </span></h3>
<p>You should be coming from one of the previous pages. I prefer the last one if you have been
following along. Well, the moment has arrived. You are now ready to see a method of attaching
some modules and even a demonstration of loading a ELF32 module into user space. 
</p><p>First we will cover the method to attach files to the end of the kernel image. Then we will look
at loading an ELF32 module into user space.
</p>
<h3> <span class="mw-headline" id="Attaching_A_Module"> Attaching A Module </span></h3>
<h4> <span class="mw-headline" id="Python_Script"> Python Script </span></h4>
<p>This scripts pads the module to a 32-bit boundary so reads will be aligned, and inserts the
special header so it can be located. The header contains a few fields, see C code further down to see a structure defined for the header. The module can present it's own fields in the header through the <i>slots</i> field.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="python source-python"><pre class="de1"><span class="co1">#!/usr/bin/python3</span>
<span class="kw1">import</span> <span class="kw3">sys</span>
<span class="kw1">import</span> <span class="kw3">struct</span>
&#160;
<span class="kw1">def</span> attach<span class="br0">&#40;</span>srcf<span class="sy0">,</span> dstf<span class="sy0">,</span> typf<span class="br0">&#41;</span>:
	sfd <span class="sy0">=</span> <span class="kw2">open</span><span class="br0">&#40;</span>srcf<span class="sy0">,</span> <span class="st0">&quot;rb&quot;</span><span class="br0">&#41;</span>
	sfd.<span class="me1">seek</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">2</span><span class="br0">&#41;</span>
	sz <span class="sy0">=</span> sfd.<span class="me1">tell</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
	sfd.<span class="me1">seek</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">0</span><span class="br0">&#41;</span>
	sd <span class="sy0">=</span> sfd.<span class="me1">read</span><span class="br0">&#40;</span>sz<span class="br0">&#41;</span>
	sfd.<span class="me1">close</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&#160;
	pad <span class="sy0">=</span> <span class="kw2">len</span><span class="br0">&#40;</span>sd<span class="br0">&#41;</span> &amp; <span class="nu0">3</span>
	<span class="kw1">if</span> pad <span class="sy0">&gt;</span> <span class="nu0">0</span>:
		pad <span class="sy0">=</span> <span class="nu0">4</span> - pad
	<span class="kw1">else</span>:
		pad <span class="sy0">=</span> <span class="nu0">0</span>
&#160;
	dfd <span class="sy0">=</span> <span class="kw2">open</span><span class="br0">&#40;</span>dstf<span class="sy0">,</span> <span class="st0">&quot;r+b&quot;</span><span class="br0">&#41;</span>
	dfd.<span class="me1">seek</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">2</span><span class="br0">&#41;</span>
	psz <span class="sy0">=</span> dfd.<span class="me1">tell</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
	ppad <span class="sy0">=</span> psz &amp; <span class="nu0">3</span>
	<span class="kw1">if</span> ppad <span class="sy0">&gt;</span> <span class="nu0">0</span>:
		ppad <span class="sy0">=</span> <span class="nu0">4</span> - ppad
	<span class="kw1">else</span>:
		ppad <span class="sy0">=</span> <span class="nu0">0</span>
	dfd.<span class="me1">write</span><span class="br0">&#40;</span>b<span class="st0">'B'</span> * ppad<span class="br0">&#41;</span>
	dfd.<span class="me1">write</span><span class="br0">&#40;</span><span class="kw3">struct</span>.<span class="me1">pack</span><span class="br0">&#40;</span><span class="st0">'IIII'</span><span class="sy0">,</span> sz + pad<span class="sy0">,</span> <span class="nu0">0x12345678</span><span class="sy0">,</span> <span class="nu0">0xedcba987</span><span class="sy0">,</span> <span class="kw2">int</span><span class="br0">&#40;</span>typf<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
	dfd.<span class="me1">write</span><span class="br0">&#40;</span>sd<span class="br0">&#41;</span>
	<span class="co1">#print('sz+pad=%s'&#160;% (sz + pad))</span>
	<span class="kw1">if</span> pad <span class="sy0">&gt;</span> <span class="nu0">0</span>:
		dfd.<span class="me1">write</span><span class="br0">&#40;</span>b<span class="st0">'A'</span> * pad<span class="br0">&#41;</span>
	<span class="co1">#print('[ATTACHMOD] spad:%s tpad:%s&#160;%s [%s bytes] ----&gt;&#160;%s (old sz:%s new sz:%s)'&#160;% (pad, ppad, srcf, sz, dstf,  hex(psz), hex(dfd.tell())))</span>
	dfd.<span class="me1">close</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
	<span class="kw1">return</span> sz
&#160;
srcf <span class="sy0">=</span> <span class="kw3">sys</span>.<span class="me1">argv</span><span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>
dstf <span class="sy0">=</span> <span class="kw3">sys</span>.<span class="me1">argv</span><span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span>
typf <span class="sy0">=</span> <span class="kw3">sys</span>.<span class="me1">argv</span><span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span>
&#160;
attach<span class="br0">&#40;</span>srcf<span class="sy0">,</span> dstf<span class="sy0">,</span> typf<span class="br0">&#41;</span></pre></div></div>
<p>To attach a module you could do something like this:
</p>
<pre>
    ./attachmod.py mymodule mykernelimage 1
</pre>
<p>Where 1 is a 32-bit integer value. I use the value one in the kernel code further down to
determine if it is an ELF32 module and if so I load it into a newly created user address space.
</p>
<h4> <span class="mw-headline" id="Module_Enumeration_Code"> Module Enumeration Code </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#ifndef KMOD_H</span>
<span class="co2">#define KMOD_H</span>
<span class="co2">#include &quot;stdtypes.h&quot;</span>
&#160;
<span class="kw4">typedef</span> <span class="kw4">struct</span> _KATTMOD <span class="br0">&#123;</span>
	<span class="kw4">uint32</span>			size<span class="sy0">;</span>
	<span class="kw4">uint32</span>			signatureA<span class="sy0">;</span>
	<span class="kw4">uint32</span>			signatureB<span class="sy0">;</span>
	<span class="kw4">uint32</span>			type<span class="sy0">;</span>
	<span class="kw4">uint32</span>			slot<span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">;</span>
<span class="br0">&#125;</span> KATTMOD<span class="sy0">;</span>
&#160;
KATTMOD <span class="sy0">*</span>kPkgGetNextMod<span class="br0">&#40;</span>KATTMOD <span class="sy0">*</span>mod<span class="br0">&#41;</span><span class="sy0">;</span>
KATTMOD <span class="sy0">*</span>kPkgGetFirstMod<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
uintptr kPkgGetTotalLength<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="co2">#endif</span>
&#160;
<span class="co2">#include &quot;kmod.h&quot;</span>
&#160;
<span class="kw2">extern</span> <span class="kw4">uint8</span> _EOI<span class="sy0">;</span>
&#160;
<span class="coMULTI">/*
	Get the next module after the specified module.
*/</span>
KATTMOD <span class="sy0">*</span>kPkgGetNextMod<span class="br0">&#40;</span>KATTMOD <span class="sy0">*</span>mod<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	KATTMOD		<span class="sy0">*</span>n<span class="sy0">;</span>
&#160;
	n <span class="sy0">=</span> <span class="br0">&#40;</span>KATTMOD<span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>uintptr<span class="br0">&#41;</span>mod <span class="sy0">+</span> mod<span class="sy0">-&gt;</span>size <span class="sy0">+</span> <span class="kw4">sizeof</span><span class="br0">&#40;</span>KATTMOD<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
	<span class="coMULTI">/* make sure there actually exists another module after this one */</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>n<span class="sy0">-&gt;</span>signatureA <span class="sy0">!=</span> <span class="nu12">0x12345678</span> <span class="sy0">||</span> ~n<span class="sy0">-&gt;</span>signatureA <span class="sy0">!=</span> n<span class="sy0">-&gt;</span>signatureB<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		kprintf<span class="br0">&#40;</span><span class="st0">&quot;next mod not found<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">return</span> n<span class="sy0">;</span>
<span class="br0">&#125;</span>
&#160;
uintptr kPkgGetTotalLength<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
	KATTMOD			<span class="sy0">*</span>m<span class="sy0">,</span> <span class="sy0">*</span>lm<span class="sy0">;</span>
&#160;
	lm <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
	<span class="kw1">for</span> <span class="br0">&#40;</span>m <span class="sy0">=</span> kPkgGetFirstMod<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> m<span class="sy0">;</span> m <span class="sy0">=</span> kPkgGetNextMod<span class="br0">&#40;</span>m<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		lm <span class="sy0">=</span> m<span class="sy0">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>lm<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="kw1">return</span> <span class="br0">&#40;</span>uintptr<span class="br0">&#41;</span><span class="sy0">&amp;</span>_EOI<span class="sy0">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">return</span> lm<span class="sy0">-&gt;</span>size <span class="sy0">+</span> <span class="br0">&#40;</span>uintptr<span class="br0">&#41;</span>lm <span class="sy0">+</span> <span class="kw4">sizeof</span><span class="br0">&#40;</span>KATTMOD<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="coMULTI">/*
	Locate first module, if any exists, at end of our image.
*/</span>
KATTMOD <span class="sy0">*</span>kPkgGetFirstMod<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">uint32</span>		<span class="sy0">*</span>p<span class="sy0">;</span>
	<span class="kw4">uint32</span>		x<span class="sy0">;</span>
	uintptr		_p<span class="sy0">;</span>
&#160;
	_p <span class="sy0">=</span> <span class="br0">&#40;</span>uintptr<span class="br0">&#41;</span><span class="sy0">&amp;</span>_EOI <span class="sy0">-</span> <span class="nu0">4</span> <span class="sy0">*</span> <span class="nu0">20</span><span class="sy0">;</span>
        <span class="coMULTI">/* OR... _p = (uintptr)&amp;kPkgGetFirstMod - 4 * 20.. if not _EOI symbol 
&#160;
          With GCC and -Os the code below might emit the signature. So you might
          need to create a dummy function below this one (should come after this
          one in text section), and reference that instead. With _EOI symbol you
          should have no problems unless this function appears with in the range
          and your using GCC -Os (optimize for size)
        */</span>
	_p <span class="sy0">=</span> _p <span class="sy0">&amp;</span> ~<span class="nu12">0x3</span><span class="sy0">;</span>
&#160;
	<span class="coMULTI">/* find signature of first module */</span>
	<span class="kw1">for</span> <span class="br0">&#40;</span>p <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">uint32</span><span class="sy0">*</span><span class="br0">&#41;</span>_p<span class="sy0">,</span> x <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> x <span class="sy0">&lt;</span> <span class="nu0">256</span><span class="sy0">;</span> <span class="sy0">++</span>x<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="coMULTI">/*
			This is a very tricky situation. We do not want the compiler
			to emit these sequence of bytes neither through an immediate
			operand or through optimization.
		*/</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span>p<span class="br0">&#91;</span>x<span class="br0">&#93;</span> <span class="sy0">==</span> <span class="nu12">0x12345678</span> <span class="sy0">&amp;&amp;</span> p<span class="br0">&#91;</span>x <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">&#93;</span> <span class="sy0">==</span> ~p<span class="br0">&#91;</span>x<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="coMULTI">/* backup 32-bits (4 bytes) so we grab the size placed by attachmod.py */</span>
			<span class="kw1">return</span> <span class="br0">&#40;</span>KATTMOD<span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>p<span class="br0">&#91;</span>x <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">&#93;</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>To enumerate modules attached to the image:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1">        KATTMOD   <span class="sy0">*</span>m<span class="sy0">;</span>
&#160;
	<span class="kw1">for</span> <span class="br0">&#40;</span>m <span class="sy0">=</span> kPkgGetFirstMod<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> m<span class="sy0">;</span> m <span class="sy0">=</span> kPkgGetNextMod<span class="br0">&#40;</span>m<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="br0">&#125;</span></pre></div></div>
<h3> <span class="mw-headline" id="Loading_An_Elf_Module"> Loading An Elf Module </span></h3>
<p>The code below is the absolute minimal needed to load an ELF32 into memory. It skips a lot of
checks and other advanced features.
</p>
<h4> <span class="mw-headline" id="ELF_Binary_Code"> ELF Binary Code </span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">int</span> _start<span class="br0">&#40;</span><span class="kw4">unsigned</span> <span class="kw4">int</span> <span class="sy0">*</span>smmio<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">int</span>		x<span class="sy0">;</span>
&#160;
	<span class="kw1">for</span> <span class="br0">&#40;</span><span class="sy0">;;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="kw1">for</span> <span class="br0">&#40;</span>x <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> x <span class="sy0">&lt;</span> <span class="nu12">0xfffff</span><span class="sy0">;</span> <span class="sy0">++</span>x<span class="br0">&#41;</span><span class="sy0">;</span>
		smmio<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st0">'G'</span><span class="sy0">;</span>
		smmio<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st0">'K'</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>To compile:
</p>
<pre>
arm-eabi-gcc -nostdlib -nostartfiles -ffreestanding -std=gnu99 main.c -o main 
arm-eabi-ld main.o -o main -Ttext 0x80000000 -N
</pre>
<p><br />
<i>For the -N flag. LD produces large files where the file offset of sections are equal to the virtual address. See <a rel="nofollow" class="external free" href="https://sourceware.org/ml/binutils/2009-04/msg00099.html">https://sourceware.org/ml/binutils/2009-04/msg00099.html</a></i>
</p>
<h4> <span class="mw-headline" id="Kernel_Code"> Kernel Code </span></h4>
<p>The first part of the kernel code here assumes you have been following along with the other pages
in this series of pages. So I am not going to go too deep to explain much of it. But, essentially I check that the module is of type <i>KMODTYPE_ELFUSER</i> and if so then I find a free task slot and
hand that to a function that will do the actual loading of the image.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1">	<span class="co2">#define KMODTYPE_ELFUSER			1</span>
	<span class="coMULTI">/*
		create a task for any attached modules of the correct type
	*/</span>
	kprintf<span class="br0">&#40;</span><span class="st0">&quot;looking at attached modules<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="kw1">for</span> <span class="br0">&#40;</span>m <span class="sy0">=</span> kPkgGetFirstMod<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> m<span class="sy0">;</span> m <span class="sy0">=</span> kPkgGetNextMod<span class="br0">&#40;</span>m<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		kprintf<span class="br0">&#40;</span><span class="st0">&quot;looking at module<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span>m<span class="sy0">-&gt;</span>type <span class="sy0">==</span> KMODTYPE_ELFUSER<span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="coMULTI">/* find free task structure */</span>
			<span class="kw1">for</span> <span class="br0">&#40;</span>x <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> x <span class="sy0">&lt;</span> <span class="nu12">0x10</span><span class="sy0">;</span> <span class="sy0">++</span>x<span class="br0">&#41;</span> <span class="br0">&#123;</span>
				<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>ks<span class="sy0">-&gt;</span>threads<span class="br0">&#91;</span>x<span class="br0">&#93;</span>.<span class="me1">valid</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
					<span class="kw2">break</span><span class="sy0">;</span>
				<span class="br0">&#125;</span>
			<span class="br0">&#125;</span>
&#160;
			<span class="kw1">if</span> <span class="br0">&#40;</span>x <span class="sy0">&gt;=</span> <span class="nu12">0x10</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
				PANIC<span class="br0">&#40;</span><span class="st0">&quot;out-of-task-slots&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="br0">&#125;</span>
&#160;
			kelfload<span class="br0">&#40;</span><span class="sy0">&amp;</span>ks<span class="sy0">-&gt;</span>threads<span class="br0">&#91;</span>x<span class="br0">&#93;</span><span class="sy0">,</span> <span class="br0">&#40;</span>uintptr<span class="br0">&#41;</span><span class="sy0">&amp;</span>m<span class="sy0">-&gt;</span>slot<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="sy0">,</span> m<span class="sy0">-&gt;</span>size<span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span></pre></div></div>
<p>And, of course the <i>kelfload</i> implementation. This is just a very minimal implementation intended to just get the image into memory as a demonstration and nothing advanced.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">typedef</span> <span class="kw4">uint16</span> Elf32_Half<span class="sy0">;</span>
<span class="kw4">typedef</span> <span class="kw4">uint32</span> Elf32_Word<span class="sy0">;</span>
<span class="kw4">typedef</span> <span class="kw4">uint32</span> Elf32_Off<span class="sy0">;</span>
<span class="kw4">typedef</span> <span class="kw4">uint32</span> Elf32_Addr<span class="sy0">;</span>
&#160;
<span class="co2">#define EI_NIDENT 16</span>
<span class="kw4">typedef</span> <span class="kw4">struct</span> <span class="br0">&#123;</span>
        <span class="kw4">unsigned</span> <span class="kw4">char</span>   e_ident<span class="br0">&#91;</span>EI_NIDENT<span class="br0">&#93;</span><span class="sy0">;</span>
        Elf32_Half      e_type<span class="sy0">;</span>
        Elf32_Half      e_machine<span class="sy0">;</span>
        Elf32_Word      e_version<span class="sy0">;</span>
        Elf32_Addr      e_entry<span class="sy0">;</span>
        Elf32_Off       e_phoff<span class="sy0">;</span>
        Elf32_Off       e_shoff<span class="sy0">;</span>
        Elf32_Word      e_flags<span class="sy0">;</span>
        Elf32_Half      e_ehsize<span class="sy0">;</span>
        Elf32_Half      e_phentsize<span class="sy0">;</span>
        Elf32_Half      e_phnum<span class="sy0">;</span>
        Elf32_Half      e_shentsize<span class="sy0">;</span>
        Elf32_Half      e_shnum<span class="sy0">;</span>
        Elf32_Half      e_shtrndx<span class="sy0">;</span>
<span class="br0">&#125;</span> ELF32_EHDR<span class="sy0">;</span>
&#160;
<span class="co2">#define EM_ARM			40</span>
&#160;
<span class="kw4">typedef</span> <span class="kw4">struct</span> <span class="br0">&#123;</span>
       Elf32_Word      sh_name<span class="sy0">;</span>
       Elf32_Word      sh_type<span class="sy0">;</span>
       Elf32_Word      sh_flags<span class="sy0">;</span>
       Elf32_Addr      sh_addr<span class="sy0">;</span>
       Elf32_Off       sh_offset<span class="sy0">;</span>
       Elf32_Word      sh_size<span class="sy0">;</span>
       Elf32_Word      sh_link<span class="sy0">;</span>
       Elf32_Word      sh_info<span class="sy0">;</span>
       Elf32_Word      sh_addralign<span class="sy0">;</span>
       Elf32_Word      sh_entsize<span class="sy0">;</span>
<span class="br0">&#125;</span> ELF32_SHDR<span class="sy0">;</span>
&#160;
<span class="kw4">int</span> kelfload<span class="br0">&#40;</span>KTHREAD <span class="sy0">*</span>th<span class="sy0">,</span> uintptr addr<span class="sy0">,</span> uintptr sz<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	ELF32_EHDR			<span class="sy0">*</span>ehdr<span class="sy0">;</span>
	ELF32_SHDR			<span class="sy0">*</span>shdr<span class="sy0">;</span>
	<span class="kw4">uint32</span>				x<span class="sy0">,</span> y<span class="sy0">;</span>
	uintptr				page<span class="sy0">,</span> oldpage<span class="sy0">;</span>
	KSTATE				<span class="sy0">*</span>ks<span class="sy0">;</span>
	<span class="kw4">uint8</span>				<span class="sy0">*</span>fb<span class="sy0">;</span>
&#160;
	kprintf<span class="br0">&#40;</span><span class="st0">&quot;loading elf into memory space<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
	ks <span class="sy0">=</span> <span class="br0">&#40;</span>KSTATE<span class="sy0">*</span><span class="br0">&#41;</span>KSTATEADDR<span class="sy0">;</span>
&#160;
	ehdr <span class="sy0">=</span> <span class="br0">&#40;</span>ELF32_EHDR<span class="sy0">*</span><span class="br0">&#41;</span>addr<span class="sy0">;</span>
	<span class="kw1">if</span> <span class="br0">&#40;</span>ehdr<span class="sy0">-&gt;</span>e_machine <span class="sy0">!=</span> EM_ARM<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		kprintf<span class="br0">&#40;</span><span class="st0">&quot;kelfload: not ARM machine!<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw1">if</span> <span class="br0">&#40;</span>ehdr<span class="sy0">-&gt;</span>e_ident<span class="br0">&#91;</span><span class="nu0">4</span><span class="br0">&#93;</span> <span class="sy0">!=</span> <span class="nu12">0x1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		kprintf<span class="br0">&#40;</span><span class="st0">&quot;kelfload: not ELF32 object<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
&#160;
	kvmm2_init<span class="br0">&#40;</span><span class="sy0">&amp;</span>th<span class="sy0">-&gt;</span>vmm<span class="br0">&#41;</span><span class="sy0">;</span>
	th<span class="sy0">-&gt;</span>pc <span class="sy0">=</span> ehdr<span class="sy0">-&gt;</span>e_entry<span class="sy0">;</span>
	th<span class="sy0">-&gt;</span>valid <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
	th<span class="sy0">-&gt;</span>cpsr <span class="sy0">=</span> <span class="nu12">0x60000000</span> <span class="sy0">|</span> ARM4_MODE_USER<span class="sy0">;</span>
	<span class="coMULTI">/* set stack */</span>
	th<span class="sy0">-&gt;</span>sp <span class="sy0">=</span> <span class="nu12">0x90001000</span><span class="sy0">;</span>
	<span class="coMULTI">/* pass address of serial output as first argument */</span>
	th<span class="sy0">-&gt;</span>r0 <span class="sy0">=</span> <span class="nu12">0xa0000000</span><span class="sy0">;</span>
	<span class="coMULTI">/* map serial output mmio */</span>
	kvmm2_mapsingle<span class="br0">&#40;</span><span class="sy0">&amp;</span>th<span class="sy0">-&gt;</span>vmm<span class="sy0">,</span> <span class="nu12">0xa0000000</span><span class="sy0">,</span> <span class="nu12">0x16000000</span><span class="sy0">,</span> TLB_C_AP_FULLACCESS<span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="coMULTI">/* map stack page (4K) */</span>
	kvmm2_allocregionat<span class="br0">&#40;</span><span class="sy0">&amp;</span>th<span class="sy0">-&gt;</span>vmm<span class="sy0">,</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="nu12">0x90000000</span><span class="sy0">,</span> TLB_C_AP_FULLACCESS<span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
	<span class="coMULTI">/* map address space so we can work directly with it */</span>
	kvmm2_getphy<span class="br0">&#40;</span><span class="sy0">&amp;</span>ks<span class="sy0">-&gt;</span>vmm<span class="sy0">,</span> <span class="br0">&#40;</span>uintptr<span class="br0">&#41;</span>th<span class="sy0">-&gt;</span>vmm.<span class="me1">table</span><span class="sy0">,</span> <span class="sy0">&amp;</span>page<span class="br0">&#41;</span><span class="sy0">;</span>
	oldpage <span class="sy0">=</span> arm4_tlbget1<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	arm4_tlbset1<span class="br0">&#40;</span>page<span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="coMULTI">/* flush TLB */</span>
        asm<span class="br0">&#40;</span><span class="st0">&quot;mcr p15, #0, r0, c8, c7, #0&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
	<span class="co1">// e_shoff - section table offset</span>
	<span class="co1">// e_shentsize - size of each section entry</span>
	<span class="co1">// e_shnum - count of entries in table</span>
	<span class="kw1">for</span> <span class="br0">&#40;</span>x <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> x <span class="sy0">&lt;</span> ehdr<span class="sy0">-&gt;</span>e_shnum<span class="sy0">;</span> <span class="sy0">++</span>x<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		shdr <span class="sy0">=</span> <span class="br0">&#40;</span>ELF32_SHDR<span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span>addr <span class="sy0">+</span> ehdr<span class="sy0">-&gt;</span>e_shoff <span class="sy0">+</span> x <span class="sy0">*</span> ehdr<span class="sy0">-&gt;</span>e_shentsize<span class="br0">&#41;</span><span class="sy0">;</span>
		<span class="kw1">if</span> <span class="br0">&#40;</span>shdr<span class="sy0">-&gt;</span>sh_addr <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="coMULTI">/* load this into memory */</span>
			<span class="co1">// sh_offset - byte offset in module</span>
			<span class="co1">// sh_size - size of section in module </span>
			<span class="co1">// sh_addr - address to load at</span>
			kvmm2_allocregionat<span class="br0">&#40;</span><span class="sy0">&amp;</span>th<span class="sy0">-&gt;</span>vmm<span class="sy0">,</span> kvmm2_rndup<span class="br0">&#40;</span>shdr<span class="sy0">-&gt;</span>sh_size<span class="br0">&#41;</span><span class="sy0">,</span> shdr<span class="sy0">-&gt;</span>sh_addr<span class="sy0">,</span> TLB_C_AP_FULLACCESS<span class="br0">&#41;</span><span class="sy0">;</span>
			fb <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">uint8</span><span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span>addr <span class="sy0">+</span> shdr<span class="sy0">-&gt;</span>sh_offset<span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="coMULTI">/* copy */</span>
			<span class="kw1">for</span> <span class="br0">&#40;</span>y <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> y <span class="sy0">&lt;</span> shdr<span class="sy0">-&gt;</span>sh_size<span class="sy0">;</span> <span class="sy0">++</span>y<span class="br0">&#41;</span> <span class="br0">&#123;</span>
				<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">uint8</span><span class="sy0">*</span><span class="br0">&#41;</span>shdr<span class="sy0">-&gt;</span>sh_addr<span class="br0">&#41;</span><span class="br0">&#91;</span>y<span class="br0">&#93;</span> <span class="sy0">=</span> fb<span class="br0">&#91;</span>y<span class="br0">&#93;</span><span class="sy0">;</span>
			<span class="br0">&#125;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="coMULTI">/* restore previous address space */</span>
	arm4_tlbset1<span class="br0">&#40;</span>oldpage<span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="coMULTI">/* flush the TLB */</span>
        asm<span class="br0">&#40;</span><span class="st0">&quot;mcr p15, #0, r0, c8, c7, #0&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>Of course it is just minimal but it should be enough for you to get started with and improve it!
</p>
<h2> <span class="mw-headline" id="Full_Source"> Full Source </span></h2>
<p>You can access the full source with:
</p>
<pre>
    git clone http://kmcg3413.net/armthin.git
    git checkout origin/bINT_TIMER_PIC_TASKS_VMM_MOD_ELF
</pre>
<p><i>The head (master branch) may contain more work beyond this page.</i>
</p>
<h2> <span class="mw-headline" id="Going_Further"> Going Further </span></h2>
<p>At this point you have almost a fully functional kernel. Your missing better support for device drivers, services, and such things. Your also at the point where you can build different kernel types depending on your design. Your missing system calls for user space for memory allocation. Also, you need processes and threads instead of the more primitive task like design we have now. Also, you need to handle exceptions for user space correctly such as terminating the offending process or thread. Also, synchronization primitives and common services like timers and sleeping are missing. And, then again maybe you do not need these and you have some really awesome design!? Well, code to your heart's content is my suggestion!
</p><p><i>You can continue along with me or branch out in your own direction if you like, but in the next page we are going to create actual processes and threads, improve our exception handling, and add just a few basic services through system calls to threads.</i>
</p><p>For lack of a better name, continue onward to, <a href="ARM_Integrator-CP_ITPTMME_Phase2" title="ARM Integrator-CP ITPTMME Phase2">Phase 2</a>.
</p>
<!-- 
NewPP limit report
Preprocessor node count: 145/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3483-0!*!0!!en!*!* and timestamp 20180121060816 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=ARM_Integrator-CP_IRQTimerPICTasksMMAndMods&amp;oldid=16312">http://wiki.osdev.org/index.php?title=ARM_Integrator-CP_IRQTimerPICTasksMMAndMods&amp;oldid=16312</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id='catlinks' class='catlinks catlinks-allhidden'></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=ARM_Integrator-CP_IRQTimerPICTasksMMAndMods" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="ARM_Integrator-CP_IRQTimerPICTasksMMAndMods"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk" class="new"><span><a href="http://wiki.osdev.org/index.php?title=Talk:ARM_Integrator-CP_IRQTimerPICTasksMMAndMods&amp;action=edit&amp;redlink=1"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="ARM_Integrator-CP_IRQTimerPICTasksMMAndMods#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="ARM_Integrator-CP_IRQTimerPICTasksMMAndMods" >Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=ARM_Integrator-CP_IRQTimerPICTasksMMAndMods&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=ARM_Integrator-CP_IRQTimerPICTasksMMAndMods&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="ARM_Integrator-CP_IRQTimerPICTasksMMAndMods#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="http://wiki.osdev.org/index.php" id="searchform">
		<input type='hidden' name="title" value="Special:Search"/>
				<input type="search" name="search" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput" />		<input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" />		<input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" />			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rskins/common/images/osdev.png);" href="/Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/ARM_Integrator-CP_IRQTimerPICTasksMMAndMods" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/ARM_Integrator-CP_IRQTimerPICTasksMMAndMods" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=ARM_Integrator-CP_IRQTimerPICTasksMMAndMods&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=ARM_Integrator-CP_IRQTimerPICTasksMMAndMods&amp;oldid=16312" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 25 April 2014, at 19:17.</li>
											<li id="footer-info-viewcount">This page has been accessed 2,785 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.027 secs. -->
	</body>
</html>
