<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>UEFI Bare Bones - OSDev Wiki</title>
<meta charset="UTF-8" />
<meta name="generator" content="MediaWiki 1.18.0" />
<link rel="shortcut icon" href="favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "UEFI_Bare_Bones", "wgTitle": "UEFI Bare Bones", "wgCurRevisionId": 21069, "wgArticleId": 3609, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["Level 2 Tutorials", "Bare bones tutorials", "UEFI"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script>
<style type="text/css">/*<![CDATA[*/
.source-bash {line-height: normal;}
.source-bash li, .source-bash pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for bash
 * CSS class: source-bash, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.bash.source-bash .de1, .bash.source-bash .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.bash.source-bash  {font-family:monospace;}
.bash.source-bash .imp {font-weight: bold; color: red;}
.bash.source-bash li, .bash.source-bash .li1 {font-weight: normal; vertical-align:top;}
.bash.source-bash .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.bash.source-bash .li2 {font-weight: bold; vertical-align:top;}
.bash.source-bash .kw1 {color: #000000; font-weight: bold;}
.bash.source-bash .kw2 {color: #c20cb9; font-weight: bold;}
.bash.source-bash .kw3 {color: #7a0874; font-weight: bold;}
.bash.source-bash .co0 {color: #666666; font-style: italic;}
.bash.source-bash .co1 {color: #800000;}
.bash.source-bash .co2 {color: #cc0000; font-style: italic;}
.bash.source-bash .co3 {color: #000000; font-weight: bold;}
.bash.source-bash .co4 {color: #666666;}
.bash.source-bash .es1 {color: #000099; font-weight: bold;}
.bash.source-bash .es2 {color: #007800;}
.bash.source-bash .es3 {color: #007800;}
.bash.source-bash .es4 {color: #007800;}
.bash.source-bash .es5 {color: #780078;}
.bash.source-bash .es_h {color: #000099; font-weight: bold;}
.bash.source-bash .br0 {color: #7a0874; font-weight: bold;}
.bash.source-bash .sy0 {color: #000000; font-weight: bold;}
.bash.source-bash .st0 {color: #ff0000;}
.bash.source-bash .st_h {color: #ff0000;}
.bash.source-bash .nu0 {color: #000000;}
.bash.source-bash .re0 {color: #007800;}
.bash.source-bash .re1 {color: #007800;}
.bash.source-bash .re2 {color: #007800;}
.bash.source-bash .re4 {color: #007800;}
.bash.source-bash .re5 {color: #660033;}
.bash.source-bash .ln-xtra, .bash.source-bash li.ln-xtra, .bash.source-bash div.ln-xtra {background-color: #ffc;}
.bash.source-bash span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #b1b100;}
.c.source-c .kw2 {color: #000000; font-weight: bold;}
.c.source-c .kw3 {color: #000066;}
.c.source-c .kw4 {color: #993333;}
.c.source-c .co1 {color: #666666; font-style: italic;}
.c.source-c .co2 {color: #339933;}
.c.source-c .coMULTI {color: #808080; font-style: italic;}
.c.source-c .es0 {color: #000099; font-weight: bold;}
.c.source-c .es1 {color: #000099; font-weight: bold;}
.c.source-c .es2 {color: #660099; font-weight: bold;}
.c.source-c .es3 {color: #660099; font-weight: bold;}
.c.source-c .es4 {color: #660099; font-weight: bold;}
.c.source-c .es5 {color: #006699; font-weight: bold;}
.c.source-c .br0 {color: #009900;}
.c.source-c .sy0 {color: #339933;}
.c.source-c .st0 {color: #ff0000;}
.c.source-c .nu0 {color: #0000dd;}
.c.source-c .nu6 {color: #208080;}
.c.source-c .nu8 {color: #208080;}
.c.source-c .nu12 {color: #208080;}
.c.source-c .nu16 {color:#800080;}
.c.source-c .nu17 {color:#800080;}
.c.source-c .nu18 {color:#800080;}
.c.source-c .nu19 {color:#800080;}
.c.source-c .me1 {color: #202020;}
.c.source-c .me2 {color: #202020;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-UEFI_Bare_Bones action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">UEFI Bare Bones</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="UEFI_Bare_Bones#mw-head">navigation</a>,
					<a href="UEFI_Bare_Bones#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div lang="en" dir="ltr" class="mw-content-ltr"><table style="font-size:95%; line-height:1.5em; padding:0.25em; float:right; margin: 0 0 8px 15px; clear:right; border:1px solid #aaaaaa; background:#eee; text-align:center;;"><tr><th>Difficulty level</th></tr><tr><td><a href="File:Difficulty_2.png" class="image"><img alt="Difficulty 2.png" src="images/a/a1/Difficulty_2.png" width="46" height="14" /></a><br />Medium</td></tr></table>
<p>In this tutorial we will create a hard drive or ISO image containing a bare bones UEFI application for the x86-64 platform.
</p><p>You are recommended to have read and fully understood the <a href="Bare_Bones" title="Bare Bones">Bare Bones</a> tutorial first.  The <a href="UEFI" title="UEFI">UEFI</a> page provides some background to the UEFI boot process and should also be consulted first.
</p><p>This tutorial uses the header files and GUID definitions from the <a rel="nofollow" class="external text" href="https://sourceforge.net/projects/gnu-efi/">gnu-efi</a> project, but does <b>not</b> use the gnu-efi build system, but rather the MinGW toolchain.
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="UEFI_Bare_Bones#Prerequisites"><span class="tocnumber">1</span> <span class="toctext">Prerequisites</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="UEFI_Bare_Bones#Testing_the_emulator"><span class="tocnumber">2</span> <span class="toctext">Testing the emulator</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="UEFI_Bare_Bones#hello.c"><span class="tocnumber">3</span> <span class="toctext">hello.c</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="UEFI_Bare_Bones#gnu-efi.2Flib.2Fdata.c"><span class="tocnumber">4</span> <span class="toctext">gnu-efi/lib/data.c</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="UEFI_Bare_Bones#gnu-efi.2Flib.2Flib.h"><span class="tocnumber">5</span> <span class="toctext">gnu-efi/lib/lib.h</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="UEFI_Bare_Bones#Building"><span class="tocnumber">6</span> <span class="toctext">Building</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="UEFI_Bare_Bones#Creating_the_FAT_image"><span class="tocnumber">7</span> <span class="toctext">Creating the FAT image</span></a>
<ul>
<li class="toclevel-2 tocsection-8"><a href="UEFI_Bare_Bones#Running_as_a_USB_stick_image"><span class="tocnumber">7.1</span> <span class="toctext">Running as a USB stick image</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="UEFI_Bare_Bones#Creating_and_running_the_HD_image"><span class="tocnumber">7.2</span> <span class="toctext">Creating and running the HD image</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="UEFI_Bare_Bones#Creating_and_running_the_CD_image"><span class="tocnumber">7.3</span> <span class="toctext">Creating and running the CD image</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-11"><a href="UEFI_Bare_Bones#What_to_do_next.3F"><span class="tocnumber">8</span> <span class="toctext">What to do next?</span></a></li>
<li class="toclevel-1 tocsection-12"><a href="UEFI_Bare_Bones#Common_problems"><span class="tocnumber">9</span> <span class="toctext">Common problems</span></a></li>
<li class="toclevel-1 tocsection-13"><a href="UEFI_Bare_Bones#See_also"><span class="tocnumber">10</span> <span class="toctext">See also</span></a></li>
</ul>
</td></tr></table>
<h2> <span class="mw-headline" id="Prerequisites"> Prerequisites </span></h2>
<p>You will need a <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC Cross-Compiler</a> targeting the <b>x86_64-w64-mingw32</b> target, and the <a rel="nofollow" class="external text" href="https://sourceforge.net/projects/gnu-efi/"><b>gnu-efi</b></a> package to compile the actual kernel.  To build the EFI filesystem image we use <a href="MTools" title="MTools">MTools</a> and optionally <a rel="nofollow" class="external text" href="http://www.tysos.org/redmine/projects/tysos/wiki/EFI"><b>mkgpt</b></a> if you also want to create a hard disk image.  To run under an emulator, we use <b>qemu-system-x86_64</b> and the <a rel="nofollow" class="external text" href="http://tianocore.sourceforge.net/wiki/OVMF"><b>x64 OVMF firmware</b></a>.  If you wish to build a CD image, you will also need <b>xorriso</b>.
</p>
Under an apt-based system (e.g. Debian/Ubuntu) you can run <div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="kw2">sudo</span> <span class="kw2">apt-get install</span> qemu binutils-mingw-w64 gcc-mingw-w64 xorriso mtools
<span class="kw2">wget</span> http:<span class="sy0">//</span>www.tysos.org<span class="sy0">/</span>files<span class="sy0">/</span>efi<span class="sy0">/</span>mkgpt-latest.tar.bz2
<span class="kw2">tar</span> jxf mkgpt-latest.tar.bz2
<span class="kw3">cd</span> mkgpt <span class="sy0">&amp;&amp;</span> .<span class="sy0">/</span>configure <span class="sy0">&amp;&amp;</span> <span class="kw2">make</span> <span class="sy0">&amp;&amp;</span> <span class="kw2">sudo</span> <span class="kw2">make</span> <span class="kw2">install</span> <span class="sy0">&amp;&amp;</span> <span class="kw3">cd</span> ..</pre></div></div> and then separately download OVMF and extract the OVMF.fd file somewhere, and also gnu-efi.
<h2> <span class="mw-headline" id="Testing_the_emulator"> Testing the emulator </span></h2>
<p>Now is a good time to check the emulator is working successfully with the OVMF firmware.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1">qemu-system-x86_64 <span class="re5">-L</span> OVMF_dir<span class="sy0">/</span> <span class="re5">-bios</span> OVMF.fd</pre></div></div>should launch qemu and dump you at a UEFI shell prompt.
<h2> <span class="mw-headline" id="hello.c"> hello.c </span></h2>
<p>Create a file with the following:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;efi.h&gt;</span>
<span class="co2">#include &lt;efilib.h&gt;</span>
&#160;
EFI_STATUS efi_main<span class="br0">&#40;</span>EFI_HANDLE ImageHandle<span class="sy0">,</span> EFI_SYSTEM_TABLE <span class="sy0">*</span>SystemTable<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    EFI_STATUS Status<span class="sy0">;</span>
    EFI_INPUT_KEY Key<span class="sy0">;</span>
&#160;
    <span class="coMULTI">/* Store the system table for future use in other functions */</span>
    ST <span class="sy0">=</span> SystemTable<span class="sy0">;</span>
&#160;
    <span class="coMULTI">/* Say hi */</span>
    Status <span class="sy0">=</span> ST<span class="sy0">-&gt;</span>ConOut<span class="sy0">-&gt;</span>OutputString<span class="br0">&#40;</span>ST<span class="sy0">-&gt;</span>ConOut<span class="sy0">,</span> L<span class="st0">&quot;Hello World<span class="es1">\n</span><span class="es1">\r</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>EFI_ERROR<span class="br0">&#40;</span>Status<span class="br0">&#41;</span><span class="br0">&#41;</span>
        <span class="kw1">return</span> Status<span class="sy0">;</span>
&#160;
    <span class="coMULTI">/* Now wait for a keystroke before continuing, otherwise your
       message will flash off the screen before you see it.
&#160;
       First, we need to empty the console input buffer to flush
       out any keystrokes entered before this point */</span>
    Status <span class="sy0">=</span> ST<span class="sy0">-&gt;</span>ConIn<span class="sy0">-&gt;</span>Reset<span class="br0">&#40;</span>ST<span class="sy0">-&gt;</span>ConIn<span class="sy0">,</span> FALSE<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>EFI_ERROR<span class="br0">&#40;</span>Status<span class="br0">&#41;</span><span class="br0">&#41;</span>
        <span class="kw1">return</span> Status<span class="sy0">;</span>
&#160;
    <span class="coMULTI">/* Now wait until a key becomes available.  This is a simple
       polling implementation.  You could try and use the WaitForKey
       event instead if you like */</span>
    <span class="kw1">while</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>Status <span class="sy0">=</span> ST<span class="sy0">-&gt;</span>ConIn<span class="sy0">-&gt;</span>ReadKeyStroke<span class="br0">&#40;</span>ST<span class="sy0">-&gt;</span>ConIn<span class="sy0">,</span> <span class="sy0">&amp;</span>Key<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">==</span> EFI_NOT_READY<span class="br0">&#41;</span> <span class="sy0">;</span>
&#160;
    <span class="kw1">return</span> Status<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div>
<h2> <span class="mw-headline" id="gnu-efi.2Flib.2Fdata.c"> gnu-efi/lib/data.c </span></h2>
<p>We will also bring in the data.c file from the gnu-efi distribution, as this contains many predefined GUIDs for the various UEFI services.  To avoid bloat and unnecessary dependencies on the rest of gnu-efi, you will need to edit it to remove the references to 'LibStubStriCmp', 'LibStubMetaiMatch' and 'LibStubStrLwrUpr' (simply make all the members of the LibStubUnicodeInterface structure be NULL).
</p>
<h2> <span class="mw-headline" id="gnu-efi.2Flib.2Flib.h"> gnu-efi/lib/lib.h </span></h2>
<p>data.c includes this file.  We copy it as-is to our source directory.
</p>
<h2> <span class="mw-headline" id="Building"> Building </span></h2>
<p>To build, we use our cross-compiler:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1">x86_64-w64-mingw32-gcc <span class="re5">-ffreestanding</span> -Ipath<span class="sy0">/</span>to<span class="sy0">/</span>gnu-efi<span class="sy0">/</span>inc -Ipath<span class="sy0">/</span>to<span class="sy0">/</span>gnu-efi<span class="sy0">/</span>inc<span class="sy0">/</span>x86_64 -Ipath<span class="sy0">/</span>to<span class="sy0">/</span>gnu-efi<span class="sy0">/</span>inc<span class="sy0">/</span>protocol <span class="re5">-c</span> <span class="re5">-o</span> hello.o hello.c
x86_64-w64-mingw32-gcc <span class="re5">-ffreestanding</span> -Ipath<span class="sy0">/</span>to<span class="sy0">/</span>gnu-efi<span class="sy0">/</span>inc -Ipath<span class="sy0">/</span>to<span class="sy0">/</span>gnu-efi<span class="sy0">/</span>inc<span class="sy0">/</span>x86_64 -Ipath<span class="sy0">/</span>to<span class="sy0">/</span>gnu-efi<span class="sy0">/</span>inc<span class="sy0">/</span>protocol <span class="re5">-c</span> <span class="re5">-o</span> data.o path<span class="sy0">/</span>to<span class="sy0">/</span>gnu-efi<span class="sy0">/</span>lib<span class="sy0">/</span>data.c
x86_64-w64-mingw32-gcc <span class="re5">-nostdlib</span> -Wl,-dll <span class="re5">-shared</span> -Wl,--subsystem,<span class="nu0">10</span> <span class="re5">-e</span> efi_main <span class="re5">-o</span> BOOTX64.EFI hello.o data.o <span class="re5">-lgcc</span></pre></div></div>Note here that '--subsystem 10' specifies an EFI application.
<h2> <span class="mw-headline" id="Creating_the_FAT_image"> Creating the FAT image </span></h2>
<p>Next, you will need to create a FAT filesystem image.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="kw2">dd</span> <span class="re2">if</span>=<span class="sy0">/</span>dev<span class="sy0">/</span>zero <span class="re2">of</span>=fat.img <span class="re2">bs</span>=1k <span class="re2">count</span>=<span class="nu0">1440</span>
mformat <span class="re5">-i</span> fat.img <span class="re5">-f</span> <span class="nu0">1440</span>&#160;::
mmd <span class="re5">-i</span> fat.img&#160;::<span class="sy0">/</span>EFI
mmd <span class="re5">-i</span> fat.img&#160;::<span class="sy0">/</span>EFI<span class="sy0">/</span>BOOT
mcopy <span class="re5">-i</span> fat.img BOOTX64.EFI&#160;::<span class="sy0">/</span>EFI<span class="sy0">/</span>BOOT</pre></div></div>
<p>Now, we can either use this as a USB stick image directly or embed it in HD image or CD image.
</p>
<h3> <span class="mw-headline" id="Running_as_a_USB_stick_image"> Running as a USB stick image </span></h3>
<p>You can either write it directly to a USB stick and use in in a UEFI machine, or run it in qemu:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1">qemu-system-x86_64 <span class="re5">-L</span> OVMF_dir<span class="sy0">/</span> <span class="re5">-bios</span> OVMF.fd <span class="re5">-usb</span> <span class="re5">-usbdevice</span> disk::fat.img</pre></div></div>
<h3> <span class="mw-headline" id="Creating_and_running_the_HD_image"> Creating and running the HD image </span></h3>
<p>The HD image is a disk image in the <a href="GPT" title="GPT">GPT</a> format, with the FAT image specially identified as a 'EFI System Partition'.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1">mkgpt <span class="re5">-o</span> hdimage.bin <span class="re5">--image-size</span> <span class="nu0">4096</span> <span class="re5">--part</span> fat.img <span class="re5">--type</span> system
qemu-system-x86_64 <span class="re5">-L</span> OVMF_dir<span class="sy0">/</span> <span class="re5">-bios</span> OVMF.fd <span class="re5">-hda</span> hdimage.bin</pre></div></div>
<h3> <span class="mw-headline" id="Creating_and_running_the_CD_image"> Creating and running the CD image </span></h3>
<p>The iso image is a standard ISO9660 image which contains our FAT image as a file.  A special El Torito option then points EFI aware systems to this image to be loaded.  You can either burn the CD image to a CD and run it in a UEFI machine, or run it in QEMU:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="kw2">mkdir</span> iso
<span class="kw2">cp</span> fat.img iso
xorriso <span class="re5">-as</span> mkisofs <span class="re5">-R</span> <span class="re5">-f</span> <span class="re5">-e</span> fat.img <span class="re5">-no-emul-boot</span> <span class="re5">-o</span> cdimage.iso iso
qemu-system-x86_64 <span class="re5">-L</span> OVMF_dir<span class="sy0">/</span> <span class="re5">-bios</span> OVMF.fd <span class="re5">-cdrom</span> cdimage.iso</pre></div></div>
<h2> <span class="mw-headline" id="What_to_do_next.3F"> What to do next? </span></h2>
<p>You may want to try using some more of the EFI boot services, e.g. to read more files from your FAT image, manage memory etc (see the <a rel="nofollow" class="external text" href="http://www.uefi.org/specifications">UEFI Specifications</a> page for further documentation of this).
</p>
<h2> <span class="mw-headline" id="Common_problems"> Common problems </span></h2>
<p>Some UEFI hardware implementations require that the FAT image is in the FAT32 format (rather than FAT12 or FAT16).  OVMF does not have this limitation, so you will not see such a problem in QEMU.  The minimum size of a FAT32 filesystem is, however, around 32 MiB so you will need to generate a much bigger image and pass the '-F' option to mformat.
</p>
<h2> <span class="mw-headline" id="See_also"> See also </span></h2>
<ul><li> <a href="UEFI" title="UEFI">UEFI</a>
</li><li> <a href="UEFI_ISO_Bare_Bones" title="UEFI ISO Bare Bones">UEFI ISO Bare Bones</a>
</li></ul>

<!-- 
NewPP limit report
Preprocessor node count: 236/1000000
Post-expand include size: 342/2097152 bytes
Template argument size: 52/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3609-0!*!0!!en!2!* and timestamp 20180121042613 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=UEFI_Bare_Bones&amp;oldid=21069">http://wiki.osdev.org/index.php?title=UEFI_Bare_Bones&amp;oldid=21069</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="http://wiki.osdev.org/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="Category:Level_2_Tutorials" title="Category:Level 2 Tutorials">Level 2 Tutorials</a></li><li><a href="Category:Bare_bones_tutorials" title="Category:Bare bones tutorials">Bare bones tutorials</a></li><li><a href="Category:UEFI" title="Category:UEFI">UEFI</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=UEFI_Bare_Bones" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="UEFI_Bare_Bones"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk" class="new"><span><a href="http://wiki.osdev.org/index.php?title=Talk:UEFI_Bare_Bones&amp;action=edit&amp;redlink=1"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="UEFI_Bare_Bones#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="UEFI_Bare_Bones" >Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=UEFI_Bare_Bones&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=UEFI_Bare_Bones&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="UEFI_Bare_Bones#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="http://wiki.osdev.org/index.php" id="searchform">
		<input type='hidden' name="title" value="Special:Search"/>
				<input type="search" name="search" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput" />		<input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" />		<input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" />			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="/Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="/Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="/OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="/OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="/OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="/Special:RecentChangeskins/common/images/osdev.png);" href="/Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/UEFI_Bare_Bones" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/UEFI_Bare_Bones" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=UEFI_Bare_Bones&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=UEFI_Bare_Bones&amp;oldid=21069" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 10 August 2017, at 03:57.</li>
											<li id="footer-info-viewcount">This page has been accessed 20,406 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.041 secs. -->
	</body>
</html>
