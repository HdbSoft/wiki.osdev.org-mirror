<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>Time And Date - OSDev Wiki</title>
<meta charset="UTF-8" />
<meta name="generator" content="MediaWiki 1.18.0" />
<link rel="canonical" href="Time_And_Date" />
<link rel="shortcut icon" href="favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "Time_And_Date", "wgTitle": "Time And Date", "wgCurRevisionId": 20962, "wgArticleId": 1903, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["Time"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script>
<!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Time_And_Date action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">Time And Date</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub">(Redirected from <a href="http://wiki.osdev.org/index.php?title=Time&amp;redirect=no" title="Time">Time</a>)</div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="Time#mw-head">navigation</a>,
					<a href="Time#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div lang="en" dir="ltr" class="mw-content-ltr"><p>Users, the filesystem, the scheduler, system applications, and some user applications will all need to know the date and/or time to various accuracies.
Some applications will need to be started, sent signals, or sent messages when the clock strikes a certain time.
To provide these services, the OS needs to obtain the current time during boot and maintain this time.
</p><p>There are three important subdivisions of "time" in a system: human time, filesystem time, and scheduler timeslice "ticks". Human
time can be measured in seconds (or even days, for longer times), where "ticks" must always be .01 seconds or smaller.
An important design decision is whether to keep these time formats separate, or whether to merge them together.
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Time#Maintaining_The_Time_Internally"><span class="tocnumber">1</span> <span class="toctext">Maintaining The Time Internally</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Time#Obtaining_The_Initial_Time_And_Date"><span class="tocnumber">2</span> <span class="toctext">Obtaining The Initial Time And Date</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="Time#Battery-Backed_Clock"><span class="tocnumber">2.1</span> <span class="toctext">Battery-Backed Clock</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="Time#Network_Time"><span class="tocnumber">2.2</span> <span class="toctext">Network Time</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="Time#Internal_OS_Time_Formats"><span class="tocnumber">3</span> <span class="toctext">Internal OS Time Formats</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="Time#Human_Timescales"><span class="tocnumber">3.1</span> <span class="toctext">Human Timescales</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="Time#Filesystem_Timestamps"><span class="tocnumber">3.2</span> <span class="toctext">Filesystem Timestamps</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="Time#Scheduler_Timeslices"><span class="tocnumber">3.3</span> <span class="toctext">Scheduler Timeslices</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="Time#Historical_Dates"><span class="tocnumber">3.4</span> <span class="toctext">Historical Dates</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="Time#Example_Time_Formats"><span class="tocnumber">3.5</span> <span class="toctext">Example Time Formats</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="Time#.22Scientific.22_Format"><span class="tocnumber">3.6</span> <span class="toctext">"Scientific" Format</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-12"><a href="Time#Which_Time.3F"><span class="tocnumber">4</span> <span class="toctext">Which Time?</span></a></li>
<li class="toclevel-1 tocsection-13"><a href="Time#Complexities"><span class="tocnumber">5</span> <span class="toctext">Complexities</span></a></li>
<li class="toclevel-1 tocsection-14"><a href="Time#See_Also"><span class="tocnumber">6</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-15"><a href="Time#Articles"><span class="tocnumber">6.1</span> <span class="toctext">Articles</span></a></li>
<li class="toclevel-2 tocsection-16"><a href="Time#Threads"><span class="tocnumber">6.2</span> <span class="toctext">Threads</span></a></li>
<li class="toclevel-2 tocsection-17"><a href="Time#External_Links"><span class="tocnumber">6.3</span> <span class="toctext">External Links</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h2> <span class="mw-headline" id="Maintaining_The_Time_Internally"> Maintaining The Time Internally </span></h2>
<p>During operation, a typical OS will use a local hardware timer to drive its own internal time keeping code -- often called the "system clock".
On an x86 system, there are two to four timers available: the <a href="PIT" title="PIT" class="mw-redirect">PIT</a>, the <a href="RTC" title="RTC">RTC</a>, the <a href="TSC" title="TSC">TSC</a>, or the local <a href="APIC" title="APIC">APIC</a> (older systems may not have a TSC
or an APIC). These timers may produce an interrupt (or may even be polled) at regular intervals to inform the OS of the passage of time.
Using at least one of these timers is probably necessary to control and generate scheduler timeslice ticks.
It takes very little additional code in the driver to also use that timer to update the system clock. The OS may only need to
know how often the chosen timer ticks during one second, and keep a counter -- or the system clock may be designed to tick at
the same speed as the chosen timer.
</p><p>However, some of these timers are only accurate to within a handful of seconds a day, so it may be desirable to benchmark the system
clock to a reference, periodically, even while the system is running.
</p><p>It is also possible not to use a timer to update the system clock at all, and only use an "accurate" external reference when the system tries to
access the system clock. Depending on the reference used, this method may only be accurate to 1 second, it may be slow, it may be needed often
(for file system accesses, especially), and the format used often isn't what the OS wants.
</p>
<h2> <span class="mw-headline" id="Obtaining_The_Initial_Time_And_Date"> Obtaining The Initial Time And Date </span></h2>
<p>When the computer is turned off, obviously system software cannot keep an internal clock updated using a timer. So when the computer is rebooted,
the OS needs to use some other method for obtaining an initial time and date. There are really only two automated methods. If those methods fail,
the only fallback method that exists is to ask a user to enter the date/time.
</p>
<h3> <span class="mw-headline" id="Battery-Backed_Clock"> Battery-Backed Clock </span></h3>
<p>For x86 PCs, there's a special "Real Time Clock" (RTC), which is "combined" with the system's <a href="CMOS" title="CMOS">CMOS</a>. It has its own battery
so that it keeps running when the computer is turned off and the contents of its memory are not lost. See the <a href="CMOS" title="CMOS">CMOS</a> article for
information on reading the time and date from the RTC.
</p><p>Almost any other system besides x86 will also have some kind of battery-backed Date/Time clock.
</p><p>The downside to this is that the battery will always eventually die, and may not get replaced. It is a good idea to check the results
of reading any battery-backed clock for "sane" values.
</p>
<h3> <span class="mw-headline" id="Network_Time"> Network Time </span></h3>
<p>If the computer is connected to a LAN, there may be a server on it that provides an <a rel="nofollow" class="external text" href="http://en.wikipedia.org/wiki/Network_Time_Protocol">NTP</a>
service (port 123, using UDP).
</p><p>If the computer is connected to the Internet, you can attach a TCP socket to port 37 on a 
<a rel="nofollow" class="external text" href="http://tf.nist.gov/tf-cgi/servers.cgi">NIST Server</a>,
read a 32bit bigendian value (seconds since midnight, Jan 1, 1900, UTC), and close the socket. Note: This value will be rolling over within a few
decades, so the format may change soon -- or you may need to take the rollover into account yourself.
</p><p>Getting some kind of network time is a superior method for achieving accuracy and consistency across machines.
</p><p>The downside is that the end-user's computer may not be (currently) connected to a network, the server may go down, or have its IP address changed.
</p>
<h2> <span class="mw-headline" id="Internal_OS_Time_Formats"> Internal OS Time Formats </span></h2>
<p>Choosing a good time format, and writing the code to support this format can be more complex than it seems at first. As said above, the humans,
the filesystem, and the scheduler all have somewhat different needs when it comes to time. They operate on different timescales. You can create
a separate format for each, or, it can make more sense for the OS to maintain a single universal time format with higher accuracy.
All possible choices have downsides, either in complexity or in wasted computer resources. It is important to note that <b>there is no standard yet</b>,
and there may be no best choice to make.
</p>
<h3> <span class="mw-headline" id="Human_Timescales"> Human Timescales </span></h3>
<p>In the short term, humans are comfortable dealing with seconds. A time format that is specified to times shorter than seconds is partially wasted
on humans. In fact, presenting users with <i>too much</i> accuracy can confuse them and decrease their productivity.
</p><p>On the other hand, once a file (for example) is more than a year old, a user will no longer care about what second it was created. So in the longer
term, users are going to be much more interested in a time specified in days.
</p><p>This may argue for a system time that is kept in seconds -- or perhaps a more flexible format that is initially in seconds and then switches to something
like <a href="Julian_Day_Number" title="Julian Day Number">Julian Day Number</a> for longer periods of time. Or for a system that is specified with shorter intervals than seconds, but that only displays
a limited amount of the actual time information available.
</p>
<h3> <span class="mw-headline" id="Filesystem_Timestamps"> Filesystem Timestamps </span></h3>
<p>Almost every filesystem uses a predefined time format. Once again, there is no standard. If your OS only supports one filesystem, it may be smart
to match your OS time format to the one that the filesystem uses, so that you never need to do conversions. Many filesystems use time formats that
are specified in seconds, which can cause "less than perfect" results for utilities such as "make" -- if the utility is badly designed. When you
design an OS, you will need to make a decision about whether to coddle the bad design decisions of other people, to help make their software work.
</p>
<h3> <span class="mw-headline" id="Scheduler_Timeslices"> Scheduler Timeslices </span></h3>
<p>On a multitasking OS, the length of time that each thread is allowed to run is often based on a little piece of time called a "timeslice".
This is an <b>extremely</b> important function of an OS, so it is quite important to have some kind of counter available that measures time
on this timescale. One major obstacle to having a universal time format for your OS is if your timeslices are variable-length, because this
may make it very difficult to establish the minimum length of time that your universal time format needs to represent.
</p>
<h3> <span class="mw-headline" id="Historical_Dates"> Historical Dates </span></h3>
<p>Keep in mind that Accounting packages, Databases, and other programs may need to store dates from the past century, such as birthdates. If you
try hard to imagine such a thing, it's even possible to imagine wanting to store actual historical dates from many centuries ago. So, once again,
you may need to make a less-than-optimal choice for your time format, in order to support this feature.
</p>
<h3> <span class="mw-headline" id="Example_Time_Formats"> Example Time Formats </span></h3>
<p>The *NIX time format keeps track of 32bit seconds since the start of year 1970. This value becomes obsolete around the year 2100, and cannot store
some historical dates.
</p><p>The Windows time format uses a 64-bit unsigned value of the number of 100-nanosecond (100 x 10<sup>-9</sup> second) intervals since January 1, 1601.
This value becomes obsolete in about 50 thousand years. Why 1601? It can be considered the start of a 400-year cycle of leap years, which makes conversion
into a date simpler. It is also very close to the actual beginning of the use of the Gregorian Calendar (the one most people use).
The slight drawback is that you need 8 bytes of storage, everywhere you want to store a date. Which is a lot of places. Which you could use for
storing things such as file version numbers, instead.
</p><p>BCOS uses something very similar, except using signed milliseconds from Y2K, rather than unsigned 100 nanosecond intervals from 1601.
</p>
<h3> <span class="mw-headline" id=".22Scientific.22_Format"> "Scientific" Format </span></h3>
<p>There is in fact a measurement of time that is used in Astronomy, called <a href="Julian_Day_Number" title="Julian Day Number">Julian Day Number</a>. For reasons regarding historical calendar systems,
it starts measuring time from noon, UTC, January 1, 4713 BC, and it measures time in days with a floating point value. At the very least, you can
consider it to be a standard, in an area that is very lacking in standards. Because it is a standard, there is code available for converting
JDN's to calendar dates. In any case, once you have divided out the seconds and fractions of seconds from any time format, you are left with "days".
Which means that the difference between your number and the Julian Day Number is merely an offset. Of course, it is possible to truncate JDNs, and
use them as integers. See the <a href="Julian_Day_Number" title="Julian Day Number">Julian Day Number</a> article for some date calculation code examples.
</p><p><br />
</p>
<h2> <span class="mw-headline" id="Which_Time.3F"> Which Time? </span></h2>
<p>Once you've determined what format to use for keeping track of time, it's important to decide <b>which</b> time you'll keep track of. In general there are
three different times: the user's "wall clock" time, local standard time and UTC ("Universal Co-ordinated Time").
</p><p>At any instant, UTC is the same everywhere around the world. Local standard time depends on which time zone you're in (for example, my local standard time
is always UTC + 9.5 hours). "Wall clock time" is the same as local standard time unless daylight savings is in effect (for example, my wall clock time is
UTC + 9.5 hours except during summer where it becomes UTC + 10.5 hours).
</p><p>OSes that were created before the internet existed were built assuming that the user would set the computer's battery-backed clock to wall-clock time,
so that the computer could easily function as a clock for the computer's owner. The OS assumed that it may need to take responsibility for adjusting
the computer's actual battery-backed clock for Daylight Savings Time. Old versions of Windows do this.
This can cause problems when the computer dual-boots two OSes that both expect to adjust the battery-backed clock for daylight savings time
(so that it's accidentally changed by 2 hours instead of one). See <a rel="nofollow" class="external free" href="http://www.cl.cam.ac.uk/~mgk25/mswish/ut-rtc.html">http://www.cl.cam.ac.uk/~mgk25/mswish/ut-rtc.html</a> for a
detailed discussion of this problem.
</p><p>With distributed computing, however, comes the need to synchonize multiple computer clocks. The obvious way to do that is to use UTC for setting the clocks
on all systems. The OS has the responsibility of converting UTC to wall clock time (including all the complexity of Daylight Savings) before displaying
the time to the user. This is what Linux does. If you have a system that dual-boots both types of OSes, and both of them try to read the battery-backed
clock, then obviously you will have an unfixable conflict between them.
</p><p>Some solutions:
</p>
<ul><li> do not use the battery-backed clock
</li><li> make using the battery-backed clock optional
</li><li> allow the superuser to set a flag for using the battery-backed clock either way
</li></ul>
<p>The <b>stupid</b> thing to do is to force the clock to be only one way or the other, as both Linux and Windows do.
</p>
<h2> <span class="mw-headline" id="Complexities"> Complexities </span></h2>
<p>Regardless of what you do you will eventually need to convert the time format that your OS uses into other time formats. Unfortunately time itself is not a simple thing, and conversion between time formats can be quite complex (especially if done accurately). Also there are some problems maintaining the OSs time that don't involve conversions. The things you may need to watch out for include:
</p>
<dl><dt>Time Zones</dt><dd> This is mostly for converting between local standard time and UTC. Most OSs have a database so that each time zone can be given a name or location (for example, "Adelaide, South Australia" rather than "UTC +9.5 hours"). A map of timezones and their locations can be found here: <a rel="nofollow" class="external autonumber" href="http://upload.wikimedia.org/wikipedia/commons/e/e7/Timezones2008.png">[1]</a> (1.23MB)
</dd><dt>Daylight Savings</dt><dd> This is a nightmare. Some countries have different time zone rules for each state, some countries have different time zone rules for each local area within a state (the USA is particularly messed up). Worse still is that some areas decide what they are going to do each year so that it's impossible to work it out in advance, and for most areas the daylight savings rules are subject to the whims of politicians. For some OSs daylight savings information is also kept within the same database as time zone information, so that a user can tell the OS where they are and the OS can figure out the appropriate time zone and daylight savings rules from this. Daylight savings can be especially problematic for dates in the past.
</dd><dt>Leap Years</dt><dd> As you all know, a year isn't exactly 365 days. The Gregorian leap year rules are that if a year is a multiple of 4 then it's a leap year, unless it happens to be a new century and it can't be divided by 400. For example, the years 2004, 1996 and 1968 are leap years, the years 1700, 1800, and 1900 are not leap years, but years 2000, 1600 and 2400 are. This keeps the date in synchronization with the seasons.
</dd><dt>Leap Seconds</dt><dd> Due to standards bodies, atomic clocks, and gravitational influences, a day is not exactly 86400 seconds long (and on average each day is slightly longer than the last). To account for this an extra leap second is added (roughly one second each 5 years). A list of when leap seconds have been added can be found at <a rel="nofollow" class="external free" href="http://tf.nist.gov/pubs/bulletin/leapsecond.htm">http://tf.nist.gov/pubs/bulletin/leapsecond.htm</a>. This is beyond the timekeeping accuracy of any computer clock, but may be an issue if you want to create very accurate answers when subtracting one time from another in your format.
</dd><dt>Calendars</dt><dd> Most of the world uses the Gregorian calendar, but some people don't and some use other calendars in conjunction with the Gregorian calendar. If you intend to make your OS international, or if you convert your time format into Gregorian dates before 1920 then you may want to research other calendars and (for past dates) the history of calendars. An excellent starting point for this can be found at <a rel="nofollow" class="external autonumber" href="http://www.tondering.dk/claus/calendar.html">[2]</a>.
</dd><dt>Fixing Drift</dt><dd> Any timer in a system may run slow or fast, and that may be detectable -- either by the user or the OS. It may be desirable to add or subtract a small extra amount of time on each timer tick.
</dd><dt>Accuracy
</dt><dd> Unfortunately the electronics in PCs isn't as accurate as it could be, and over time (regardless of everything else) the computer's time will become inaccurate. Some OSs ignore this problem and allow the user to change or adjust the time whenever they like. This causes problems with some utilities (if you've ever got a "modification time in the future" error message from 'make' you'll know why). For other OSs (often the OSs that are designed for servers that are never turned off) there's a way of adjusting the time in a more subtle way, with many tiny changes rather than a larger sudden change. An example of this is the 'adjtimex' utility on *nix systems.
</dd></dl>
<p><br />
</p>
<h2> <span class="mw-headline" id="See_Also"> See Also </span></h2>
<h3> <span class="mw-headline" id="Articles"> Articles </span></h3>
<ul><li> <a href="Timer_Interrupt_Sources" title="Timer Interrupt Sources">Timer Interrupt Sources</a>
</li><li> <a href="Programmable_Interval_Timer" title="Programmable Interval Timer">Programmable Interval Timer</a>
</li><li> <a href="CMOS" title="CMOS">CMOS</a>
</li><li> <a href="RTC" title="RTC">RTC</a>
</li><li> <a href="APIC" title="APIC">APIC</a>
</li><li> <a href="Julian_Day_Number" title="Julian Day Number">Julian Day Number</a>
</li></ul>
<h3> <span class="mw-headline" id="Threads"> Threads </span></h3>
<ul><li><a href="http://forum.osdev.org/viewtopic.php?t=11485" class="extiw" title="topic:11485">Time: How do you store time in your OS?</a>
</li></ul>
<h3> <span class="mw-headline" id="External_Links"> External Links </span></h3>

<!-- 
NewPP limit report
Preprocessor node count: 117/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:1903-0!*!0!!en!*!* and timestamp 20180121063854 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=Time_And_Date&amp;oldid=20962">http://wiki.osdev.org/index.php?title=Time_And_Date&amp;oldid=20962</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="http://wiki.osdev.org/Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="Category:Time" title="Category:Time">Time</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Time_And_Date" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="Time_And_Date"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk"><span><a href="Talk:Time_And_Date"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="Time#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="Time_And_Date" >Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=Time_And_Date&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=Time_And_Date&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="Time#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="http://wiki.osdev.org/index.php" id="searchform">
		<input type='hidden' name="title" value="Special:Search"/>
				<input type="search" name="search" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput" />		<input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" />		<input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" />			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="/Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="/Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="/OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="/OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><askins/common/images/osdev.png);" href="/Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/Time_And_Date" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/Time_And_Date" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=Time_And_Date&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=Time_And_Date&amp;oldid=20962" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 3 July 2017, at 17:38.</li>
											<li id="footer-info-viewcount">This page has been accessed 24,116 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.046 secs. -->
	</body>
</html>
