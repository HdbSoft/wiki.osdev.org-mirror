<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>Compiler - OSDev Wiki</title>
<meta charset="UTF-8" />
<meta name="generator" content="MediaWiki 1.18.0" />
<link rel="shortcut icon" href="favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "Compiler", "wgTitle": "Compiler", "wgCurRevisionId": 19440, "wgArticleId": 3594, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": [], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script>
<!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Compiler action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">Compiler</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="Compiler#mw-head">navigation</a>,
					<a href="Compiler#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div lang="en" dir="ltr" class="mw-content-ltr"><p>A compiler is a program that translates code from a source programming language into target programming language. Usually the target programming language is of a lower level than the source programming language - compilers target languages such as C, byte code, assembly, or raw machine code.
</p><p>A popular reason for languages to target another high-level language such as C is that compilers can focus purely on translating the language, while getting all of the world-class optimizations of a production quality C compiler. This process is much more difficult for dynamic languages.
</p><p>Most compilers output assembly of some form or another, and pass it to an assembler. More rarely, some compilers may directly generate byte code or machine code without a third party assembler. (JIT compilers are a special class of embedded compilers that directly generate machine code.)
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Compiler#Other_tools"><span class="tocnumber">1</span> <span class="toctext">Other tools</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="Compiler#Assemblers"><span class="tocnumber">1.1</span> <span class="toctext">Assemblers</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="Compiler#Linkers"><span class="tocnumber">1.2</span> <span class="toctext">Linkers</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-4"><a href="Compiler#Stages"><span class="tocnumber">2</span> <span class="toctext">Stages</span></a>
<ul>
<li class="toclevel-2 tocsection-5"><a href="Compiler#Front_End"><span class="tocnumber">2.1</span> <span class="toctext">Front End</span></a>
<ul>
<li class="toclevel-3 tocsection-6"><a href="Compiler#Lexical_Analysis"><span class="tocnumber">2.1.1</span> <span class="toctext">Lexical Analysis</span></a></li>
<li class="toclevel-3 tocsection-7"><a href="Compiler#Parsing"><span class="tocnumber">2.1.2</span> <span class="toctext">Parsing</span></a></li>
<li class="toclevel-3 tocsection-8"><a href="Compiler#Abstract_syntax_tree"><span class="tocnumber">2.1.3</span> <span class="toctext">Abstract syntax tree</span></a></li>
<li class="toclevel-3 tocsection-9"><a href="Compiler#Semantical_graph"><span class="tocnumber">2.1.4</span> <span class="toctext">Semantical graph</span></a></li>
<li class="toclevel-3 tocsection-10"><a href="Compiler#Semantical_analysis"><span class="tocnumber">2.1.5</span> <span class="toctext">Semantical analysis</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-11"><a href="Compiler#Middle_end"><span class="tocnumber">2.2</span> <span class="toctext">Middle end</span></a>
<ul>
<li class="toclevel-3 tocsection-12"><a href="Compiler#Bytecode"><span class="tocnumber">2.2.1</span> <span class="toctext">Bytecode</span></a></li>
<li class="toclevel-3 tocsection-13"><a href="Compiler#Single_static_assignment"><span class="tocnumber">2.2.2</span> <span class="toctext">Single static assignment</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-14"><a href="Compiler#Back_end"><span class="tocnumber">2.3</span> <span class="toctext">Back end</span></a>
<ul>
<li class="toclevel-3 tocsection-15"><a href="Compiler#Interpreters"><span class="tocnumber">2.3.1</span> <span class="toctext">Interpreters</span></a></li>
<li class="toclevel-3 tocsection-16"><a href="Compiler#Bytecode_2"><span class="tocnumber">2.3.2</span> <span class="toctext">Bytecode</span></a></li>
<li class="toclevel-3 tocsection-17"><a href="Compiler#Assembly"><span class="tocnumber">2.3.3</span> <span class="toctext">Assembly</span></a></li>
<li class="toclevel-3 tocsection-18"><a href="Compiler#Machine_code"><span class="tocnumber">2.3.4</span> <span class="toctext">Machine code</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-19"><a href="Compiler#See_Also"><span class="tocnumber">3</span> <span class="toctext">See Also</span></a></li>
</ul>
</td></tr></table>
<h2> <span class="mw-headline" id="Other_tools"> Other tools </span></h2>
<p>Here are some other common tools
</p>
<h3> <span class="mw-headline" id="Assemblers"> Assemblers </span></h3>
<p>A compiler takes a high level code that is often severely abstracted away from the underlying machine instructions that will eventually execute.
</p><p>An assembler takes assembly code and outputs machine code. Assembly code is a one-to-one representation of machine instructions. Often the only transformation an assembler does is fill in labels (or keep a list of 'fixup' positions - which are filled in when multiple objects are linked together). More advanced assemblers may have macros or some kind of preprocessor, but often these macros generate machine instructions, so there is no abstraction away from the underlying instructions as a high level language could.
</p><p>The assembler can either generate a executable binary file (perfect for running) or an object file. An object file is different to an executable binary file, as it usually includes a list of exported symbols and/or fixup addresses. Object files may either referred to files that can be loaded dynamically at runtime (dynamic libraries) or files that are intended to be merges with other object files, to share their labels and to produce the final binary file.
</p>
<h3> <span class="mw-headline" id="Linkers"> Linkers </span></h3>
<p>A linker takes multiple object files, and combines them into either a single object file or the final binary file.
</p><p>Linkers are often used when you want to link your code with a library, or when your program has multiple source files, each compiled individually, and you want to produce one binary file.
</p><p>Each object file contains a list exported symbols and where they are located, and a list of 'fixup' positions and the symbol it's looking for. The linker then attempts to fill in the fixup positions with symbols from other files.
</p>
<h2> <span class="mw-headline" id="Stages"> Stages </span></h2>
<p>Compilers have multiple stages. Each stage takes a data structure created by the previous stage and transforms into a new data structure. Advance compilers that support multiple input languages or multiple output languages are usually divided into a front-end, middle-end, and back-end - where the middle and back ends can be swapped. Simpler compilers that only support one input language and one target language often do not bother to separate these ends.
</p>
<h3> <span class="mw-headline" id="Front_End"> Front End </span></h3>
<p>The front end of a compiler refers to the part of the compiler that reads the input language. In large compilers like <a href="GCC" title="GCC">GCC</a> and <a href="LLVM" title="LLVM">LLVM</a> that support multiple languages, the front ends and back ends can be mixed and matched to support different languages while sharing the same middle end.
</p>
<h4> <span class="mw-headline" id="Lexical_Analysis"> Lexical Analysis </span></h4>
<p><a href="Lexical_Analyzer" title="Lexical Analyzer">Lexical analysis</a> reads the source file and splits it into tokens. A token usually has a type, which may be a symbol such as FOR, INT, VOID. A token may also be a literal such as STRING_LITERAL, IDENTIFIER, FLOAT_LITERAL with extra data (such as the value of the literal or name of the identifier) attached. The lexer usually handles skipping over comments.
</p><p>Lexers can either be written by hand or they can be generated with a 'lexer generator' - which is a tool that takes in a lexical grammar and generates the code of a lexer.
</p>
<h4> <span class="mw-headline" id="Parsing"> Parsing </span></h4>
<p>The parsing stage reads the tokens from the lexer, and builds some form of representation of the code in memory. The representation is usually an abstract syntax tree.
</p><p>A parser can either be written by hand (research <a rel="nofollow" class="external text" href="http://en.wikipedia.org/wiki/Recursive_descent_parser">Recursive descent parser</a>) or generated with a 'parser generator' - which is a tool that takes in a language grammar and generates the code of a parser. It is during this stages that local variables and object names are registered as they are encountered.
</p><p>Some parser generators generate both parsers and lexers in one go and are called 'compiler compilers'.
</p>
<h4> <span class="mw-headline" id="Abstract_syntax_tree">Abstract syntax tree</span></h4>
<p>An abstract syntax tree (AST) is the representation of a program in tree format, and is usually the representation of the source code in tree format. The abstract syntax tree is usually closely tied to the input language and hence part of front-end, but sometimes it may be part of the middle-end. The abstract syntax tree is then converted into a language-independent intermediate representation.
</p>
<h4> <span class="mw-headline" id="Semantical_graph">Semantical graph</span></h4>
<p>Programming languages use identifiers to reference entities declared somewhere else. Before performing further analysis, identifiers should be resolved - connected to the declarations they mean. This turns AST into a graph. Graph is built using auxiliary data structure called symbol table or context.
</p><p>In some compilers the same data structure is used for AST and semantical graph. In this case parser may set declaration pointers to NULL or identifier resolution may be integrated into parsing process.
</p>
<h4> <span class="mw-headline" id="Semantical_analysis">Semantical analysis</span></h4>
<p>This stage calculates attributes of expressions and declarations and performs all kinds of validity checks: determine types of the expressions, resolves function overloads, checks covariance of the overridden functions, checks that constant variables are not mutated, checks that all enum elements are handled in the switch statement, etc.
</p>
<h3> <span class="mw-headline" id="Middle_end">Middle end</span></h3>
<p>The middle end acts as glue between the front and back ends. This is in an <a rel="nofollow" class="external text" href="http://en.wikipedia.org/wiki/Intermediate_representation#Intermediate_representation">intermediate representation</a> that is language-agnostic, and most optimizations are done here. Not all compilers have middle ends, sometimes abstract syntax trees directly produce machine code and skip through these steps.
</p>
<h4> <span class="mw-headline" id="Bytecode">Bytecode</span></h4>
<p>Some compilers have an internal bytecode language (which can be different from bytecode targets) for communicating between front ends and back ends. These bytecodes may either be register-based or stack based (stack based bytecode is <a rel="nofollow" class="external text" href="http://en.wikipedia.org/wiki/Stack_machine#Simple_compilers">incredibly easy to generate from an abstract syntax tree</a>).
</p>
<h4> <span class="mw-headline" id="Single_static_assignment">Single static assignment</span></h4>
<p>The abstract syntax tree or bytecode may be translated into <a rel="nofollow" class="external text" href="http://en.wikipedia.org/wiki/Static_single_assignment_form">single static assignment</a>, or SSA, form. SSA form is an intermediate representation of code where all variables are only assigned to once. SSA form is great for optimizations such as constant folding and dead code elimination. It is also an easy form that maps nicely to registers in the backend.
</p>
<h3> <span class="mw-headline" id="Back_end">Back end</span></h3>
<p>The back end of a compiler outputs the code into the target language. Backends often perform target-specific optimizations.
</p>
<h4> <span class="mw-headline" id="Interpreters">Interpreters</span></h4>
<p>Interpreters do not output code so they are technically not compilers, but do implement their front and middle ends similarly to compilers. They may execute the immediate representation, the abstract syntax tree, or as the language is parsing - bypassing a middle end completely. JIT (just-in-time) compilers generate machine code in memory and execute it immediately.
</p>
<h4> <span class="mw-headline" id="Bytecode_2">Bytecode</span></h4>
<p>A compiler may target bytecode. Bytecode is designed to be executed inside of a virtual machine, and is often simpler to target (due to not having to allocate a limited number of registers, and since it's higher level) than assembly. 
</p>
<h4> <span class="mw-headline" id="Assembly">Assembly</span></h4>
<p>Compilers may target assembly language. This is similar to targeting bytecode, except the compiler must allocate registers, and often deal with register and stack allocations, and <a rel="nofollow" class="external text" href="http://en.wikipedia.org/wiki/Calling_convention">calling conventions</a>.
</p><p>By outputing assembly language, the compiler leaves it up to the assembler to implement the object and executable formats, and to calculate code positions, labels, and encode the instructions in machine code.
</p>
<h4> <span class="mw-headline" id="Machine_code">Machine code</span></h4>
<p>Compilers may generate machine code (such as JIT compilers). This is often done when the compiler has all of the input code needed and does not need the output file to be merged with other output files. The process for outputting machine code is very similar to outputting assembly code, but the compiler must now resolve label positions, encode machine instructions, and deal with outputting in an <a href="Executable_Formats" title="Executable Formats">executable format</a>.
</p>
<h2> <span class="mw-headline" id="See_Also">See Also</span></h2>
<ul><li><a href="Category:Compilers" title="Category:Compilers">Category:Compilers</a>
</li></ul>

<!-- 
NewPP limit report
Preprocessor node count: 103/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3594-0!*!0!!en!*!* and timestamp 20180121064004 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=Compiler&amp;oldid=19440">http://wiki.osdev.org/index.php?title=Compiler&amp;oldid=19440</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id='catlinks' class='catlinks catlinks-allhidden'></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Compiler" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="Compiler"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk" class="new"><span><a href="http://wiki.osdev.org/index.php?title=Talk:Compiler&amp;action=edit&amp;redlink=1"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="Compiler#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="Compiler" >Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=Compiler&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=Compiler&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="Compiler#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="http://wiki.osdev.org/index.php" id="searchform">
		<input type='hidden' name="title" value="Special:Search"/>
				<input type="search" name="search" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput" />		<input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" />		<input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" />			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="/Mskins/common/images/osdev.png);" href="/Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/Compiler" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/Compiler" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=Compiler&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=Compiler&amp;oldid=19440" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 12 July 2016, at 13:54.</li>
											<li id="footer-info-viewcount">This page has been accessed 13,241 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.034 secs. -->
	</body>
</html>
