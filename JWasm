<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>JWasm - OSDev Wiki</title>
<meta charset="UTF-8" />
<meta name="generator" content="MediaWiki 1.18.0" />
<link rel="shortcut icon" href="favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "JWasm", "wgTitle": "JWasm", "wgCurRevisionId": 21651, "wgArticleId": 2436, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["Assemblers"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script>
<style type="text/css">/*<![CDATA[*/
.source-asm {line-height: normal;}
.source-asm li, .source-asm pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for asm
 * CSS class: source-asm, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.asm.source-asm .de1, .asm.source-asm .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.asm.source-asm  {font-family:monospace;}
.asm.source-asm .imp {font-weight: bold; color: red;}
.asm.source-asm li, .asm.source-asm .li1 {font-weight: normal; vertical-align:top;}
.asm.source-asm .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.asm.source-asm .li2 {font-weight: bold; vertical-align:top;}
.asm.source-asm .kw1 {color: #00007f; font-weight: bold;}
.asm.source-asm .kw2 {color: #0000ff; font-weight: bold;}
.asm.source-asm .kw3 {color: #00007f;}
.asm.source-asm .kw4 {color: #000000; font-weight: bold;}
.asm.source-asm .kw5 {color: #000000; font-weight: bold;}
.asm.source-asm .co1 {color: #666666; font-style: italic;}
.asm.source-asm .co2 {color: #adadad; font-style: italic;}
.asm.source-asm .es0 {color: #000099; font-weight: bold;}
.asm.source-asm .br0 {color: #009900; font-weight: bold;}
.asm.source-asm .sy0 {color: #339933;}
.asm.source-asm .st0 {color: #7f007f;}
.asm.source-asm .nu0 {color: #0000ff;}
.asm.source-asm .ln-xtra, .asm.source-asm li.ln-xtra, .asm.source-asm div.ln-xtra {background-color: #ffc;}
.asm.source-asm span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-JWasm action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">JWasm</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="JWasm#mw-head">navigation</a>,
					<a href="JWasm#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div lang="en" dir="ltr" class="mw-content-ltr"><p><b>JWasm Macro Assembler</b> is an x86 assembler that targets 16, 32 and 64 bit platforms. JWasm is designed as a MASM-compatible assembler and is available under the Sybase Open Watcom Public License. It produces binaries for  the DOS, Windows, Linux, OS/2 and FreeBSD operating systems. JWasm is an almost complete rewrite of the earlier Watcom assembler Wasm. JWasm is written in portable C and has been successfully tested with the Open Watcom development environment, the Microsoft Visual Studio family of development tools, the GNU (GCC) compiler and others. It is currently being upgraded by Japheth.
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="JWasm#History"><span class="tocnumber">1</span> <span class="toctext">History</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="JWasm#Usage"><span class="tocnumber">2</span> <span class="toctext">Usage</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="JWasm#Abbreviated_Notation"><span class="tocnumber">2.1</span> <span class="toctext">Abbreviated Notation</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="JWasm#OFFSET_Operator"><span class="tocnumber">2.2</span> <span class="toctext">OFFSET Operator</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="JWasm#Transient_Stack_Addressing"><span class="tocnumber">2.3</span> <span class="toctext">Transient Stack Addressing</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="JWasm#Square_Brackets"><span class="tocnumber">2.4</span> <span class="toctext">Square Brackets</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="JWasm#Limited_Type_Checking"><span class="tocnumber">2.5</span> <span class="toctext">Limited Type Checking</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="JWasm#Pseudo_High_Level_Emulation"><span class="tocnumber">2.6</span> <span class="toctext">Pseudo High Level Emulation</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-9"><a href="JWasm#Pre-processor"><span class="tocnumber">3</span> <span class="toctext">Pre-processor</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="JWasm#Licence"><span class="tocnumber">4</span> <span class="toctext">Licence</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="JWasm#External_Links.2C_Reference_And_Footnotes"><span class="tocnumber">5</span> <span class="toctext">External Links, Reference And Footnotes</span></a></li>
</ul>
</td></tr></table>
<h2> <span class="mw-headline" id="History">History</span></h2>
<p>JWasm is an upgrade of the earlier Open Watcom assembler Wasm. JWasm has been extensively rewritten to modernize, extend capacity and add additional platform support to it. Among its design targets is a very high level of MASM compatibility. Its initial release is dated 05/20/2008 as v1.7. The current version as of 1/19/2010 is v2.02, adding 64 bit capabilities. It is actively being updated to support the latest operating systems.
</p>
<h2> <span class="mw-headline" id="Usage">Usage</span></h2>
<p>JWasm conforms to the Microsoft Macro Assembler notation and uses the standard <a href="MASM" title="MASM">MASM</a> documentation and later as a technical reference.
</p>
<h3> <span class="mw-headline" id="Abbreviated_Notation">Abbreviated Notation</span></h3>
<p>This notation is a fully specified format which occurs in the following form:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">    <span class="kw1">mov</span> <span class="kw3">eax</span><span class="sy0">,</span> <span class="kw5">DWORD</span> <span class="kw4">PTR</span> <span class="br0">&#91;</span><span class="kw3">edi</span><span class="br0">&#93;</span></pre></div></div>
<p>Over time, the parsers in assemblers have improved to the stage where if the assembler can recognize the size of the data then the SIZE specifier may be omitted as such.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">    <span class="kw1">mov</span> <span class="kw3">eax</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="kw3">edi</span><span class="br0">&#93;</span></pre></div></div>
<p>This allows for clearer code that is easier to read. However, there are some contexts where the assembler cannot independently determine the data size; For example, if the source operand is a memory operand.  In this situation the historical data SIZE specifiers must be used. The following is an example of this situation.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">    <span class="kw1">movzx</span> <span class="kw3">eax</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="kw3">esi</span><span class="br0">&#93;</span>            <span class="co1">; generates an error - data SIZE cannot be determined by the assembler</span>
    <span class="kw1">movzx</span> <span class="kw3">eax</span><span class="sy0">,</span> <span class="kw5">BYTE</span> <span class="kw4">PTR</span> <span class="br0">&#91;</span><span class="kw3">esi</span><span class="br0">&#93;</span>   <span class="co1">; zero extend a BYTE into the 32 bit EAX register</span></pre></div></div>
<h3> <span class="mw-headline" id="OFFSET_Operator">OFFSET Operator</span></h3>
<p>JWasm's syntax makes a distinction between fixed and transient addressing using the <b>OFFSET</b> operator. Data written in either the initialised or uninitialised data sections is a known ADDRESS at assembly time, as are code labels, all of which are referenced by the <b>OFFSET</b> operator. Transient addressing is performed with the normal Intel mnemonics for reading the stack within a procedure.
</p><p>For a corresponding data entry in the initialised data section,
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">    textitem <span class="kw4">db</span> <span class="st0">&quot;This is a text item&quot;</span><span class="sy0">,</span><span class="nu0">0</span></pre></div></div>
<p>This data entry can be addressed in the following manner.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">    <span class="kw1">mov</span> <span class="kw3">eax</span><span class="sy0">,</span> <span class="kw4">OFFSET</span> textitem</pre></div></div>
<h3> <span class="mw-headline" id="Transient_Stack_Addressing">Transient Stack Addressing</span></h3>
<p>Operating systems provide memory for the area of memory referred to as the stack.  Under x86 hardware, the stack is the main method of transferring arguments to procedures. Arguments are normally placed on the stack by the PUSH mnemonic in the following form. This example assumes the <b>STDCALL</b> calling convention and 32 bit data size.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">    <span class="kw1">push</span> arg3
    <span class="kw1">push</span> arg2
    <span class="kw1">push</span> arg1
    <span class="kw1">call</span> FunctionName</pre></div></div>
<p>The CALL mnemonic pushed the return address onto the stack then branches to the address of the named procedure. If the procedure has a stack frame where the stack pointer register <b>ESP</b> is stored in the base pointer register <b>EBP</b> the first argument for the procedure occurs at address [ebp+8]. While this form of mnemonic notation can be written by experienced assembler programmers, the assembler provides a naming method to remove an un-necessary level of abstraction from writing code of this type.
</p><p>The programmer can use the <b>name</b> of the argument in the place of the direct [EBP+displacement] notation to make the code more readable with no loss of performance. When the programmer needs to use the ADDRESS of a transient stack variable (normally referred to as a <b>LOCAL</b> variable) they have a number of methods. In a prototyped function call they can use the <b>ADDR</b> operator to obtain the address of a <b>LOCAL</b> variable. Alternatively they can use the direct Intel mnemonic <b>LEA</b> to load the effective address of the variable into a register:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">    <span class="kw1">lea</span> <span class="kw3">eax</span><span class="sy0">,</span> named_local_variable</pre></div></div>
<h3> <span class="mw-headline" id="Square_Brackets">Square Brackets</span></h3>
<p>JWasm, like MASM, uses named variables to represent both fixed and transient addresses. Square brackets are used around expressions to denote that the contents are a memory operand. Programmers coming from a different background where square brackets are used as general ADDRESS indicators have at time had problems with this notation difference but JWasm tolerates the use of square brackets around named variables by simply ignoring them.
</p><p>There is some flexibility in how square brackets can be used in historical Intel notation compatible assemblers.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">    <span class="kw1">mov</span> <span class="kw3">eax</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="kw3">ecx</span><span class="sy0">+</span><span class="kw3">edx</span><span class="br0">&#93;</span>
    <span class="kw1">mov</span> <span class="kw3">eax</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="kw3">ecx</span><span class="br0">&#93;</span><span class="br0">&#91;</span><span class="kw3">edx</span><span class="br0">&#93;</span></pre></div></div>
<p>Both notations are correct here and in the second example the extra pair of square brackets function as an ADDITION operator.
</p>
<h3> <span class="mw-headline" id="Limited_Type_Checking">Limited Type Checking</span></h3>
<p>JWasm supports a pseudo high level notation for creating procedures that perform argument size and count checking. It is part of a system using the <b>PROC ENDP PROTO</b> and <b>INVOKE</b> operators. The <b>PROTO</b> operator is used to define a function prototype that has a matching <b>PROC</b> that is terminated with the <b>ENDP</b> operator. The prototyped procedure can then be called with the <b>INVOKE</b> operator which is protected by the limited size and argument count checking. There is additional notation at a more advanced level for turning off the automatically generated stack frame for the procedure where stack overhead in the procedure call may have an effect with very small procedures. JWasm is also capable of being written completely free of the pseudo high level notation using only bare Intel mnemonics.
</p><p>Using an example prototype from the 32 bit Windows API function set,
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">    SendMessage <span class="kw4">PROTO</span> <span class="kw5">STDCALL</span> <span class="sy0">:</span><span class="kw5">DWORD</span><span class="sy0">,:</span><span class="kw5">DWORD</span><span class="sy0">,:</span><span class="kw5">DWORD</span><span class="sy0">,:</span><span class="kw5">DWORD</span>
    SendMessage equ &lt;SendMessageA&gt;</pre></div></div>
<p>The code to call this function using the <b>INVOKE</b> notation is as follows.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">    <span class="kw4">invoke</span> SendMessage<span class="sy0">,</span>hWin<span class="sy0">,</span>WM_COMMAND<span class="sy0">,</span>wParam<span class="sy0">,</span>lParam</pre></div></div>
<p>Which is translated exactly to,
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">    <span class="kw1">push</span> lParam
    <span class="kw1">push</span> wParam
    <span class="kw1">push</span> WM_COMMAND
    <span class="kw1">push</span> hWin
    <span class="kw1">call</span> SendMessage</pre></div></div>
<p>The advantage of the <b>INVOKE</b> method is that it tests the size of the data types and the argument count and generates an assembly time error if the arguments do not match the prototype.
</p>
<h3> <span class="mw-headline" id="Pseudo_High_Level_Emulation">Pseudo High Level Emulation</span></h3>
<p>JWasm conforms to the historical MASM notation in terms of emulating high level control and loop structures.<br />
It supports the <b>.IF</b> block structure,
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">  <span class="sy0">.</span><span class="kw4">if</span>
    <span class="co1">; ...</span>
  <span class="sy0">.</span><span class="kw4">elseif</span>
    <span class="co1">; ...</span>
  <span class="sy0">.</span><span class="kw4">else</span>
    <span class="co1">; ...</span>
  <span class="sy0">.</span><span class="kw4">endif</span></pre></div></div>
<p>It also supports the <b>.WHILE</b> loop structure,
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">  <span class="sy0">.</span><span class="kw4">while</span> <span class="kw3">eax</span> &gt; <span class="nu0">0</span>
    <span class="kw1">sub</span> <span class="kw3">eax</span><span class="sy0">,</span> <span class="nu0">1</span>
  <span class="sy0">.</span><span class="kw4">endw</span></pre></div></div>
<p>And the <b>.REPEAT</b> loop structure.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">  <span class="sy0">.</span><span class="kw4">repeat</span>
    <span class="kw1">sub</span> <span class="kw3">eax</span><span class="sy0">,</span> <span class="nu0">1</span>
  <span class="sy0">.</span><span class="kw4">until</span> <span class="kw3">eax</span> &lt; <span class="nu0">1</span></pre></div></div>
<p>The high level emulation also supports C runtime comparison operators that work according to the same rules as Intel mnemonic comparisons. For the .IF block notation the distinction between SIGNED and UNSIGNED data is handles with a minor data type notation variation where the storage size <b>DWORD</b> which is by default UNSIGNED can also be specified as <b>SDWORD</b> for SIGNED comparison. This data type distinction is only appropriate for the pseudo high level notation as it is unused at the mnemonic level of code where the distinction is determined by the range of conditional evaluation techniques available in the Intel mnemonics.
</p><p>The combined pseudo high level emulation allows JWasm to more easily interface with the later current operating systems that use a C style application programming interface. Generally the pseudo high level interface is used for non-speed critical code where clarity and readability are the most important factors, speed critical code is usually written in directly in mnemonics.
</p>
<h2> <span class="mw-headline" id="Pre-processor">Pre-processor</span></h2>
<p>The pre-processor in JWasm emulates the capacity in the Microsoft Macro Assembler and for most practical purposes it is near enough to identical. It is an old design dating back to about 1990 When Microsoft introduced the MASM 6.00 series of assemblers that is known to experienced users as quirky and complicated to use for advanced macro designs. Notwithstanding its archaic format it is a reasonably powerful pre-processor with loop techniques, conditional testing, text manipulation commands and the normal text substitution methods associated with arguments passed to the pre-processor.
</p><p>At its simplest, a macro in JWasm is constructed as follows:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">    ItemName <span class="kw4">MACRO</span> argument1<span class="sy0">,</span> argument2<span class="sy0">,</span> argument3<span class="sy0">:</span><span class="kw5">VARARG</span>
      <span class="kw1">mov</span> argument1<span class="sy0">,</span> argument2
      <span class="kw1">mov</span> argument3<span class="sy0">,</span> argument1
    <span class="kw4">ENDM</span></pre></div></div>
<p>This macro is called as follows,
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">    ItemName <span class="kw3">eax</span><span class="sy0">,</span> <span class="kw3">ecx</span><span class="sy0">,</span> <span class="kw3">edx</span></pre></div></div>
<p>It is expanded by the pre-processor to,
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">    <span class="kw1">mov</span> <span class="kw3">eax</span><span class="sy0">,</span> <span class="kw3">ecx</span>
    <span class="kw1">mov</span> <span class="kw3">edx</span><span class="sy0">,</span> <span class="kw3">eax</span></pre></div></div>
<h2> <span class="mw-headline" id="Licence">Licence</span></h2>
<p>JWasm is licenced under the <b>Sybase Open Watcom Public License</b> and is available for use in environments and projects that are excluded by the Microsoft EULA for MASM. JWasm has no restrictions in writing Open Source software or writing software for non-Microsoft operating systems.
</p>
<ul><li><a rel="nofollow" class="external text" href="http://www.japheth.de/JWasm/License.html">JWasm License</a>
</li></ul>
<h2> <span class="mw-headline" id="External_Links.2C_Reference_And_Footnotes"> External Links, Reference And Footnotes </span></h2>
<ul><li><a rel="nofollow" class="external text" href="http://www.japheth.de/JWasm.html">JWasm Home (broken link)</a>
</li><li><a rel="nofollow" class="external text" href="https://github.com/JWasm/JWasm">JWasm on Github</a>
</li><li><a rel="nofollow" class="external text" href="http://sourceforge.net/projects/jwasm/">JWasm project page on SourceForge</a>
</li><li><a rel="nofollow" class="external text" href="http://www.masm32.com/board/index.php">The MASM Forum</a>
</li><li><a rel="nofollow" class="external text" href="http://www.intel.com/products/processor/manuals/">Intel manuals</a>
</li></ul>

<!-- 
NewPP limit report
Preprocessor node count: 211/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:2436-0!*!0!!en!*!* and timestamp 20180121034922 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=JWasm&amp;oldid=21651">http://wiki.osdev.org/index.php?title=JWasm&amp;oldid=21651</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="http://wiki.osdev.org/Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="Category:Assemblers" title="Category:Assemblers">Assemblers</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=JWasm" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="JWasm"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk" class="new"><span><a href="http://wiki.osdev.org/index.php?title=Talk:JWasm&amp;action=edit&amp;redlink=1"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="JWasm#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="JWasm" >Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=JWasm&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=JWasm&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="JWasm#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="http://wiki.osdev.org/index.php" id="searchform">
		<input type='hidden' name="title" value="Special:Search"/>
				<input type="search" name="search" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput" />		<input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" />		<input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" />			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="/Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="/Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="/OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="/OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="/OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="/Special:WhatLinksHere/JWasm" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="/Special:RecentChangesLinked/JWasm" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="/Special:SpecialPages" title="A list of all spskins/common/images/osdev.png);" href="/Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/JWasm" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/JWasm" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=JWasm&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=JWasm&amp;oldid=21651" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 25 October 2017, at 16:25.</li>
											<li id="footer-info-viewcount">This page has been accessed 16,907 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.031 secs. -->
	</body>
</html>
