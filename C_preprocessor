<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>C preprocessor - OSDev Wiki</title>
<meta charset="UTF-8" />
<meta name="generator" content="MediaWiki 1.18.0" />
<link rel="shortcut icon" href="favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "C_preprocessor", "wgTitle": "C preprocessor", "wgCurRevisionId": 14169, "wgArticleId": 2352, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["C", "Tutorials"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script>
<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #b1b100;}
.c.source-c .kw2 {color: #000000; font-weight: bold;}
.c.source-c .kw3 {color: #000066;}
.c.source-c .kw4 {color: #993333;}
.c.source-c .co1 {color: #666666; font-style: italic;}
.c.source-c .co2 {color: #339933;}
.c.source-c .coMULTI {color: #808080; font-style: italic;}
.c.source-c .es0 {color: #000099; font-weight: bold;}
.c.source-c .es1 {color: #000099; font-weight: bold;}
.c.source-c .es2 {color: #660099; font-weight: bold;}
.c.source-c .es3 {color: #660099; font-weight: bold;}
.c.source-c .es4 {color: #660099; font-weight: bold;}
.c.source-c .es5 {color: #006699; font-weight: bold;}
.c.source-c .br0 {color: #009900;}
.c.source-c .sy0 {color: #339933;}
.c.source-c .st0 {color: #ff0000;}
.c.source-c .nu0 {color: #0000dd;}
.c.source-c .nu6 {color: #208080;}
.c.source-c .nu8 {color: #208080;}
.c.source-c .nu12 {color: #208080;}
.c.source-c .nu16 {color:#800080;}
.c.source-c .nu17 {color:#800080;}
.c.source-c .nu18 {color:#800080;}
.c.source-c .nu19 {color:#800080;}
.c.source-c .me1 {color: #202020;}
.c.source-c .me2 {color: #202020;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-bash {line-height: normal;}
.source-bash li, .source-bash pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for bash
 * CSS class: source-bash, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.bash.source-bash .de1, .bash.source-bash .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.bash.source-bash  {font-family:monospace;}
.bash.source-bash .imp {font-weight: bold; color: red;}
.bash.source-bash li, .bash.source-bash .li1 {font-weight: normal; vertical-align:top;}
.bash.source-bash .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.bash.source-bash .li2 {font-weight: bold; vertical-align:top;}
.bash.source-bash .kw1 {color: #000000; font-weight: bold;}
.bash.source-bash .kw2 {color: #c20cb9; font-weight: bold;}
.bash.source-bash .kw3 {color: #7a0874; font-weight: bold;}
.bash.source-bash .co0 {color: #666666; font-style: italic;}
.bash.source-bash .co1 {color: #800000;}
.bash.source-bash .co2 {color: #cc0000; font-style: italic;}
.bash.source-bash .co3 {color: #000000; font-weight: bold;}
.bash.source-bash .co4 {color: #666666;}
.bash.source-bash .es1 {color: #000099; font-weight: bold;}
.bash.source-bash .es2 {color: #007800;}
.bash.source-bash .es3 {color: #007800;}
.bash.source-bash .es4 {color: #007800;}
.bash.source-bash .es5 {color: #780078;}
.bash.source-bash .es_h {color: #000099; font-weight: bold;}
.bash.source-bash .br0 {color: #7a0874; font-weight: bold;}
.bash.source-bash .sy0 {color: #000000; font-weight: bold;}
.bash.source-bash .st0 {color: #ff0000;}
.bash.source-bash .st_h {color: #ff0000;}
.bash.source-bash .nu0 {color: #000000;}
.bash.source-bash .re0 {color: #007800;}
.bash.source-bash .re1 {color: #007800;}
.bash.source-bash .re2 {color: #007800;}
.bash.source-bash .re4 {color: #007800;}
.bash.source-bash .re5 {color: #660033;}
.bash.source-bash .ln-xtra, .bash.source-bash li.ln-xtra, .bash.source-bash div.ln-xtra {background-color: #ffc;}
.bash.source-bash span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-C_preprocessor action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">C preprocessor</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="C_preprocessor#mw-head">navigation</a>,
					<a href="C_preprocessor#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div lang="en" dir="ltr" class="mw-content-ltr"><p>The C preprocessor is the first step in the process of translating C/C++ source code into a binary. Generally, the process walked through is preprocessing, compiling and finally linking. In trivial environments, the preprocessor is used only for <b>#include</b>ing header files, and providing "header guards" to avoid multiple inclusions. However, the preprocessor can do much more, and can be very useful - not only for C/C++ sources, but for your Assembly sources as well. Use it with care, since it can also obfuscate your source code and introduce bugs that may be very difficult to debug.
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="C_preprocessor#General"><span class="tocnumber">1</span> <span class="toctext">General</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="C_preprocessor#Includes"><span class="tocnumber">2</span> <span class="toctext">Includes</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="C_preprocessor#Preprocessor_Macros.2C_pt._1"><span class="tocnumber">3</span> <span class="toctext">Preprocessor Macros, pt. 1</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="C_preprocessor#Conditional_Compilation"><span class="tocnumber">4</span> <span class="toctext">Conditional Compilation</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="C_preprocessor#Header_Guards"><span class="tocnumber">5</span> <span class="toctext">Header Guards</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="C_preprocessor#Preprocessor_Macros.2C_pt._2"><span class="tocnumber">6</span> <span class="toctext">Preprocessor Macros, pt. 2</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="C_preprocessor#.23undef"><span class="tocnumber">7</span> <span class="toctext">#undef</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="C_preprocessor#Predefined_Tokens"><span class="tocnumber">8</span> <span class="toctext">Predefined Tokens</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="C_preprocessor#assert.28.29"><span class="tocnumber">9</span> <span class="toctext">assert()</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="C_preprocessor#See_also"><span class="tocnumber">10</span> <span class="toctext">See also</span></a>
<ul>
<li class="toclevel-2 tocsection-11"><a href="C_preprocessor#Articles"><span class="tocnumber">10.1</span> <span class="toctext">Articles</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="C_preprocessor#External_Links"><span class="tocnumber">10.2</span> <span class="toctext">External Links</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h2> <span class="mw-headline" id="General"> General </span></h2>
<p>The preprocessor handles <i>preprocessor directives</i>, which are lines that begin with <i> '#' </i>. Really old compiler versions demanded that the <i> '#' </i> be placed in column 1, modern versions of C and C++ allow preprocessor directives to begin in any column, as long as the first non-whitespace character of the line is <i> '#' </i>.
</p><p>Lines with preprocessor directives can be "continued" by placing a backslash ('\') as the last character of the line.
</p>
<h2> <span class="mw-headline" id="Includes"> Includes </span></h2>
<p>The most familiar use of the preprocessor is to include header files (containing function declarations, definition of constants etc.):
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;stdio.h&gt;</span>
<span class="co2">#include &quot;myheader.h&quot;</span></pre></div></div>
<p>The effect is that the contents of the given header file are pasted into the source file. The <i>technical</i> difference between &lt;&gt; and "" is that the compiler is allowed to satisfy &lt;&gt; includes internally, i.e. without actually accessing any on-disk files of that name. None of the prominent compilers do this, to the knowledge of the author, but it has become common practice to use &lt;&gt; for system headers and "" for your own header files.
</p><p>Header files are searched for in a list of preconfigured directories (the <i>include path</i>). This list of include directories can be prepended to by the user (e.g. by using the "-I &lt;directory&gt;" option of <a href="GCC" title="GCC">GCC</a>).
</p><p>The <i>#include</i> statement can be used in other contexts, too: As a replacement for assembler-specific include directives, for example.
</p><p>Another possible use is "templating" a piece of code that keeps recurring in more than one source file but could not be put into a seperate function. This way, you could still reduce redundancy by keeping the shared code in a single file and merely <i>#include</i>ing it where needed. This, however, is a pretty ugly construct and should be avoided if possible.
</p>
<h2> <span class="mw-headline" id="Preprocessor_Macros.2C_pt._1"> Preprocessor Macros, pt. 1 </span></h2>
<p>The preprocessor can <i>define</i> tokens. It is good custom to write these tokens in ALL CAPS. (See pt. 2 as for why.)
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#define MYTOKEN</span></pre></div></div>
<p>Most compilers also allow the definition of preprocessor tokens on the command line, e.g. the "-D MYTOKEN" option for <a href="GCC" title="GCC">GCC</a>.
</p>
<h2> <span class="mw-headline" id="Conditional_Compilation"> Conditional Compilation </span></h2>
<p>The preprocessor can <i>conditionally</i> select which parts of source code to compile, depending on whether a given token is defined or not (see above).
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#define MYTOKEN</span>
&#160;
<span class="co2">#ifdef MYTOKEN</span>
<span class="coMULTI">/* This source will be compiled */</span>
<span class="co2">#endif</span>
&#160;
<span class="co2">#ifndef MYTOKEN</span>
<span class="coMULTI">/* This source will be removed */</span>
<span class="co2">#else</span>
<span class="coMULTI">/* This source will be compiled */</span>
<span class="co2">#endif</span></pre></div></div>
<p>Note that such <i>#if</i> / <i>#ifdef</i> / <i>#ifndef</i> - <i>#endif</i> sections can be nested.
</p>
<h2> <span class="mw-headline" id="Header_Guards"> Header Guards </span></h2>
<p>Non-trivial projects face the problem that a header file includes other header files in turn. Let's say both <i>abc.h</i> and <i>def.h</i> both include <i>xyz.h</i>. Should you <i>#include</i> both <i>abc.h</i> and <i>def.h</i> in your source, you will likely end up with warnings and errors about redefinitions etc.
</p><p>The solution are <i>header guards</i>, a combination of conditional compilation and token definition:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="coMULTI">/* abc.h */</span>
&#160;
<span class="co2">#ifndef ABC_H_</span>
<span class="co2">#define ABC_H_</span>
&#160;
<span class="coMULTI">/* declaractions here */</span>
&#160;
<span class="co2">#endif</span></pre></div></div>
<h2> <span class="mw-headline" id="Preprocessor_Macros.2C_pt._2"> Preprocessor Macros, pt. 2 </span></h2>
<p>Preprocessor tokens can also be assigned a <i>value</i>.
</p><p>The preprocessor will replace any occurrence of a defined token in the source code with the value the token has been defined to. <i>This is also true for tokens that have been defined to nothing</i> (as in pt. 1 above). This is the reason why preprocessor tokens are customarily written in ALL CAPS - to avoid accidential clashes with identifiers used in the source code itself.
</p><p>The <i>#if</i> statement can be used to base conditional compilation on token values. Note that the preprocessor can only work with compile-time constants. Compiler-evaluated code like `sizeof()` cannot be used in preprocessor directives. On the upside, the preprocessor can natively handle non-numerical values.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#define MYTOKEN foo</span>
<span class="co2">#define OTHERTOKEN 42</span>
&#160;
<span class="co2">#if MYTOKEN == foo</span>
<span class="coMULTI">/* This code will be compiled */</span>
<span class="co2">#elif MYTOKEN == bar</span>
<span class="coMULTI">/* This code won't */</span>
<span class="co2">#endif</span>
&#160;
<span class="co2">#if OTHERTOKEN &gt; 40</span>
<span class="coMULTI">/* Will be compiled. */</span>
<span class="co2">#endif</span>
&#160;
<span class="co2">#if OTHERTOKEN&#160;!= 42</span>
<span class="coMULTI">/* Won't be compiled. */</span>
<span class="co2">#endif</span></pre></div></div>
<p>The <i>#if</i> directive also allows for a simple construct to disable a region of code without having to worry about nested <i>/* ... */</i> style comments:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#if 0</span>
<span class="coMULTI">/* disabled code */</span>
<span class="co2">#endif</span></pre></div></div>
<p>Such code can easily be re-enabled temporarily with no more effort than replacing the "0" with a "1". Source comments as to why you disabled code this way are in order.
</p>
<h2> <span class="mw-headline" id=".23undef"> #undef </span></h2>
<p>Using the <i>#undef</i> directive, a preprocessor token can be undefined. This is useful for trickier setups where you might want to redefine a token to a different value: Redefinitions generate a warning message, undefinitions of undefined tokens don't.
</p><p>This should not be constructed as an advice to <i>always</i> use <i>#undef</i> before a <i>#define</i>. Those warnings might actually be pointing to a real problem in your logic. Use <i>#undef</i> with care.
</p>
<h2> <span class="mw-headline" id="Predefined_Tokens"> Predefined Tokens </span></h2>
<p>The preprocessor provides a couple of tokens which are automatically defined to the appropriate values - something very useful when constructing error messages or tracing messages. Note that some obsolete compilers might balk at <i>__func__</i> and not all tokens may be supported or implemented by all compilers.
</p>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1}}}">
<tr>
<th> Preprocessor Token
</th>
<th> Explanation
</th></tr>
<tr>
<td> __FILE__ </td>
<td> Holds the name of the current source file being compiled (as a string).
</td></tr>
<tr>
<td> __LINE__ </td>
<td> Holds the current line being compiled (as an integer).
</td></tr>
<tr>
<td> __DATE__ </td>
<td> Holds the date when the compilation process began (a string with the format "Mmm dd yyyy").
</td></tr>
<tr>
<td> __TIME__ </td>
<td> Same as the previous, but the time (a string with the format "hh:mm:ss").
</td></tr>
<tr>
<td> __cplusplus </td>
<td> When defined, the value indicates that C++ compilation is active. When the compiler is (fully) compliant to the standards, the value should be &gt;= 199711L.
</td></tr>
<tr>
<td> __STDC__ </td>
<td> When defined, the value indicates that the compiler is (fully) compliant with the ANSI C standard.
</td></tr>
<tr>
<td> __func__ </td>
<td> Holds the name of the function it is used within (as a string).
</td></tr></table>
<p>Different compilers may define extra preprocessor tokens. Visual C++ for example may define _MSC_VER __cplusplus_cli. See the link section below for more information.
</p>
<h2> <span class="mw-headline" id="assert.28.29"> assert() </span></h2>
<p>Assertions are used to catch situations which should never happen, even under error circumstances. If the condition given in the parantheses does not evaluate to "true", a diagnosis is printed which contains source file name, line number, and (since C99) name of the current function; the program then calls abort().
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;assert.h&gt;</span>
&#160;
<span class="kw3">assert</span><span class="br0">&#40;</span> <span class="kw4">sizeof</span><span class="br0">&#40;</span><span class="kw4">struct</span> free_memory_block<span class="br0">&#41;</span> <span class="sy0">==</span> <span class="nu0">8</span> <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw3">assert</span><span class="br0">&#40;</span> <span class="nu0">1</span> <span class="sy0">!=</span> <span class="nu0">2</span> <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw3">assert</span><span class="br0">&#40;</span> gdt_ptr <span class="sy0">!=</span> <span class="kw2">null</span> <span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div>
<p>For production code, assertions may be turned off by defining NDEBUG:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="kw2">gcc</span> <span class="re5">-DNDEBUG</span> ...</pre></div></div>
<p>Note that &lt;assert.h&gt; does not have (or need) a header guard, i.e. can be included multiple times in a source file, and that whether NDEBUG is defined or not is evaluated anew <i>at every inclusion of &lt;assert.h&gt;</i>. You can thus enable / disable assertions at a very fine-grained level if necessary:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="co2">#include &lt;assert.h&gt;</span>
&#160;
    <span class="coMULTI">/* assert() at this point only fails-on-false if NDEBUG is not defined */</span>
    <span class="kw3">assert</span><span class="br0">&#40;</span> isChecksumCorrect<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
<span class="co2">#ifdef NDEBUG</span>
<span class="coMULTI">/* Hard-enabling of assert() even if NDEBUG is defined */</span>
<span class="co2">#define NDEBUG_WAS_SET</span>
<span class="co2">#undef NDEBUG</span>
<span class="co2">#include &lt;assert.h&gt;</span>
<span class="co2">#endif</span>
&#160;
    <span class="coMULTI">/* assert() in this block of code should fail-on-false even in production */</span>
    <span class="kw3">assert</span><span class="br0">&#40;</span> isChecksumCorrect<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
<span class="co2">#ifdef NDEBUG_WAS_SET</span>
<span class="coMULTI">/* Restoring NDEBUG if it was enabled originally */</span>
<span class="co2">#define NDEBUG</span>
<span class="co2">#include &lt;assert.h&gt;</span>
<span class="co2">#endif</span></pre></div></div>
<h2> <span class="mw-headline" id="See_also"> See also </span></h2>
<h3> <span class="mw-headline" id="Articles"> Articles </span></h3>
<ul><li> <a href="C" title="C">C</a>
</li></ul>
<h3> <span class="mw-headline" id="External_Links"> External Links </span></h3>
<ul><li> <a rel="nofollow" class="external text" href="http://gcc.gnu.org/onlinedocs/cpp/Macro-Pitfalls.html#Macro-Pitfalls">Macro Pitfalls</a> - A number of counter-intuitive consequences of macros and macro expanding design.
</li><li> <a rel="nofollow" class="external text" href="http://gcc.gnu.org/onlinedocs/cpp/">The GNU C preprocessor manual</a>
</li><li> <a rel="nofollow" class="external text" href="http://msdn.microsoft.com/en-us/library/b0084kay(VS.80).aspx">VC++ preprocessor information</a>
</li></ul>

<!-- 
NewPP limit report
Preprocessor node count: 152/1000000
Post-expand include size: 162/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:2352-0!*!0!!en!*!* and timestamp 20180121073951 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=C_preprocessor&amp;oldid=14169">http://wiki.osdev.org/index.php?title=C_preprocessor&amp;oldid=14169</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="http://wiki.osdev.org/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="Category:C" title="Category:C">C</a></li><li><a href="Category:Tutorials" title="Category:Tutorials">Tutorials</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=C_preprocessor" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="C_preprocessor"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk"><span><a href="Talk:C_preprocessor"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="C_preprocessor#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="C_preprocessor" >Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=C_preprocessor&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=C_preprocessor&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="C_preprocessor#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="http://wiki.osdev.org/index.php" id="searchform">
		<input type='hidden' name="title" value="Special:Search"/>
				<input type="search" name="search" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput" />		<input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" />		<input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" />			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="/Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="/Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="/OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="/OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="/OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!skins/common/images/osdev.png);" href="/Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/C_preprocessor" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/C_preprocessor" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=C_preprocessor&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=C_preprocessor&amp;oldid=14169" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 19 December 2012, at 10:14.</li>
											<li id="footer-info-viewcount">This page has been accessed 22,198 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.032 secs. -->
	</body>
</html>
