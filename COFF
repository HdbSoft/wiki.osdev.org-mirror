<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>COFF - OSDev Wiki</title>
<meta charset="UTF-8" />
<meta name="generator" content="MediaWiki 1.18.0" />
<link rel="shortcut icon" href="favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "COFF", "wgTitle": "COFF", "wgCurRevisionId": 9834, "wgArticleId": 2811, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["Stubs", "Executable Formats"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script>
<!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-COFF action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">COFF</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="COFF#mw-head">navigation</a>,
					<a href="COFF#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div lang="en" dir="ltr" class="mw-content-ltr"><p>COFF stands for Common Object File Format.  It is a file format used for storing compiled code, such as that outputted by a compiler or a linker.
</p><p>Like most compiler file formats, COFF defines structures within the file for storing information about the sections of the program, such as .text and .data, and about the symbols that the program declares or defines.
</p><p>COFF can be used to store individual functions or symbols, fragments of programs, libraries or entire executables.
</p><p>The Microsoft PE Executable format (strictly PE/COFF) contains a version of COFF.
</p><p>Whilst COFF is still around today, it is regarded as being overly complicated and in many cases its use has been replaced by ELF or other executable file formats.
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="COFF#Microsoft_PE.2FCOFF"><span class="tocnumber">1</span> <span class="toctext">Microsoft PE/COFF</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="COFF#File_Format"><span class="tocnumber">2</span> <span class="toctext">File Format</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="COFF#File_Header"><span class="tocnumber">2.1</span> <span class="toctext">File Header</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="COFF#Optional_Header"><span class="tocnumber">2.2</span> <span class="toctext">Optional Header</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="COFF#Section_Header"><span class="tocnumber">2.3</span> <span class="toctext">Section Header</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="COFF#Relocation_Entries"><span class="tocnumber">2.4</span> <span class="toctext">Relocation Entries</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="COFF#Line_Number_Entries"><span class="tocnumber">2.5</span> <span class="toctext">Line Number Entries</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="COFF#Symbol_Table"><span class="tocnumber">2.6</span> <span class="toctext">Symbol Table</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="COFF#String_Table"><span class="tocnumber">2.7</span> <span class="toctext">String Table</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-10"><a href="COFF#Example"><span class="tocnumber">3</span> <span class="toctext">Example</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="COFF#See_Also"><span class="tocnumber">4</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-12"><a href="COFF#External_Links"><span class="tocnumber">4.1</span> <span class="toctext">External Links</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h2> <span class="mw-headline" id="Microsoft_PE.2FCOFF">Microsoft PE/COFF</span></h2>
<dl><dd><i>Main article:</i> <a href="PE" title="PE">PE</a>
</dd></dl>
<p>Most Microsoft EXE and DLL files use a file format that is based on COFF.
Microsoft's Portable Executable (PE/COFF) standard is largely compatible with the COFF specification with a few notable exceptions.  
</p><p>Firstly, the COFF File Header is not placed at the beginning of the file if the file is an image (executable) file.  In brief, a PE/COFF Image contains a pointer at offset 0x3C which points to the PE header.  The COFF File Header immediately follows this PE signature.  More information can be found in the <a href="PE" title="PE">PE</a> article.
</p><p>Secondly, the PE/COFF format also changes some of the COFF magic values (including the File Header one) and assigns them special meanings.
</p><p>More information can be found in the "Microsoft Portable Executable and Object File Format Specification" document.
</p>
<h2> <span class="mw-headline" id="File_Format">File Format</span></h2>
<p>COFF files contain a number of different tables, as well as areas of data that are referenced by the tables.
</p>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1}}}">

<tr>
<th> Structure
</th>
<th> Purpose
</th>
<th> Location
</th>
<th> Length
</th></tr>
<tr>
<td> File Header
</td>
<td> Stores the basic information about the file as well as pointers to the other structures.
</td>
<td> At the beginning of the file, except in Microsoft PE/COFF Image files (see above).
</td>
<td> Fixed structure length.
</td></tr>
<tr>
<td> Optional Header
</td>
<td> Stores additional information about the execution of the file.
</td>
<td> Only present if indicated by the File Header.  Immediately follows the File Header.
</td>
<td> Specified in the File Header
</td></tr>
<tr>
<td> Section Header
</td>
<td> Stores information about the different sections defined in the file.
</td>
<td> Immediately following the Optional Header.  If no Optional Header is provided, immediately follows the File Header.
</td>
<td> Calculated by the number of sections (specified in the File Header) multiplied by the fixed structure length.
</td></tr>
<tr>
<td> Section Relocation Table
</td>
<td> Allows the file to be relocated to any area of memory by providing information on which addresses need to be changed.
</td>
<td> At most one table exists for each Section.  Location is indicated by the corresponding Section Header.
</td>
<td> Calculated by the number of relocation entries (specified in the Section header) multiplied by the fixed structure length.
</td></tr>
<tr>
<td> Section Line Number Table
</td>
<td> Provides debugging information to map code addresses to source file line numbers.
</td>
<td> At most one table exists for each Section.  Location is indicated by the corresponding Section Header.
</td>
<td> Calculated by the number of line number entries (specified in the Section header) multiplied by the fixed structure length.
</td></tr>
<tr>
<td> Symbol Table
</td>
<td> Stores information on each symbol defined or declared by the code.
</td>
<td> Indicated to a pointer in the File Header.
</td>
<td> Calculated by the number of symbols (specified in the File Header) multiplied by the fixed structure length.
</td></tr>
<tr>
<td> String Table
</td>
<td> Stores any Section or Symbol names that are longer than eight characters.
</td>
<td> Immediately following the Symbol table.
</td>
<td> Indicated by the first 32 bits of the string table, evaluated as a long
</td></tr></table>
<p>Most COFF files contain additional space between the end of the Section table and the start of the Symbol table which stores the data for the sections themselves, although the location of this data relative to the Symbol (and String) table does not seem to be specified by the standard.
</p><p><br />
</p>
<h3> <span class="mw-headline" id="File_Header">File Header</span></h3>
<p>The file header exists at the beginning of a COFF file (except in Microsoft PE/COFF Image files as noted above).  It contains a magic number field and other general information about the File.
</p><p>The structure of this header can be found in filehdr.h, and is 20 bytes longs.
</p>
<pre>
{
	unsigned short 	f_magic;	/* Magic number */	
	unsigned short 	f_nscns;	/* Number of Sections */
	long 		f_timdat;	/* Time &amp; date stamp */
	long 		f_symptr;	/* File pointer to Symbol Table */
	long 		f_nsyms;	/* Number of Symbols */
	unsigned short 	f_opthdr;	/* sizeof(Optional Header) */
	unsigned short 	f_flags;	/* Flags */
}
</pre>
<p>The magic number varies from implementation to implementation, for example, DJGPP generates COFF files with the value 0x14C in this field.
</p><p>The number of sections indicates how many section structures should be expected in the Section table.
</p><p>The time and date stamp indicate when the COFF file was created.  This field is of the type time_t, being the number of seconds since epoch ( 1970-01-01 00:00:00 GMT ).
</p><p>The Symbol table pointer indicates the offset within the file where the Symbol table begins.
</p><p>The number of symbols indicate how many (fixed length) symbol structures are in the symbol table.  This value coupled with the Symbol table pointer allow you to calculate where the String table starts.
</p><p>The flags field usually indicates the state of the file.  Usually this is used to quickly lookup information that could be calculated from the rest of the file.  For example, one bit of this field indicates if relocation information has been removed from the file, another bit indicates if all the external symbols have been resolved, etc.
</p>
<h3> <span class="mw-headline" id="Optional_Header">Optional Header</span></h3>
<p>The Optional header provides run-time information about the file and therefore is only present in executable COFF files.
</p><p>This header is only present in the file if the File header field f_opthdr is non-zero and, if present, immediately follows the File header.
</p><p>The structure of this header can be found in aouthdr.h, and is 28 bytes long.
</p>
<pre>
{
	unsigned short 	magic;          /* Magic Number                    */
	unsigned short 	vstamp;         /* Version stamp                   */
	unsigned long 	tsize;          /* Text size in bytes              */
	unsigned long 	dsize;          /* Initialised data size           */
	unsigned long 	bsize;          /* Uninitialised data size         */
	unsigned long 	entry;          /* Entry point                     */
	unsigned long 	text_start;     /* Base of Text used for this file */
	unsigned long 	data_start;     /* Base of Data used for this file */
}
</pre>
<h3> <span class="mw-headline" id="Section_Header">Section Header</span></h3>
<p>The Section table provides information about the individual section contained within the file.
</p><p>The Section table is an array of Section header structures.  It immediately follows the Optional header (or File header if no Optional header exists) and its length in Section header structures is given by the f_nscns field in the File header.
</p><p>Unlike most other tables, the Section table is 1-based, meaning that the first Section is referred to as Section 1 instead of Section 0.  This is done because in the Symbol table, a Section number of 0 has a special meaning.
</p><p>The structure of this header can be found in scnhdr.h, and is 40 bytes long.
</p>
<pre>
{
	char		s_name[8];	/* Section Name */
	long		s_paddr;	/* Physical Address */
	long		s_vaddr;	/* Virtual Address */
	long		s_size;		/* Section Size in Bytes */
	long		s_scnptr;	/* File offset to the Section data */
	long		s_relptr;	/* File offset to the Relocation table for this Section */
	long		s_lnnoptr;	/* File offset to the Line Number table for this Section */
	unsigned short	s_nreloc;	/* Number of Relocation table entries */
	unsigned short	s_nlnno;	/* Number of Line Number table entries */
	long		s_flags;	/* Flags for this section */
}
</pre>
<p>The Section name field stores the name of this section if it is eight characters or fewer, otherwise this field contains a pointer into the String table.  See the entry on the String table below.
</p><p>The Physical address field stores the memory start address for this file.  If the file has been linked so that this section is to be loaded to a specific location in memory, this field will have been set to that value.
</p><p>The Virtual address field is equivalent to the Physical address field for the Virtual memory space.  However, in almost all instances, these two fields contain the same value.
</p><p>The s_size field contains the Section size in bytes.
</p><p>The Section pointer field contains the file offset where the raw data for this section begins.  This, coupled with the Section size, can be used to load the section data.  If this is a BSS Section (indicated in the Section's Flags field), the section may well have a size, but a Section pointer of zero.
</p><p>The s_relptr indicates the file offset for the Relocation information for this Section.  The number of entries in the Relocation table is given in the s_nreloc field.  If the s_nreloc field is zero, the section does not contain any Relocation information.
</p><p>Like the Relocation pointer, the s_lnnoptr field indicates the file offset to the Line number table for the section, whose length in entries is given in the s_nlnno field.  As with the s_nreloc, if the s_nlnno is zero then the Section contains no Line number information.
</p><p>The Flags field gives important information on how the Section should be handled when being processed.  The most important flag values relate to the type of field as follows:
</p>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1}}}">

<tr>
<th> Value
</th>
<th> Define
</th>
<th> Meaning if set
</th></tr>
<tr>
<td> 0x0020
</td>
<td> STYP_TEXT
</td>
<td> The section contains executable code.
</td></tr>
<tr>
<td> 0x0040
</td>
<td> STYP_DATA
</td>
<td> The section contains initialised data.
</td></tr>
<tr>
<td> 0x0080
</td>
<td> STYP_BSS
</td>
<td> The COFF file contains no data for this section, but needs space to be allocated for it.
</td></tr></table>
<h3> <span class="mw-headline" id="Relocation_Entries">Relocation Entries</span></h3>
<p>Using Relocation entries, it is possible to load a section of code into an arbitrary memory address and then modify the code so that the memory addresses for Symbols are correct.  This means you can take a COFF file, load the .text section of the file into one place, the .data section into another, the .bss section somewhere else again, and then update the .text section so that the code is able to find its values and function correctly.
</p><p>The Relocation Table is an array of Relocation Entry structures and is zero based.
</p><p>A COFF file can contain a Relocation table for each Section.  .text ( STYP_TEXT ) sections often have relocation information, it is also possible for .data ( STYP_DATA ) and other sections to have relocation information.
</p><p>The Relocation table for a section has its location and length stored in the Section's header.
</p><p>The structure of this header can be found in reloc.h, and is 10 bytes long.
</p>
<pre>
{
	long		r_vaddr;	/* Reference Address */
	long		r_symndx;	/* Symbol index */
	unsigned short	r_type;		/* Type of relocation */
}
</pre>
<p>The Address field gives the offset within the Section's raw data where the address starts.  The reference will almost always be a 32-bit value starting at the given address, but this is dependant on implementation and the r_type field.
</p><p>The Symbol index gives the (zero based) index in the Symbol table to which the reference refers.  Once you have loaded the COFF file into memory and know where each symbol is, you find the new updated address for the given symbol and update the reference accordingly.
</p><p>The r_type indicates how the address should be updated.  It is, unfortunately, implementation specific.  For an example, DJGPP can indicate that this be the 32-bit absolute address of the symbol (type 6), or it can specify a 32-bit address that is relative to the location of the reference (type 20).
</p>
<h3> <span class="mw-headline" id="Line_Number_Entries">Line Number Entries</span></h3>
<p>Line number entries are used by debugging programs to relate symbols and physical instruction addresses to source file line numbers.
</p><p>The Line Number table is an array of Line Number Entry structures and is zero based.
</p><p>A COFF file can contain a Line number table for each Section, but it would be unusual to find relocation information for anything other than .text ( STYP_TEXT ) Sections.
</p><p>Like the Relocation table, the Line Number table for a section has its location and length stored in the Section's header.
</p><p>The structure of this header can be found in linenum.h, and is 6 bytes long.
</p>
<pre>
{
	union
	{
		long		l_symndx;	/* Symbol Index */
		long		l_paddr;	/* Physical Address */
	} l_addr;
	unsigned short		l_lnno;		/* Line Number */
}
</pre>
<p>In brief, The line number table will contain an entry with a line number of zero in which the l_symndx field will indicate the function name Symbol in the Symbol table.  This entry will be followed by additional entries with incrementing line numbers which indicate, through the l_paddr field, the byte offset into the section where this line starts.  Given this, an exception that occurs during processing of the COFF file can be traced back to a function and a line number within that function.
</p>
<h3> <span class="mw-headline" id="Symbol_Table">Symbol Table</span></h3>
<p>The Symbol Table contains information on each symbol that is declared or defined by this file.  There will be symbols in this table for each function name, for each global variable, for each static variable, for each variable defined as extern, etc.  There are even symbols in this table that indicate the start of each section and further information about the file as a whole.
</p><p>The Symbol table is an array of Symbol Entry structures and is zero based.
</p><p>The Symbol table location is given in the File Header f_symptr field, and its length in entries is given in the File Header f_nsyms field.
</p><p>The structure of this header can be found in syms.h, and is 18 bytes long.
</p>
<pre>
{
	char		n_name[8];	/* Symbol Name */
	long		n_value;	/* Value of Symbol */
	short		n_scnum;	/* Section Number */
	unsigned short	n_type;		/* Symbol Type */
	char		n_sclass;	/* Storage Class */
	char		n_numaux;	/* Auxiliary Count */
}
</pre>
<p>The Symbol name field stores the name of this symbol if it is eight characters or fewer, otherwise this field contains a pointer into the String table.  See the entry on the String table below.
</p><p>Each symbol in the Symbol table can be followed by zero or more Auxiliary entries which provide further information about the symbol.  Each of these entries is the same length as the Symbol table entry, but has a different structure depending on the parent Symbol.
</p><p>The Section number field n_scnum indicates the Section to which this Symbol belongs.  If this value is greater than zero, it refers to a Section in the Section table (hence why the Section table is one-based).  I can also take one of the following special values:
</p>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1}}}">

<tr>
<th> n_scnum Value
</th>
<th> Meaning
</th></tr>
<tr>
<td> N_DEBUG (2)
</td>
<td> A debugging symbol.  In the example below, information about the file has been put into a symbol like this.
</td></tr>
<tr>
<td> N_ABS (1)
</td>
<td> An absolute symbol.  This means that the value of the n_value field is an absolute value.
</td></tr>
<tr>
<td> N_UNDEF (0)
</td>
<td> An undefined external symbol
</td></tr></table>
<p>The n_value, n_scnum and n_sclass fields in the table need to be considered together because they are interlinked.  A number of the more common combinations of these fields is given in the following table.  <i>(Much of the information in the following table is from observation and not from referenced sources.  It is incomplete and may not be accurate.)</i>
</p>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1}}}">

<tr>
<th> n_sclass
</th>
<th> n_scnum
</th>
<th> n_value
</th>
<th> Meaning of n_value
</th>
<th> Typical use
</th></tr>
<tr>
<td rowspan="4"> C_EXT (2)
</td>
<td> 0
</td>
<td> 0
</td>
<td>
</td>
<td> Unresolved external Symbol
</td></tr>
<tr>
<td> 0
</td>
<td> &gt;0
</td>
<td> Size of variable
</td>
<td> Uninitialised global variable (not included in BSS)
</td></tr>
<tr>
<td> .text
</td>
<td> Any
</td>
<td> Offset into Section
</td>
<td> Function entry point
</td></tr>
<tr>
<td> .data
</td>
<td> Any
</td>
<td> Offset into Section
</td>
<td> Initialised global variable
</td></tr>
<tr>
<td rowspan="3"> C_STAT (3)
</td>
<td> .text, .data, .bss
</td>
<td> 0
</td>
<td>
</td>
<td> Section Symbol indicating start of Section
</td></tr>
<tr>
<td> .data
</td>
<td> Any
</td>
<td> Offset into Section
</td>
<td> Initialised static variable
</td></tr>
<tr>
<td> .bss
</td>
<td> Any
</td>
<td> Offset into Section
</td>
<td> Unitialised static variable
</td></tr></table>
<p><br />
As noted in the table, uninitialised global variables do not seem to be included in the size of the BSS section, only unitialised static variables.  If you are loading a COFF file into memory, it may be required to allocate space in addition to the BSS section size to cover these symbols.
</p>
<center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tr>
<td>
<p><a href="File:Stub.png" class="image" title="This article is a stub!"><img alt="This article is a stub!" src="images/f/fe/Stub.png" width="50" height="50" /></a>
This page or section is a <a href="Category:Stubs" title="Category:Stubs">stub</a>. You can help the wiki by <i>accurately</i> <a rel="nofollow" class="external text" href="http://wiki.osdev.org/index.php?title=COFF&amp;action=edit">contributing</a> to it.
</p>
</td>
<td>
</td></tr></table>
</center>
<h3> <span class="mw-headline" id="String_Table">String Table</span></h3>
<p>The String table contains string names for any sections or symbols that are longer than eight characters.
</p><p>The String table immediately follows the Symbol table, and can be located by using the following formula:
</p>
<pre>
	String Table Offset = File Header.f_symptr + File Header.f_symptr * sizeof( Symbol Table Entry )
	                    = File Header.f_symptr + File Header.f_symptr * 18
</pre>
<p>The first four bytes of the string table are an integer indicating the overall size in bytes of the string table.  Each of the strings in the table are null terminated.
</p><p>The Section table name field and the Symbol table name field are actaully more complicated than was detailed above, they in fact look more like this:
</p>
<pre>
{
	union
	{
		char	name[8];
		struct
		{
			unsigned long zeroes;
			unsigned long offset;
		}
	}
}
</pre>
<p>If the name is eight characters or fewer, then the field "zeroes" will be non-zero, and "name" should be interpretted as a character array.  Note that this field is not null-terminated unless it is fewer than eight characters in length.
</p><p>If the name is more than eight characters, the "zeroes" field (the first four bytes of "name") will be zero.  In this case the "offset" field should be used as an offset value into the String table to locate the Symbol or Section name.
</p>
<h2> <span class="mw-headline" id="Example">Example</span></h2>
<p>This is an example of a Symbol table and the source code to help illustrate some of the information above.  (This was compiled with DJGPP.)
</p>
<pre>
Symbols
      e_zeroes     e_offset     e_value      e_scnum       e_sclass 
                                                    e_type     e_numaux
[00]  2E 66 69 6C  65 00 00 00  00 00 00 00  FE FF  00 00  67  01   .file.......þÿ..g.    
[01]  74 65 73 74  2E 6C 69 62  72 61 72 79  2E 63  00 00  00  00   test.library.c....    
[02]  00 00 00 00  04 00 00 00  08 00 00 00  02 00  00 00  03  00   ..................  _mStaticIntInit
[03]  00 00 00 00  14 00 00 00  0C 00 00 00  02 00  00 00  03  00   ..................  _mStaticShortInit
[04]  00 00 00 00  26 00 00 00  0E 00 00 00  02 00  00 00  03  00   ....&amp;.............  _mStaticCharInit
[05]  00 00 00 00  37 00 00 00  00 00 00 00  03 00  00 00  03  00   ....7.............  _mStaticInt
[06]  00 00 00 00  43 00 00 00  10 00 00 00  03 00  00 00  03  00   ....C.............  _mStaticShort
[07]  00 00 00 00  51 00 00 00  20 00 00 00  03 00  00 00  03  00   ....Q... .........  _mStaticChar
[08]  2E 74 65 78  74 00 00 00  00 00 00 00  01 00  00 00  03  01   .text.............  
[09]  33 00 00 00  03 00 00 00  00 00 00 00  00 00  00 00  00  00   3.................  
[0A]  2E 64 61 74  61 00 00 00  00 00 00 00  02 00  00 00  03  01   .data.............  
[0B]  0F 00 00 00  00 00 00 00  00 00 00 00  00 00  00 00  00  00   ..................  
[0C]  2E 62 73 73  00 00 00 00  00 00 00 00  03 00  00 00  03  01   .bss..............  
[0D]  30 00 00 00  00 00 00 00  00 00 00 00  00 00  00 00  00  00   0.................  
[0E]  2E 63 6F 6D  6D 65 6E 74  00 00 00 00  04 00  00 00  03  01   .comment..........  
[0F]  11 00 00 00  00 00 00 00  00 00 00 00  00 00  00 00  00  00   ..................  
[10]  00 00 00 00  5E 00 00 00  00 00 00 00  02 00  00 00  02  00   ....^.............  _mGlobalIntInit
[11]  00 00 00 00  6E 00 00 00  04 00 00 00  02 00  00 00  02  00   ....n.............  _mGlobalShortInit
[12]  00 00 00 00  80 00 00 00  06 00 00 00  02 00  00 00  02  00   ....€.............  _mGlobalCharInit
[13]  00 00 00 00  91 00 00 00  00 00 00 00  01 00  00 00  02  00   ....‘.............  _TestCall
[14]  5F 54 65 73  74 41 64 64  0A 00 00 00  01 00  00 00  02  00   _TestAdd..........  
[15]  00 00 00 00  9B 00 00 00  17 00 00 00  01 00  00 00  02  00   ....›.............  _TestSetValue
[16]  00 00 00 00  A9 00 00 00  10 00 00 00  00 00  00 00  02  00   ....©.............  _mTestValue
[17]  00 00 00 00  B5 00 00 00  29 00 00 00  01 00  00 00  02  00   ....µ...).........  _TestGetValue
[18]  00 00 00 00  C3 00 00 00  10 00 00 00  00 00  00 00  02  00   ....Ã.............  _mGlobalInt
[19]  00 00 00 00  CF 00 00 00  10 00 00 00  00 00  00 00  02  00   ....Ï.............  _mGlobalShort
[1A]  00 00 00 00  DD 00 00 00  10 00 00 00  00 00  00 00  02  00   ....Ý.............  _mGlobalChar
</pre>
<pre>
int mGlobalInt;
short mGlobalShort;
char mGlobalChar;

static int mStaticInt;
static short mStaticShort;
static char mStaticChar;

unsigned int mGlobalIntInit = 1;
unsigned short mGlobalShortInit = 1;
unsigned char mGlobalCharInit = 1;

unsigned static int mStaticIntInit = 1;
unsigned static short mStaticShortInit = 1;
unsigned static char mStaticCharInit = 1;

int mTestValue;

int TestCall()
{
	return 1;
}

int TestAdd( int pA, int pB )
{
	return pA + pB;
}

int TestSetValue( int pValue )
{
	mTestValue = pValue;
	return mTestValue;
}

int TestGetValue()
{
	return mTestValue;
}
</pre>
<p>As you can see, the static global variables are defined in either section 2 (.data) for the initialised ones, or section 3 (.bss) for the uninitialised, with n_value being an offset into the relevant section.  The initialised global variables are also defined in section 2 (.data) with offsets.
</p><p>Note that the uninitialised global variables have a Section number of N_UNDEF (0) and as such are undefined, but as we a non-zero n_value field, we are being told the amount of space that we need to allocate for each symbol (16 bytes for each one in a slightly wasteful overallocation).
</p><p><br />
</p>
<center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tr>
<td>
<p><a href="File:Stub.png" class="image" title="This article is a stub!"><img alt="This article is a stub!" src="images/f/fe/Stub.png" width="50" height="50" /></a>
This page or section is a <a href="Category:Stubs" title="Category:Stubs">stub</a>. You can help the wiki by <i>accurately</i> <a rel="nofollow" class="external text" href="http://wiki.osdev.org/index.php?title=COFF&amp;action=edit">contributing</a> to it.
</p>
</td>
<td>
</td></tr></table>
</center>
<p><br />
</p>
<h2> <span class="mw-headline" id="See_Also">See Also</span></h2>
<h3> <span class="mw-headline" id="External_Links"> External Links </span></h3>
<ul><li> <a rel="nofollow" class="external free" href="http://www.delorie.com/djgpp/doc/coff/">http://www.delorie.com/djgpp/doc/coff/</a>
</li></ul>

<!-- 
NewPP limit report
Preprocessor node count: 182/1000000
Post-expand include size: 1491/2097152 bytes
Template argument size: 2/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:2811-0!*!0!!en!2!* and timestamp 20180121041834 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=COFF&amp;oldid=9834">http://wiki.osdev.org/index.php?title=COFF&amp;oldid=9834</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="http://wiki.osdev.org/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="Category:Stubs" title="Category:Stubs">Stubs</a></li><li><a href="Category:Executable_Formats" title="Category:Executable Formats">Executable Formats</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=COFF" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="COFF"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk" class="new"><span><a href="http://wiki.osdev.org/index.php?title=Talk:COFF&amp;action=edit&amp;redlink=1"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="COFF#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="COFF" >Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=COFF&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=COFF&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="COFF#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="http://wiki.osdev.org/index.php" id="searchform">
		<input type='hidden' name="title" value="Special:Search"/>
				<input type="search" name="search" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput" />		<input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" />		<input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" />			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="/Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="/Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="/OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="/OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="/OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="/Special:WhatLinksHere/COFF" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="/Special:RecentChangesLinked/COFF" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="/index.php?title=COFF&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="/index.php?title=COFF&amp;oldid=9834" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->skins/common/images/osdev.png);" href="/Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/COFF" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/COFF" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=COFF&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=COFF&amp;oldid=9834" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 20 February 2010, at 10:15.</li>
											<li id="footer-info-viewcount">This page has been accessed 33,671 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.031 secs. -->
	</body>
</html>
