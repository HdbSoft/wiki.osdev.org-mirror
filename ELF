<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>ELF - OSDev Wiki</title>
<meta charset="UTF-8" />
<meta name="generator" content="MediaWiki 1.18.0" />
<link rel="shortcut icon" href="favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "ELF", "wgTitle": "ELF", "wgCurRevisionId": 20700, "wgArticleId": 1542, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["ABI", "Executable Formats", "Standards"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script>
<!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-ELF action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">ELF</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="ELF#mw-head">navigation</a>,
					<a href="ELF#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div lang="en" dir="ltr" class="mw-content-ltr"><table style="font-size:95%; line-height:1.5em; padding:0.25em; float:right; margin: 0 0 8px 15px; clear: right; border:1px solid #aaaaaa; background:#eee; text-align:center; width:200px;&#160;;"><tr><th style="background:#ffce7b; padding:0.3em; font-size:1.1em;"><a href="Executable_Formats" title="Executable Formats">Executable Formats</a></th></tr><tr><th>Microsoft</th></tr><tr><td><div>
<p><b>16 bit:</b><br />
<a href="COM" title="COM">COM</a><br />
<a href="MZ" title="MZ">MZ</a><br />
<a href="NE" title="NE">NE</a><br />
<b>32/64 bit:</b><br />
<a href="PE" title="PE">PE</a><br />
<b>Mixed (16/32 bit):</b><br />
<a href="LE" title="LE">LE</a><br />
</p>
</div></td></tr><tr><th>*nix</th></tr><tr><td><div>
<p><a href="A.out" title="A.out">A.out</a><br />
<strong class="selflink">ELF</strong><br />
</p>
</div></td></tr></table>
<p>ELF (Executable and Linkable Format) was designed by Unix System Laboratories while working with Sun Microsystems on SVR4 (UNIX System V Release 4.0). Consequently, ELF first appeared in Solaris 2.0 (aka SunOS 5.0), which is based on SVR4. The format is specified in the <a href="System_V_ABI" title="System V ABI">System V ABI</a>.
</p><p>A very versatile file format, it was later picked up by many other operating systems for use as both executable files and as shared library files. It does distinguish between TEXT, DATA and BSS.
</p><p>Today, ELF is considered the standard format on Unix-alike systems. While it has some drawbacks (e.g., using up one of the scarce general purpose registers of the IA-32 when using position-independent code), it is well supported and documented.
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="ELF#File_Structure"><span class="tocnumber">1</span> <span class="toctext">File Structure</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="ELF#Loading_ELF_Binaries"><span class="tocnumber">2</span> <span class="toctext">Loading ELF Binaries</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="ELF#Relocation"><span class="tocnumber">3</span> <span class="toctext">Relocation</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="ELF#Tables"><span class="tocnumber">4</span> <span class="toctext">Tables</span></a>
<ul>
<li class="toclevel-2 tocsection-5"><a href="ELF#Header"><span class="tocnumber">4.1</span> <span class="toctext">Header</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="ELF#Program_header"><span class="tocnumber">4.2</span> <span class="toctext">Program header</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="ELF#Using_the_PIC_with_programs"><span class="tocnumber">4.3</span> <span class="toctext">Using the PIC with programs</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="ELF#Dynamic_Linking"><span class="tocnumber">4.4</span> <span class="toctext">Dynamic Linking</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-9"><a href="ELF#See_Also"><span class="tocnumber">5</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-10"><a href="ELF#Articles"><span class="tocnumber">5.1</span> <span class="toctext">Articles</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="ELF#External_Links"><span class="tocnumber">5.2</span> <span class="toctext">External Links</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h2> <span class="mw-headline" id="File_Structure">File Structure</span></h2>
<p>ELF is a format for storing programs or fragments of programs on disk, created as a result of compiling and linking. An ELF file is divided into sections. For an executable program, these are the text section for the code, the data section for global variables and the rodata section that usually contains constant strings. The ELF file contains headers that describe how these sections should be stored in memory.
</p><p>Note that depending on whether your file is a linkable or an executable file, the headers in the ELF file won't be the same:
process.o, result of gcc -c process.c $SOME_FLAGS
</p>
<pre>
C32/kernel/bin/.process.o
architecture: i386, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000333  00000000  00000000  00000040  2**4
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000050  00000000  00000000  00000380  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000003d0  2**2
                  ALLOC
  3 .note         00000014  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY
  4 .stab         000020e8  00000000  00000000  000003e4  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .stabstr      00008f17  00000000  00000000  000024cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .rodata       000001e4  00000000  00000000  0000b400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .comment      00000023  00000000  00000000  0000b5e4  2**0
                  CONTENTS, READONLY
</pre>
<p>The 'flags' will tell you what's actually available in the ELF file. Here, we have symbol tables and relocation: all that we need to link the file against another, but virtually no information about how to load the file in memory (even if that could be guessed). We don't have the program entry point, for instance, and we have a sections table rather than a program header.
</p>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1}}}">

<tr>
<td> .text
</td>
<td> where code stands, as said above. objdump -drS .process.o will show you that
</td></tr>
<tr>
<td> .data
</td>
<td> where global tables, variables, etc. stand. objdump -s -j .data .process.o will hexdump it.
</td></tr>
<tr>
<td> .bss
</td>
<td> don't look for bits of .bss in your file: there's none. That's where your uninitialized arrays and variable are, and the loader 'knows' they should be filled with zeroes ... there's no point storing more zeroes on your disk than there already are, is it?
</td></tr>
<tr>
<td> .rodata
</td>
<td> that's where your strings go, usually the things you forgot when linking and that cause your kernel not to work. objdump -s -j .rodata .process.o will hexdump it. Note that depending on the compiler, you may have more sections like this.
</td></tr>
<tr>
<td> .comment &amp; .note
</td>
<td> just comments put there by the compiler/linker toolchain
</td></tr>
<tr>
<td> .stab &amp; .stabstr
</td>
<td> debugging symbols &amp; similar information.
</td></tr></table>
<p>/bin/bash, a real executable file
</p>
<pre>
/bin/bash:     file format elf32-i386
/bin/bash
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08056c40

Program Header:
    PHDR off    0x00000034 vaddr 0x08048034 paddr 0x08048034 align 2**2
         filesz 0x000000e0 memsz 0x000000e0 flags r-x
</pre>
<p>The program header itself... taking 224 bytes, and starting at offset 0x34 in the file
</p>
<pre>
  INTERP off    0x00000114 vaddr 0x08048114 paddr 0x08048114 align 2**0
         filesz 0x00000013 memsz 0x00000013 flags r--
</pre>
<p>The program that should be used to 'execute' the binary. Here, it reads as '/lib/ld-linux.so.2', which means some dynamic libraries linking will be required before we run the program.
</p>
<pre>
    LOAD off    0x00000000 vaddr 0x08048000 paddr 0x08048000 align 2**12
         filesz 0x0007411c memsz 0x0007411c flags r-x
</pre>
<p>Now we're requested to read 7411c bytes, starting at file's start (?) and being 7411c bytes large (that's virtually the whole file!), which will be read-only but executable. They'll be to appear starting at virtual address 0x08048000 for the program to work properly.
</p>
<pre>
    LOAD off    0x00074120 vaddr 0x080bd120 paddr 0x080bd120 align 2**12
         filesz 0x000022ac memsz 0x000082d0 flags rw-
</pre>
<p>More bits to load, (likely to be .data section). Notice that the 'filesize' and 'memsize' differ, which means the .bss section will actually be allocated through this statement, but left as zeroes while 'real' data only occupy first 0x22ac bytes starting at virtual address 0x80bd120.
</p>
<pre>
 DYNAMIC off    0x00075f4c vaddr 0x080bef4c paddr 0x080bef4c align 2**2
         filesz 0x000000e8 memsz 0x000000e8 flags rw-
</pre>
<p>The dynamic sections are used to store information used in the dynamic linking process, such as required libraries and relocation entries.
</p>
<pre>
    NOTE off    0x00000128 vaddr 0x08048128 paddr 0x08048128 align 2**2
         filesz 0x00000020 memsz 0x00000020 flags r--
</pre>
<p>NOTE sections contain information left by either the programmer or the linker, for most programs linked using the GNU 'ld' linker it just says 'GNU'
</p>
<pre>
EH_FRAME off    0x000740f0 vaddr 0x080bc0f0 paddr 0x080bc0f0 align 2**2
         filesz 0x0000002c memsz 0x0000002c flags r--
</pre>
<p>that's for Exception Handler information, in case we should link against some C++ binaries at execution (afaik).
</p>
<pre>
/bin/bash, loaded (as in /proc/xxxx/maps)

08048000-080bd000 r-xp 00000000 03:06 30574      /bin/bash
080bd000-080c0000 rw-p 00074000 03:06 30574      /bin/bash
080c0000-08103000 rwxp 00000000 00:00 0
40000000-40014000 r-xp 00000000 03:06 27304      /lib/ld-2.3.2.so
40014000-40015000 rw-p 00013000 03:06 27304      /lib/ld-2.3.2.so
</pre>
<p>We can recognize our 'code bits' and 'data bits', by stating that the second one should be loaded at 0x080bd*120* and that it starts in file at 0x00074*120*, we actually preserved page-to-disk blocks mapping (e.g. if page 0x80bc000 is missing, just fetch file blocks from 0x75000). That means, however, that a part of the code is mapped twice, but with different permissions. I suggest you do give them different physical pages too if you don't want to end up with modifiable code.
</p>
<h2> <span class="mw-headline" id="Loading_ELF_Binaries">Loading ELF Binaries</span></h2>
<div class="thumb tright"><div class="thumbinner" style="width:702px;"><a href="File:Elfdiagram.png" class="image"><img alt="" src="images/f/fe/Elfdiagram.png" width="700" height="600" class="thumbimage" /></a>  <div class="thumbcaption">Executable image and elf binary can being mapped onto each other</div></div></div>
<p>The ELF file format is described in the ELF Specification. The most relevant sections for this project are 1.1 to 1.4 and 2.1 to 2.7.
</p><p>The steps involved in identifying the sections of the ELF file are:
</p>
<ul><li> Read the ELF Header. The ELF header will always be at the very beginning of an ELF file. The ELF header contains information about how the rest of the file is laid out. You are interested only in the program headers.
</li><li> Find the Program Headers, which specify where in the file to find the text and data sections and where they should end up in the executable image.
</li></ul>
<p>There are a few simplifying assumptions you can make about the types and location of program headers. In the files you will be working with, there will always be one text header and one data header. The text header will be the first program header and the data header will be the second program header. This is not generally true of ELF files, but it will be true of the programs you will be responsible for.
</p><p>The file geekos/include/geekos/elf.h provides data types for structures which match the format of the ELF and program headers.
</p><p>This is a rough guideline for what Parse_ELF_Executable() has to do:
</p>
<ol><li> Check that exeFileData is non-null and exeFileLength is large enough to accommodate the ELF headers and phnum program headers.
</li><li> Check that the file starts with the ELF magic number (4 bytes) as described in figure 1-4 (and subsequent table) on page 11 in the ELF specification.
</li><li> Check that the ELF file has no more than EXE_MAX_SEGMENTS program headers (phnum field of the elfHeader).
</li><li> Fill in numSegments and entryAddr fields of the exeFormat output variable.
</li><li> For each program header k in turn, fill in the corresponding segmentList[k] array element of exeFormat with offsetInFile, lengthInFile, startAddress, sizeInMemory, protFlags with information from that program header k. See figure 2-1 on page 33 in the ELF specification.
</li></ol>
<h2> <span class="mw-headline" id="Relocation">Relocation</span></h2>
<p>Relocation becomes handy when you need to load, for example, modules or drivers. It's possible to use the "-r" option to ld to permit you to have multiple object files linked into one big one, which means easier coding and faster testing.
</p><p>The basic outline of things you need to do for relocation:
</p>
<ol><li> Check the object file header (it has to be ELF, not PE, for example)
</li><li> Get a load address (eg. all drivers start at 0xA0000000, need some method of keeping track of driver locations)
</li><li> Allocate enough space for all program sections (ST_PROGBITS)
</li><li> Copy from the image in RAM to the allocated space
</li><li> Go through all sections resolving external references against the kernel symbol table
</li><li> If all succeeded, you can use the "e_entry" field of the header as the offset from the load address to call the entry point (if one was specified), or do a symbol lookup, or just return a success error code.
</li></ol>
<p>Once you can relocate ELF objects you'll be able to have drivers loaded when needed instead of at startup - which is always a Good Thing (tm).
</p>
<h2> <span class="mw-headline" id="Tables"> Tables </span></h2>
<h3> <span class="mw-headline" id="Header"> Header </span></h3>
<p>The header is found at the start of the ELF file.
</p>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1}}}">

<tr>
<td> Position (32 bit)
</td>
<td> Position (64 bit)
</td>
<td> Value
</td></tr>
<tr>
<td> 0-3
</td>
<td> 0-3
</td>
<td> Magic number - 0x7F, then 'ELF' in ASCII
</td></tr>
<tr>
<td> 4
</td>
<td> 4
</td>
<td> 1 = 32 bit, 2 = 64 bit
</td></tr>
<tr>
<td> 5
</td>
<td> 5
</td>
<td> 1 = little endian, 2 = big endian
</td></tr>
<tr>
<td> 6
</td>
<td> 6
</td>
<td> ELF Version
</td></tr>
<tr>
<td> 7
</td>
<td> 7
</td>
<td> OS ABI - usually 0 for System V
</td></tr>
<tr>
<td> 8-15
</td>
<td> 8-15
</td>
<td> Unused/padding
</td></tr>
<tr>
<td> 16-17
</td>
<td> 16-17
</td>
<td> 1 = relocatable, 2 = executable, 3 = shared, 4 = core
</td></tr>
<tr>
<td> 18-19
</td>
<td> 18-19
</td>
<td> Instruction set - see table below
</td></tr>
<tr>
<td> 20-23
</td>
<td> 20-23
</td>
<td> ELF Version
</td></tr>
<tr>
<td> 24-27
</td>
<td> 24-31
</td>
<td> Program entry position
</td></tr>
<tr>
<td> 28-31
</td>
<td> 32-39
</td>
<td> Program header table position
</td></tr>
<tr>
<td> 32-35
</td>
<td> 40-47
</td>
<td> Section header table position
</td></tr>
<tr>
<td> 36-39
</td>
<td> 48-51
</td>
<td> Flags - architecture dependent; see note below
</td></tr>
<tr>
<td> 40-41
</td>
<td> 52-53
</td>
<td> Header size
</td></tr>
<tr>
<td> 42-43
</td>
<td> 54-55
</td>
<td> Size of an entry in the program header table
</td></tr>
<tr>
<td> 44-45
</td>
<td> 56-57
</td>
<td> Number of entries in the program header table
</td></tr>
<tr>
<td> 46-47
</td>
<td> 58-59
</td>
<td> Size of an entry in the section header table
</td></tr>
<tr>
<td> 48-49
</td>
<td> 60-61
</td>
<td> Number of entries in the section header table
</td></tr>
<tr>
<td> 50-51
</td>
<td> 62-63
</td>
<td> Index in section header table with the section names
</td></tr></table>
<p>The flags entry can probably be ignored for x86 ELFs, as no flags are actually defined.
</p><p>Instruction Set Architectures:
</p>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1}}}">

<tr>
<td> <b>Architecture</b>
</td>
<td> <b>Value</b>
</td></tr>
<tr>
<td> No Specific
</td>
<td> 0
</td></tr>
<tr>
<td> <a href="Category:Sparc" title="Category:Sparc"> Sparc</a>
</td>
<td> 2
</td></tr>
<tr>
<td> <b><a href="X86" title="X86" class="mw-redirect">x86</a></b>
</td>
<td> 3
</td></tr>
<tr>
<td> <a href="Category:MIPS" title="Category:MIPS"> MIPS</a>
</td>
<td> 8
</td></tr>
<tr>
<td> <a href="PowerPC" title="PowerPC" class="mw-redirect">PowerPC</a>
</td>
<td> 0x14
</td></tr>
<tr>
<td> <b><a href="Category:ARM" title="Category:ARM"> ARM</a></b>
</td>
<td> 0x28
</td></tr>
<tr>
<td> <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/SuperH">SuperH</a>
</td>
<td> 0x2A
</td></tr>
<tr>
<td> <a href="IA-64" title="IA-64">IA-64</a>
</td>
<td> 0x32
</td></tr>
<tr>
<td> <b><a href="X86-64" title="X86-64">x86-64</a></b>
</td>
<td> 0x3E
</td></tr>
<tr>
<td> <b><a href="Category:ARM" title="Category:ARM"> AArch64</a></b>
</td>
<td> 0xB7
</td></tr></table>
<p>The most common architectures are in bold.
</p>
<h3> <span class="mw-headline" id="Program_header"> Program header </span></h3>
<p>This is an array of N (given in the main header) entries in the following format. Make sure to use the correct version depending on whether the file is 32 bit or 64 bit as the tables are quite different.
</p><p>32 bit version:
</p>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1}}}">

<tr>
<td> Position
</td>
<td> Value
</td></tr>
<tr>
<td> 0-3
</td>
<td> Type of segment (see below)
</td></tr>
<tr>
<td> 4-7
</td>
<td> The offset in the file that the data for this segment can be found (p_offset)
</td></tr>
<tr>
<td> 8-11
</td>
<td> Where you should start to put this segment in virtual memory (p_vaddr)
</td></tr>
<tr>
<td> 12-15
</td>
<td> Undefined for the System V ABI
</td></tr>
<tr>
<td> 16-19
</td>
<td> Size of the segment in the file (p_filesz)
</td></tr>
<tr>
<td> 20-23
</td>
<td> Size of the segment in memory (p_memsz)
</td></tr>
<tr>
<td> 24-27
</td>
<td> Flags (see below)
</td></tr>
<tr>
<td> 28-31
</td>
<td> The required alignment for this section (must be a power of 2)
</td></tr></table>
<p>64 bit version:
</p>
<table border="2" cellpadding="4" cellspacing="0" style="margin-top:1em; margin-bottom:1em; background:#f9f9f9; border:1px #aaa solid; border-collapse:collapse; &#123;&#123;&#123;1}}}">

<tr>
<td> Position
</td>
<td> Value
</td></tr>
<tr>
<td> 0-3
</td>
<td> Type of segment (see below)
</td></tr>
<tr>
<td> 4-7
</td>
<td> Flags (see below)
</td></tr>
<tr>
<td> 8-15
</td>
<td> The offset in the file that the data for this segment can be found (p_offset)
</td></tr>
<tr>
<td> 16-23
</td>
<td> Where you should start to put this segment in virtual memory (p_vaddr)
</td></tr>
<tr>
<td> 24-31
</td>
<td> Undefined for the System V ABI
</td></tr>
<tr>
<td> 32-39
</td>
<td> Size of the segment in the file (p_filesz)
</td></tr>
<tr>
<td> 40-47
</td>
<td> Size of the segment in memory (p_memsz)
</td></tr>
<tr>
<td> 48-55
</td>
<td> The required alignment for this section (must be a power of 2)
</td></tr></table>
<p>Segment types: 0 = null - ignore the entry; 1 = load - clear p_memsz bytes at p_vaddr to 0, then copy p_filesz bytes from p_offset to p_vaddr; 2 = dynamic - requires dynamic linking; 3 = interp - contains a file path to an executable to use as an interpreter for the following segment;  4 = note section. There are more values, but mostly contain architecture/environment specific information, which is probably not required for the majority of ELF files.
</p><p>Flags: 1 = executable, 2 = writable, 4 = readable.
</p>
<h3> <span class="mw-headline" id="Using_the_PIC_with_programs"> Using the PIC with programs </span></h3>
<p>The logic that will allow an ELF program to run (which is quite simple once you have a scheduler) is this:
<i><b>*IRQ fires*-&gt;Scheduler-&gt;ELF Program on Queue-&gt;Run ELF Program until an exit() is called (usually in crt0)-&gt;Take process off the Queue</b></i>
</p>
<h3> <span class="mw-headline" id="Dynamic_Linking"> Dynamic Linking </span></h3>
<p>Dynamic Linking is when the OS gives a program shared libraries if it needs them. Meaning, the libraries are found in the system and then "bind" to the program that needs them while the program is running, versus static linking, which links the libraries <b>before</b> the program is run. The main advantages are that programs take up less memory, and are smaller in file size. The main disadvantage, however, is that the program becomes less portable because the program depends on many different shared libraries.
</p><p>In order to implement this, you need to have proper scheduling in place, a library, and a program to use that library.
You can create a library with GCC:
</p>
<pre>
myos-gcc -c -fPIC -o oneobject.o oneobject.c
myos-gcc -c -fPIC -o anotherobject.o anotherobject.c
myos-gcc -shared -fPIC -Wl,-soname,nameofmylib oneobject.o anotherobject.o -o mylib.so
</pre>
<p>This library should be treated as a file, which is loaded when the OS detects its attempted usage. You will need to implement this "<a href="Dynamic_Linker" title="Dynamic Linker">Dynamic Linker</a>" into a certain classification of code such as in your memory management or your task management section. When the ELF program is run, the system should attach the shared object data to a malloc() region of memory, where the function calls to the libraries redirect to that malloc() region of memory. Once the program is finished, the region can be given up back to the OS with a call to free().
</p><p>That should be a good starting point to writing a dynamic linker.
</p>
<h2> <span class="mw-headline" id="See_Also"> See Also </span></h2>
<h3> <span class="mw-headline" id="Articles"> Articles </span></h3>
<ul><li> <a href="System_V_ABI" title="System V ABI">System V ABI</a>
</li><li> <a href="Modular_Kernel" title="Modular Kernel">Modular Kernel</a>
</li><li> <a href="DWARF" title="DWARF">DWARF</a>
</li></ul>
<h3> <span class="mw-headline" id="External_Links"> External Links </span></h3>
<ul><li> <a rel="nofollow" class="external text" href="http://www.skyfree.org/linux/references/ELF_Format.pdf">The ELF file format</a> in detail
</li><li> <a rel="nofollow" class="external text" href="http://docs.oracle.com/cd/E23824_01/html/819-0690/chapter6-46512.html#scrolltoc">ELF Format Specifications</a> Detailed and up-to-date ELF information (including SPARC in depth) by Oracle.
</li><li> <a rel="nofollow" class="external text" href="http://www.sco.com/developers/gabi/latest/contents.html">System V ABI</a> about ELF 
</li><li> <a rel="nofollow" class="external text" href="http://www.linuxfoundation.org/en/Specifications">LSB specifications</a><br />See (generic or platform-specific) 'Core' specifications for additional ELF information.
</li><li> <a rel="nofollow" class="external text" href="http://en.wikipedia.org/wiki/Executable_and_Linkable_Format">Executable and Linkable Format on Wikipedia</a>,which contains a detail of elf references
</li><li> <a rel="nofollow" class="external text" href="http://downloads.openwatcom.org/ftp/devel/docs/elf-64-gen.pdf">The ELF file format(64-bit)</a> ELF 64-Bit, General extension to ELF32.
</li><li> <a rel="nofollow" class="external text" href="http://www.x86-64.org/documentation/abi.pdf">x86-64 ABI</a> Documented x86-64 specific extensions with ELF64.
</li><li> <a rel="nofollow" class="external text" href="http://www.robinhoksbergen.com/papers/howto_elf.html">Manually Creating an ELF Executable</a>(dead) Detailed guide on how to create ELF binaries from scratch.
</li></ul>

<!-- 
NewPP limit report
Preprocessor node count: 485/1000000
Post-expand include size: 2130/2097152 bytes
Template argument size: 575/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:1542-0!*!0!!en!2!* and timestamp 20180121034654 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=ELF&amp;oldid=20700">http://wiki.osdev.org/index.php?title=ELF&amp;oldid=20700</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="http://wiki.osdev.org/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="Category:ABI" title="Category:ABI">ABI</a></li><li><a href="Category:Executable_Formats" title="Category:Executable Formats">Executable Formats</a></li><li><a href="Category:Standards" title="Category:Standards">Standards</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=ELF" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="ELF"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk"><span><a href="Talk:ELF"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="ELF#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="ELF" >Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=ELF&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=ELF&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="ELF#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="http://wiki.osdev.org/index.php" id="searchform">
		<input type='hidden' name="title" value="Special:Search"/>
				<input type="search" name="search" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput" />		<input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" />		<input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" />			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="/Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="/Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="/OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="/OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="/OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="/Special:WhatLinksHere/ELF" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="/Special:RecentChangesLinked/ELF" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="/index.php?title=ELF&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="/index.php?title=ELF&amp;oldid=20700" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->
<div class="portal" id='p-lskins/common/images/osdev.png);" href="/Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/ELF" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/ELF" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=ELF&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=ELF&amp;oldid=20700" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->
<div class="portal" id='p-lang'>
	<h5>In other languages</h5>
	<div class="body">
		<ul>
			<li class="interwiki-de"><a href="http://www.lowlevel.eu/wiki/Executable_and_Linking_Format" title="Executable and Linking Format">Deutsch</a></li>
		</ul>
	</div>
</div>

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 15 April 2017, at 04:59.</li>
											<li id="footer-info-viewcount">This page has been accessed 198,875 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.032 secs. -->
	</body>
</html>
