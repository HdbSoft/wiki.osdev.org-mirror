<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>Java Primer - OSDev Wiki</title>
<meta charset="UTF-8" />
<meta name="generator" content="MediaWiki 1.18.0" />
<link rel="shortcut icon" href="favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "Java_Primer", "wgTitle": "Java Primer", "wgCurRevisionId": 19396, "wgArticleId": 3849, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["Level 3 Tutorials", "Tutorials", "Compilers", "Languages"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script>
<style type="text/css">/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.java.source-java .de1, .java.source-java .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.java.source-java  {font-family:monospace;}
.java.source-java .imp {font-weight: bold; color: red;}
.java.source-java li, .java.source-java .li1 {font-weight: normal; vertical-align:top;}
.java.source-java .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.java.source-java .li2 {font-weight: bold; vertical-align:top;}
.java.source-java .kw1 {color: #000000; font-weight: bold;}
.java.source-java .kw2 {color: #000066; font-weight: bold;}
.java.source-java .kw3 {color: #003399;}
.java.source-java .kw4 {color: #000066; font-weight: bold;}
.java.source-java .co1 {color: #666666; font-style: italic;}
.java.source-java .co2 {color: #006699;}
.java.source-java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java.source-java .coMULTI {color: #666666; font-style: italic;}
.java.source-java .es0 {color: #000099; font-weight: bold;}
.java.source-java .br0 {color: #009900;}
.java.source-java .sy0 {color: #339933;}
.java.source-java .st0 {color: #0000ff;}
.java.source-java .nu0 {color: #cc66cc;}
.java.source-java .me1 {color: #006633;}
.java.source-java .me2 {color: #006633;}
.java.source-java .ln-xtra, .java.source-java li.ln-xtra, .java.source-java div.ln-xtra {background-color: #ffc;}
.java.source-java span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-asm {line-height: normal;}
.source-asm li, .source-asm pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for asm
 * CSS class: source-asm, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.asm.source-asm .de1, .asm.source-asm .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.asm.source-asm  {font-family:monospace;}
.asm.source-asm .imp {font-weight: bold; color: red;}
.asm.source-asm li, .asm.source-asm .li1 {font-weight: normal; vertical-align:top;}
.asm.source-asm .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.asm.source-asm .li2 {font-weight: bold; vertical-align:top;}
.asm.source-asm .kw1 {color: #00007f; font-weight: bold;}
.asm.source-asm .kw2 {color: #0000ff; font-weight: bold;}
.asm.source-asm .kw3 {color: #00007f;}
.asm.source-asm .kw4 {color: #000000; font-weight: bold;}
.asm.source-asm .kw5 {color: #000000; font-weight: bold;}
.asm.source-asm .co1 {color: #666666; font-style: italic;}
.asm.source-asm .co2 {color: #adadad; font-style: italic;}
.asm.source-asm .es0 {color: #000099; font-weight: bold;}
.asm.source-asm .br0 {color: #009900; font-weight: bold;}
.asm.source-asm .sy0 {color: #339933;}
.asm.source-asm .st0 {color: #7f007f;}
.asm.source-asm .nu0 {color: #0000ff;}
.asm.source-asm .ln-xtra, .asm.source-asm li.ln-xtra, .asm.source-asm div.ln-xtra {background-color: #ffc;}
.asm.source-asm span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #b1b100;}
.c.source-c .kw2 {color: #000000; font-weight: bold;}
.c.source-c .kw3 {color: #000066;}
.c.source-c .kw4 {color: #993333;}
.c.source-c .co1 {color: #666666; font-style: italic;}
.c.source-c .co2 {color: #339933;}
.c.source-c .coMULTI {color: #808080; font-style: italic;}
.c.source-c .es0 {color: #000099; font-weight: bold;}
.c.source-c .es1 {color: #000099; font-weight: bold;}
.c.source-c .es2 {color: #660099; font-weight: bold;}
.c.source-c .es3 {color: #660099; font-weight: bold;}
.c.source-c .es4 {color: #660099; font-weight: bold;}
.c.source-c .es5 {color: #006699; font-weight: bold;}
.c.source-c .br0 {color: #009900;}
.c.source-c .sy0 {color: #339933;}
.c.source-c .st0 {color: #ff0000;}
.c.source-c .nu0 {color: #0000dd;}
.c.source-c .nu6 {color: #208080;}
.c.source-c .nu8 {color: #208080;}
.c.source-c .nu12 {color: #208080;}
.c.source-c .nu16 {color:#800080;}
.c.source-c .nu17 {color:#800080;}
.c.source-c .nu18 {color:#800080;}
.c.source-c .nu19 {color:#800080;}
.c.source-c .me1 {color: #202020;}
.c.source-c .me2 {color: #202020;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-bash {line-height: normal;}
.source-bash li, .source-bash pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for bash
 * CSS class: source-bash, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.bash.source-bash .de1, .bash.source-bash .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.bash.source-bash  {font-family:monospace;}
.bash.source-bash .imp {font-weight: bold; color: red;}
.bash.source-bash li, .bash.source-bash .li1 {font-weight: normal; vertical-align:top;}
.bash.source-bash .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.bash.source-bash .li2 {font-weight: bold; vertical-align:top;}
.bash.source-bash .kw1 {color: #000000; font-weight: bold;}
.bash.source-bash .kw2 {color: #c20cb9; font-weight: bold;}
.bash.source-bash .kw3 {color: #7a0874; font-weight: bold;}
.bash.source-bash .co0 {color: #666666; font-style: italic;}
.bash.source-bash .co1 {color: #800000;}
.bash.source-bash .co2 {color: #cc0000; font-style: italic;}
.bash.source-bash .co3 {color: #000000; font-weight: bold;}
.bash.source-bash .co4 {color: #666666;}
.bash.source-bash .es1 {color: #000099; font-weight: bold;}
.bash.source-bash .es2 {color: #007800;}
.bash.source-bash .es3 {color: #007800;}
.bash.source-bash .es4 {color: #007800;}
.bash.source-bash .es5 {color: #780078;}
.bash.source-bash .es_h {color: #000099; font-weight: bold;}
.bash.source-bash .br0 {color: #7a0874; font-weight: bold;}
.bash.source-bash .sy0 {color: #000000; font-weight: bold;}
.bash.source-bash .st0 {color: #ff0000;}
.bash.source-bash .st_h {color: #ff0000;}
.bash.source-bash .nu0 {color: #000000;}
.bash.source-bash .re0 {color: #007800;}
.bash.source-bash .re1 {color: #007800;}
.bash.source-bash .re2 {color: #007800;}
.bash.source-bash .re4 {color: #007800;}
.bash.source-bash .re5 {color: #660033;}
.bash.source-bash .ln-xtra, .bash.source-bash li.ln-xtra, .bash.source-bash div.ln-xtra {background-color: #ffc;}
.bash.source-bash span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-make {line-height: normal;}
.source-make li, .source-make pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for make
 * CSS class: source-make, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.make.source-make .de1, .make.source-make .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.make.source-make  {font-family:monospace;}
.make.source-make .imp {font-weight: bold; color: red;}
.make.source-make li, .make.source-make .li1 {font-weight: normal; vertical-align:top;}
.make.source-make .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.make.source-make .li2 {font-weight: bold; vertical-align:top;}
.make.source-make .kw1 {color: #666622; font-weight: bold;}
.make.source-make .kw2 {color: #990000;}
.make.source-make .co1 {color: #339900; font-style: italic;}
.make.source-make .co2 {color: #000099; font-weight: bold;}
.make.source-make .es0 {color: #000099; font-weight: bold;}
.make.source-make .br0 {color: #004400;}
.make.source-make .sy0 {color: #004400;}
.make.source-make .st0 {color: #CC2200;}
.make.source-make .nu0 {color: #CC2200;}
.make.source-make .re0 {color: #000088; font-weight: bold;}
.make.source-make .re1 {color: #0000CC; font-weight: bold;}
.make.source-make .re2 {color: #000088;}
.make.source-make .ln-xtra, .make.source-make li.ln-xtra, .make.source-make div.ln-xtra {background-color: #ffc;}
.make.source-make span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Java_Primer action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">Java Primer</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="Java_Primer#mw-head">navigation</a>,
					<a href="Java_Primer#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div lang="en" dir="ltr" class="mw-content-ltr"><table style="font-size:95%; line-height:1.5em; padding:0.25em; float:right; margin: 0 0 8px 15px; clear:right; border:1px solid #aaaaaa; background:#eee; text-align:center;;"><tr><th>Difficulty level</th></tr><tr><td><a href="File:Difficulty_3.png" class="image"><img alt="Difficulty 3.png" src="images/c/c1/Difficulty_3.png" width="46" height="14" /></a><br />Advanced</td></tr></table>
<p>This is a demonstration tutorial of how you could write an OS using Java. The methods described in here however are quite generic - you can use similar approaches for other bytecoded languages, such as .NET. In addition, this article contains a simple compiler that can be a source of inspiration for any custom languages.
</p><p>Being a demonstration, the method posted here is exceedingly simple and only does the necessary work to make the bundled Java code run. It can not deal with most things one would expect from Java. It does not do garbage collection in any forms, let alone support strings. The code provided here is purposefully limited, so you can play with it a bit to get a feeling, but it is impossible to extend this code to support more key components of the language. 
</p><p>Consider this a throwaway prototype - <b>it's deliberately written in such a fashion that you're forced to rewrite a new one from scratch.</b>
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Java_Primer#Supporting_a_non-native_language"><span class="tocnumber">1</span> <span class="toctext">Supporting a non-native language</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="Java_Primer#Compiler"><span class="tocnumber">2</span> <span class="toctext">Compiler</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="Java_Primer#HAL_and_Runtime"><span class="tocnumber">3</span> <span class="toctext">HAL and Runtime</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="Java_Primer#A_primitive_kernel"><span class="tocnumber">4</span> <span class="toctext">A primitive kernel</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="Java_Primer#Wrapping_it_all_together"><span class="tocnumber">5</span> <span class="toctext">Wrapping it all together</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="Java_Primer#Multiboot"><span class="tocnumber">5.1</span> <span class="toctext">Multiboot</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="Java_Primer#Linker_script"><span class="tocnumber">5.2</span> <span class="toctext">Linker script</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="Java_Primer#GRUB"><span class="tocnumber">5.3</span> <span class="toctext">GRUB</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="Java_Primer#Build_instructions"><span class="tocnumber">5.4</span> <span class="toctext">Build instructions</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h2> <span class="mw-headline" id="Supporting_a_non-native_language"> Supporting a non-native language </span></h2>
<p>Since you have much less to leech from existing compilers, you essentially are in charge of the entire toolchain. There are a number of rough steps:
</p>
<ul><li> <b>Define your native ABI</b>
</li></ul>
<dl><dd><dl><dd> Java and .NET come in bytecode, which are designed for machines that are fundamentally different than your typical register-based hardware. You'll need to understand assembly for your platform, and you'll have to think about how the language structures should be converted to native ones. One of the things this example does is to adhere to the stdcall convention, because it's closer to the virtual java machine than the cdecl that's the default in most compilers. 
</dd></dl>
</dd></dl>
<ul><li> <b>Create bytecode-to-native compiler</b>
</li></ul>
<dl><dd><dl><dd> Java comes in bytecode form, and we need a method of converting it to native. Because we are writing an OS at the same time, everything must be compiled ahead of time, and not rely on an existing runtime that expects the existing presence of an OS. Therefore, we write our own compiler. As part of the compiler, we include the org.objectweb.asm that can read .class files and save us from writing significant portions of code.
</dd></dl>
</dd></dl>
<ul><li> <b>Compile the compiler</b>
</li></ul>
<dl><dd><dl><dd> The compiler is of course written in Java as well. We don't need additional languages to add to the bootstrap problem later. Of course this compiler is overly simplistic, and will never be able to compile itself.
</dd></dl>
</dd></dl>
<ul><li> <b>Compile managed os to bytecode</b>
</li></ul>
<dl><dd><dl><dd> Javac is written in Java, so that's obviously the best choice for later porting.
</dd></dl>
</dd></dl>
<ul><li> <b>Compile bytecode to native assembly</b>
</li></ul>
<dl><dd><dl><dd> Now that we have the compiler, we can run it on all our OS classes to generate native code.
</dd></dl>
</dd></dl>
<ul><li> <b>Create runtime for things that have to be non-native</b>
</li></ul>
<dl><dd><dl><dd> Java is memory-safe, which prevents it from implementing a lot of things. A minimal set of startup code is done in native assembly. Everything architecture-specific has to be done in assembly. Some parts you'll need later, such as memory management and exception handling are probably easier to have pure native parts for as well.
</dd></dl>
</dd></dl>
<ul><li> <b>Assemble os and runtime</b>
</li></ul>
<dl><dd><dl><dd> We have everything in machine language form now. We're still reuseing the parts that we can, and in this example we use yasm. You're free to write an assembler in Java later on.
</dd></dl>
</dd></dl>
<ul><li> <b>package the final kernel binary</b>
</li></ul>
<dl><dd><dl><dd> This is done using binutils. Note that there is not a single C compiler in the chain, and again, you can build your own linker in your language - it doesn't really have to do that much.
</dd></dl>
</dd></dl>
<p><br />
</p>
<h2> <span class="mw-headline" id="Compiler"> Compiler </span></h2>
<p>In bytecoded languages there are several steps before code can be run. Typically you have "the" compiler, which converts your source files into some portable binary, and you have an interpreter that reads those binaries and runs instructions from them. Modern interpreters turn bytecode into native code, as to avoid the <tt>if(instruction = ...)</tt> that takes several cycles while the instruction you'd actually want to execute would otherwise cost you just one CPU instruction. 
</p><p>In the case of an OS, we need to take this a step further. We could run an interpreter, but that's slow. We could compile into native on boot but that needs just as much OS as we actually want to run. Instead, the appropriate solution is to compile to native in advance, so we can just run the code directly from the start.
</p><p>The entirety of a language is still a whole lot to deal with, but for our example it suffices to deal with just integers. That's right, no objects yet!
</p><p>The Java bytecode uses a stack for operations, and a list of locals. These need not be in the same place, but as the x86 only has one hardware stack, we'll be using it as both local stack, call stack, and operation stack. A few tricks are used to make this compiler easier, and in turn, make it difficult to interface with C. Locals in Java terms include the function arguments, and as a result the locals would be split around return addresses. Since the caller doesn't know the storage needed - it doesn't even get the number of arguments for free - the called function should fix this. We also can't put things past the top of the stack because that'll be a big issue with interrupts later. Basically we copy all arguments to the other side of the return address and then we make some room for locals so that they can be indexed by <tt>EBP - 4 * slot_number</tt> where for instance 0 and 1 would be arguments and 2+ would be true locals.
</p><p>The fact that getting the number of arguments is convoluted to perform on the caller's side, we do callee-cleanup using <tt>RET imm</tt> instead of the regular <tt>RET</tt>. Locals is a convoluted issue as well, so we just reserve room for 8 because you're not meant to copy this code anyway.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="java source-java"><pre class="de1"><span class="co1">// File: compiler/nl/combuster/minijava/Compiler.java</span>
<span class="kw1">package</span> <span class="co2">nl.combuster.minijava</span><span class="sy0">;</span>
&#160;
<span class="kw1">import</span> <span class="co2">org.objectweb.asm.*</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">org.objectweb.asm.tree.*</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.util.*</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.io.*</span><span class="sy0">;</span>
&#160;
<span class="kw1">public</span> <span class="kw1">class</span> <span class="kw3">Compiler</span>
<span class="br0">&#123;</span>
    <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> readEntireFile<span class="br0">&#40;</span><span class="kw3">String</span> filename<span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
        <span class="kw3">File</span> file <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">File</span><span class="br0">&#40;</span>filename<span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="kw1">try</span> 
        <span class="br0">&#123;</span>
            <span class="kw3">FileInputStream</span> input <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">FileInputStream</span><span class="br0">&#40;</span>file<span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="kw4">byte</span> bytes<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>file.<span class="me1">length</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#93;</span><span class="sy0">;</span>
            input.<span class="me1">read</span><span class="br0">&#40;</span>bytes<span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="kw1">return</span> bytes<span class="sy0">;</span>
        <span class="br0">&#125;</span>
        <span class="kw1">catch</span> <span class="br0">&#40;</span><span class="kw3">IOException</span> e<span class="br0">&#41;</span>
        <span class="br0">&#123;</span>
            <span class="kw1">throw</span> <span class="kw1">new</span> <span class="kw3">RuntimeException</span><span class="br0">&#40;</span><span class="st0">&quot;Unable to read file &quot;</span> <span class="sy0">+</span> file, e<span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
    <span class="br0">&#125;</span>
&#160;
    <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> writeOutput<span class="br0">&#40;</span><span class="kw3">String</span> filename, List<span class="sy0">&lt;</span>String<span class="sy0">&gt;</span> lines<span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
        <span class="kw1">try</span> 
        <span class="br0">&#123;</span>
            <span class="kw3">BufferedWriter</span> writer <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw3">BufferedWriter</span><span class="br0">&#40;</span><span class="kw1">new</span> <span class="kw3">FileWriter</span><span class="br0">&#40;</span><span class="kw1">new</span> <span class="kw3">File</span><span class="br0">&#40;</span>filename<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw3">String</span> string <span class="sy0">:</span> lines<span class="br0">&#41;</span>
            <span class="br0">&#123;</span>
                writer.<span class="me1">write</span><span class="br0">&#40;</span>string<span class="br0">&#41;</span><span class="sy0">;</span>
                writer.<span class="me1">newLine</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="br0">&#125;</span>
            writer.<span class="me1">close</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
        <span class="kw1">catch</span> <span class="br0">&#40;</span><span class="kw3">IOException</span> e<span class="br0">&#41;</span>
        <span class="br0">&#123;</span>
            <span class="kw1">throw</span> <span class="kw1">new</span> <span class="kw3">RuntimeException</span><span class="br0">&#40;</span><span class="st0">&quot;Unable to write output file &quot;</span> <span class="sy0">+</span> filename, e<span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
    <span class="br0">&#125;</span>
&#160;
    <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw3">String</span> decorate<span class="br0">&#40;</span><span class="kw3">String</span> classname, <span class="kw3">String</span> method, <span class="kw3">String</span> signature<span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
        <span class="co1">// make all these assembly-friendly names. Note that the </span>
        <span class="co1">// constructor is for instance called &lt;init&gt;</span>
        <span class="kw1">return</span> classname.<span class="me1">replace</span><span class="br0">&#40;</span><span class="st0">&quot;/&quot;</span>,<span class="st0">&quot;_&quot;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;__&quot;</span> <span class="sy0">+</span> method.<span class="me1">replace</span><span class="br0">&#40;</span><span class="st0">&quot;&lt;&quot;</span>,<span class="st0">&quot;_&quot;</span><span class="br0">&#41;</span>.<span class="me1">replace</span><span class="br0">&#40;</span><span class="st0">&quot;&gt;&quot;</span>,<span class="st0">&quot;_&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&#160;
    <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> jumpgroup<span class="br0">&#40;</span>List<span class="sy0">&lt;</span>String<span class="sy0">&gt;</span> output, <span class="kw3">String</span> jumpcode, LabelNode dest<span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
    	output.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;pop edx&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    	output.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;pop ecx&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    	output.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;cmp ecx, edx&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    	output.<span class="me1">add</span><span class="br0">&#40;</span>jumpcode <span class="sy0">+</span> <span class="st0">&quot; .l&quot;</span> <span class="sy0">+</span> dest.<span class="me1">getLabel</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&#160;
    <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> main<span class="br0">&#40;</span><span class="kw3">String</span> args<span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
        <span class="kw1">if</span> <span class="br0">&#40;</span>args.<span class="me1">length</span> <span class="sy0">!=</span> <span class="nu0">2</span><span class="br0">&#41;</span> <span class="kw1">throw</span> <span class="kw1">new</span> <span class="kw3">RuntimeException</span><span class="br0">&#40;</span><span class="st0">&quot;Usage: compiler input-file output-file&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
        ClassNode node <span class="sy0">=</span> <span class="kw1">new</span> ClassNode<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        ClassReader reader <span class="sy0">=</span> <span class="kw1">new</span> ClassReader<span class="br0">&#40;</span>readEntireFile<span class="br0">&#40;</span>args<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        reader.<span class="me1">accept</span><span class="br0">&#40;</span>node, <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
        List<span class="sy0">&lt;</span>String<span class="sy0">&gt;</span> outputdata <span class="sy0">=</span> <span class="kw1">new</span> LinkedList<span class="sy0">&lt;</span>String<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
        outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;section .text&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
        <span class="kw1">for</span> <span class="br0">&#40;</span>MethodNode method <span class="sy0">:</span> node.<span class="me1">methods</span><span class="br0">&#41;</span>
        <span class="br0">&#123;</span>
            method.<span class="me1">visitCode</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="kw3">String</span> methodname <span class="sy0">=</span> decorate<span class="br0">&#40;</span>node.<span class="me1">name</span>, method.<span class="me1">name</span>, method.<span class="me1">signature</span><span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
            <span class="kw1">if</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>method.<span class="me1">access</span> <span class="sy0">&amp;</span> Opcodes.<span class="me1">ACC_NATIVE</span><span class="br0">&#41;</span> <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw1">continue</span><span class="sy0">;</span>
&#160;
            <span class="co1">// prologue</span>
            <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">&#40;</span><span class="st0">&quot;; attributes: &quot;</span> <span class="sy0">+</span> method.<span class="me1">attrs</span><span class="br0">&#41;</span><span class="sy0">;</span>
            outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;global &quot;</span> <span class="sy0">+</span> methodname<span class="br0">&#41;</span><span class="sy0">;</span>
            outputdata.<span class="me1">add</span><span class="br0">&#40;</span>methodname <span class="sy0">+</span> <span class="st0">&quot;:&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;push ebp&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;mov ebp, esp&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
            <span class="kw4">int</span> locals <span class="sy0">=</span> <span class="br0">&#40;</span>method.<span class="me1">localVariables</span> <span class="sy0">==</span> <span class="kw2">null</span><span class="br0">&#41;</span> <span class="sy0">?</span> <span class="nu0">0</span> <span class="sy0">:</span> method.<span class="me1">localVariables</span>.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;; locals: + &quot;</span> <span class="sy0">+</span> locals<span class="br0">&#41;</span><span class="sy0">;</span>
			<span class="kw4">int</span> arguments <span class="sy0">=</span> <span class="br0">&#40;</span>method.<span class="me1">parameters</span> <span class="sy0">==</span> <span class="kw2">null</span><span class="br0">&#41;</span> <span class="sy0">?</span> <span class="nu0">0</span> <span class="sy0">:</span> method.<span class="me1">parameters</span>.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="kw1">if</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>method.<span class="me1">access</span> <span class="sy0">&amp;</span> Opcodes.<span class="me1">ACC_STATIC</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> arguments<span class="sy0">++;</span> <span class="co1">// hidden &quot;this&quot;</span>
            outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;; params: + &quot;</span> <span class="sy0">+</span> arguments<span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="co1">// copy params so that they correspond with java indexing and join with the local numbering</span>
			<span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> arguments<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span>
            <span class="br0">&#123;</span>
                outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;push dword [ebp + &quot;</span> <span class="sy0">+</span> <span class="br0">&#40;</span><span class="nu0">8</span> <span class="sy0">+</span> <span class="nu0">4</span> <span class="sy0">*</span> i<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;]&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="br0">&#125;</span>
            <span class="co1">// do some frame checking for many variables, locals is not of much use...</span>
            outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;sub esp, 32&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
            Iterator<span class="sy0">&lt;</span>AbstractInsnNode<span class="sy0">&gt;</span> iterator <span class="sy0">=</span> method.<span class="me1">instructions</span>.<span class="me1">iterator</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            <span class="kw1">while</span> <span class="br0">&#40;</span>iterator.<span class="me1">hasNext</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
            <span class="br0">&#123;</span>     
                AbstractInsnNode insn <span class="sy0">=</span> iterator.<span class="me1">next</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                <span class="kw4">int</span> opcode <span class="sy0">=</span> insn.<span class="me1">getOpcode</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">&amp;</span> 0xff<span class="sy0">;</span>
                outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;   &#160;; &quot;</span> <span class="sy0">+</span> opcode <span class="sy0">+</span> <span class="st0">&quot; = &quot;</span> <span class="sy0">+</span> insn.<span class="me1">getClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">getSimpleName</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                <span class="co1">//outputdata.add(&quot;mov byte [&quot; + (0xb8000 + 156) + &quot;], '0' + &quot; + (opcode&#160;% 10));</span>
                <span class="co1">//outputdata.add(&quot;mov byte [&quot; + (0xb8000 + 154) + &quot;], '0' + &quot; + (opcode / 10)%10);</span>
                <span class="co1">//outputdata.add(&quot;mov byte [&quot; + (0xb8000 + 152) + &quot;], '0' + &quot; + (opcode / 100));</span>
&#160;
                <span class="kw1">if</span> <span class="br0">&#40;</span>insn <span class="kw1">instanceof</span> LabelNode<span class="br0">&#41;</span>
                <span class="br0">&#123;</span>
                    LabelNode labelinsn <span class="sy0">=</span> <span class="br0">&#40;</span>LabelNode<span class="br0">&#41;</span>insn<span class="sy0">;</span>
                    outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;.l&quot;</span> <span class="sy0">+</span> labelinsn.<span class="me1">getLabel</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                <span class="br0">&#125;</span>
                <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>insn <span class="kw1">instanceof</span> LineNumberNode<span class="br0">&#41;</span>
                <span class="br0">&#123;</span>
                    <span class="co1">// ignore these</span>
                <span class="br0">&#125;</span>
                <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>insn <span class="kw1">instanceof</span> VarInsnNode<span class="br0">&#41;</span>
                <span class="br0">&#123;</span>
                    <span class="co1">// copy a variable</span>
                    VarInsnNode varinsn <span class="sy0">=</span> <span class="br0">&#40;</span>VarInsnNode<span class="br0">&#41;</span> insn<span class="sy0">;</span>
                    <span class="kw1">switch</span><span class="br0">&#40;</span>varinsn.<span class="me1">getOpcode</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
                    <span class="br0">&#123;</span>
                        <span class="kw1">case</span> Opcodes.<span class="me1">ILOAD</span><span class="sy0">:</span>
                        <span class="kw1">case</span> Opcodes.<span class="me1">ALOAD</span><span class="sy0">:</span>
                            <span class="co1">// todo: verify offset</span>
                            outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;push dword [ebp - &quot;</span> <span class="sy0">+</span> <span class="br0">&#40;</span><span class="nu0">4</span> <span class="sy0">+</span> <span class="nu0">4</span> <span class="sy0">*</span> varinsn.<span class="me1">var</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;]&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                            <span class="kw1">break</span><span class="sy0">;</span>
&#160;
                        <span class="kw1">case</span> Opcodes.<span class="me1">ISTORE</span><span class="sy0">:</span>
                        <span class="kw1">case</span> Opcodes.<span class="me1">ASTORE</span><span class="sy0">:</span>
                            outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;pop dword [ebp - &quot;</span> <span class="sy0">+</span> <span class="br0">&#40;</span><span class="nu0">4</span> <span class="sy0">+</span> <span class="nu0">4</span> <span class="sy0">*</span> varinsn.<span class="me1">var</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;]&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                            <span class="kw1">break</span><span class="sy0">;</span>
&#160;
                        <span class="kw1">default</span><span class="sy0">:</span>
                            outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;Can't deal with varinsnnode: &quot;</span> <span class="sy0">+</span> varinsn.<span class="me1">getOpcode</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                    <span class="br0">&#125;</span>
                <span class="br0">&#125;</span>
                <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>insn <span class="kw1">instanceof</span> MethodInsnNode<span class="br0">&#41;</span>
                <span class="br0">&#123;</span>
                    MethodInsnNode methodinsn <span class="sy0">=</span> <span class="br0">&#40;</span>MethodInsnNode<span class="br0">&#41;</span> insn<span class="sy0">;</span>
                    <span class="kw3">String</span> calledmethod <span class="sy0">=</span> decorate<span class="br0">&#40;</span>methodinsn.<span class="me1">owner</span>, methodinsn.<span class="me1">name</span>, methodinsn.<span class="me1">desc</span><span class="br0">&#41;</span><span class="sy0">;</span>
                    outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;extern &quot;</span> <span class="sy0">+</span> calledmethod<span class="br0">&#41;</span><span class="sy0">;</span>
                    outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;call &quot;</span> <span class="sy0">+</span> calledmethod<span class="br0">&#41;</span><span class="sy0">;</span>
                    <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>methodinsn.<span class="me1">desc</span>.<span class="me1">endsWith</span><span class="br0">&#40;</span><span class="st0">&quot;V&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
                    <span class="br0">&#123;</span>
                        <span class="co1">// not a void return value</span>
                        outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;push eax&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                    <span class="br0">&#125;</span>
                    <span class="coMULTI">/*switch (methodinsn.getOpcode())
                    {
                        default:
                            outputdata.add(&quot;Can't deal with methodcall: &quot; + methodinsn.getOpcode());
                    }*/</span>
                <span class="br0">&#125;</span>
                <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>insn <span class="kw1">instanceof</span> IntInsnNode<span class="br0">&#41;</span>
                <span class="br0">&#123;</span>
                	IntInsnNode intinsn <span class="sy0">=</span> <span class="br0">&#40;</span>IntInsnNode<span class="br0">&#41;</span>insn<span class="sy0">;</span>
                    <span class="kw1">switch</span><span class="br0">&#40;</span>intinsn.<span class="me1">getOpcode</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
                    <span class="br0">&#123;</span>
                        <span class="kw1">case</span> Opcodes.<span class="me1">BIPUSH</span><span class="sy0">:</span>
                            outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;push &quot;</span> <span class="sy0">+</span> intinsn.<span class="me1">operand</span><span class="br0">&#41;</span><span class="sy0">;</span>
                            <span class="kw1">break</span><span class="sy0">;</span>
&#160;
                        <span class="kw1">default</span><span class="sy0">:</span>
                            outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;Can't deal with intinsnnode: &quot;</span> <span class="sy0">+</span> intinsn.<span class="me1">getOpcode</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                    <span class="br0">&#125;</span>
&#160;
                <span class="br0">&#125;</span>
                <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>insn <span class="kw1">instanceof</span> JumpInsnNode<span class="br0">&#41;</span>
                <span class="br0">&#123;</span>
                	JumpInsnNode jmpinsn <span class="sy0">=</span> <span class="br0">&#40;</span>JumpInsnNode<span class="br0">&#41;</span>insn<span class="sy0">;</span>
&#160;
                    <span class="kw1">switch</span><span class="br0">&#40;</span>jmpinsn.<span class="me1">getOpcode</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
                    <span class="br0">&#123;</span>
                    	<span class="kw1">case</span> Opcodes.<span class="me1">IF_ICMPEQ</span><span class="sy0">:</span>		jumpgroup<span class="br0">&#40;</span>outputdata, <span class="st0">&quot;je&quot;</span>, jmpinsn.<span class="me1">label</span><span class="br0">&#41;</span><span class="sy0">;</span> 	<span class="kw1">break</span><span class="sy0">;</span> <span class="co1">// 159</span>
                    	<span class="kw1">case</span> Opcodes.<span class="me1">IF_ICMPNE</span><span class="sy0">:</span>		jumpgroup<span class="br0">&#40;</span>outputdata, <span class="st0">&quot;jne&quot;</span>, jmpinsn.<span class="me1">label</span><span class="br0">&#41;</span><span class="sy0">;</span> 	<span class="kw1">break</span><span class="sy0">;</span> <span class="co1">// 160                    	</span>
                    	<span class="kw1">case</span> Opcodes.<span class="me1">IF_ICMPLT</span><span class="sy0">:</span>		jumpgroup<span class="br0">&#40;</span>outputdata, <span class="st0">&quot;jb&quot;</span>, jmpinsn.<span class="me1">label</span><span class="br0">&#41;</span><span class="sy0">;</span> 	<span class="kw1">break</span><span class="sy0">;</span> <span class="co1">// 161</span>
                    	<span class="kw1">case</span> Opcodes.<span class="me1">IF_ICMPGE</span><span class="sy0">:</span>		jumpgroup<span class="br0">&#40;</span>outputdata, <span class="st0">&quot;jae&quot;</span>, jmpinsn.<span class="me1">label</span><span class="br0">&#41;</span><span class="sy0">;</span> 	<span class="kw1">break</span><span class="sy0">;</span> <span class="co1">// 162</span>
                    	<span class="kw1">case</span> Opcodes.<span class="me1">IF_ICMPGT</span><span class="sy0">:</span>		jumpgroup<span class="br0">&#40;</span>outputdata, <span class="st0">&quot;ja&quot;</span>, jmpinsn.<span class="me1">label</span><span class="br0">&#41;</span><span class="sy0">;</span> 	<span class="kw1">break</span><span class="sy0">;</span> <span class="co1">// 163</span>
                    	<span class="kw1">case</span> Opcodes.<span class="me1">IF_ICMPLE</span><span class="sy0">:</span>		jumpgroup<span class="br0">&#40;</span>outputdata, <span class="st0">&quot;jbe&quot;</span>, jmpinsn.<span class="me1">label</span><span class="br0">&#41;</span><span class="sy0">;</span>	<span class="kw1">break</span><span class="sy0">;</span> <span class="co1">// 164</span>
&#160;
                        <span class="kw1">case</span> Opcodes.<span class="kw1">GOTO</span><span class="sy0">:</span> <span class="co1">// 167</span>
                            outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;jmp .l&quot;</span> <span class="sy0">+</span> jmpinsn.<span class="me1">label</span>.<span class="me1">getLabel</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                            <span class="kw1">break</span><span class="sy0">;</span>
&#160;
                        <span class="kw1">default</span><span class="sy0">:</span>
                            outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;Can't deal with jumpinsnnode: &quot;</span> <span class="sy0">+</span> jmpinsn.<span class="me1">getOpcode</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                    <span class="br0">&#125;</span>
                <span class="br0">&#125;</span>   
                <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>insn <span class="kw1">instanceof</span> LdcInsnNode<span class="br0">&#41;</span>
                <span class="br0">&#123;</span>
                	LdcInsnNode ldcinsn <span class="sy0">=</span> <span class="br0">&#40;</span>LdcInsnNode<span class="br0">&#41;</span> insn<span class="sy0">;</span>
                	<span class="kw1">if</span> <span class="br0">&#40;</span>ldcinsn.<span class="me1">cst</span> <span class="kw1">instanceof</span> <span class="kw3">Integer</span><span class="br0">&#41;</span>
                	<span class="br0">&#123;</span>
                		outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;push &quot;</span> <span class="sy0">+</span> ldcinsn.<span class="me1">cst</span>.<span class="me1">toString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                	<span class="br0">&#125;</span>
                	<span class="kw1">else</span>
                	<span class="br0">&#123;</span>
	                	outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;Can't deal with data in ldcinsnnode (&quot;</span> <span class="sy0">+</span> ldcinsn.<span class="me1">getOpcode</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">+</span><span class="st0">&quot;): &quot;</span> <span class="sy0">+</span> ldcinsn.<span class="me1">cst</span>.<span class="me1">getClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">getSimpleName</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                	<span class="br0">&#125;</span>
                <span class="br0">&#125;</span>             
                <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>insn <span class="kw1">instanceof</span> IincInsnNode<span class="br0">&#41;</span>
                <span class="br0">&#123;</span>
                	IincInsnNode incinsn <span class="sy0">=</span> <span class="br0">&#40;</span>IincInsnNode<span class="br0">&#41;</span> insn<span class="sy0">;</span>
                	<span class="kw1">switch</span> <span class="br0">&#40;</span>incinsn.<span class="me1">getOpcode</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
                	<span class="br0">&#123;</span>	
                	    <span class="kw1">case</span> Opcodes.<span class="me1">IINC</span><span class="sy0">:</span>
                	    	outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;add dword [ebp - &quot;</span> <span class="sy0">+</span> <span class="br0">&#40;</span><span class="nu0">4</span> <span class="sy0">+</span> <span class="nu0">4</span> <span class="sy0">*</span> incinsn.<span class="me1">var</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;], &quot;</span> <span class="sy0">+</span> incinsn.<span class="me1">incr</span><span class="br0">&#41;</span><span class="sy0">;</span>
                	    	<span class="kw1">break</span><span class="sy0">;</span>
                		<span class="kw1">default</span><span class="sy0">:</span>
                			outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;Can't deal with iincinsnnode: &quot;</span> <span class="sy0">+</span> incinsn.<span class="me1">getOpcode</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>                			
                	<span class="br0">&#125;</span>
&#160;
                <span class="br0">&#125;</span>
                <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>insn.<span class="me1">getOpcode</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">&gt;=</span> Opcodes.<span class="me1">ICONST_M1</span> <span class="sy0">&amp;&amp;</span> insn.<span class="me1">getOpcode</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">&lt;=</span> Opcodes.<span class="me1">ICONST_5</span><span class="br0">&#41;</span> <span class="co1">// 2...8</span>
                <span class="br0">&#123;</span>
                    outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;push &quot;</span> <span class="sy0">+</span> <span class="br0">&#40;</span>insn.<span class="me1">getOpcode</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">-</span> Opcodes.<span class="me1">ICONST_M1</span> <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                <span class="br0">&#125;</span>
                <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>insn.<span class="me1">getOpcode</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">==</span> Opcodes.<span class="me1">IADD</span><span class="br0">&#41;</span> <span class="co1">// 96</span>
                <span class="br0">&#123;</span>
                	outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;pop edx&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                	outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;add [esp], edx&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                <span class="br0">&#125;</span>
                <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>insn.<span class="me1">getOpcode</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">==</span> Opcodes.<span class="me1">IMUL</span><span class="br0">&#41;</span> <span class="co1">// 104</span>
                <span class="br0">&#123;</span>
                	outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;pop eax&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                	outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;pop ecx&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                	outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;imul ecx&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">// eax:edx = eax * ecx</span>
                	outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;push eax&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                <span class="br0">&#125;</span>                
                <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>insn.<span class="me1">getOpcode</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">==</span> Opcodes.<span class="me1">I2B</span><span class="br0">&#41;</span> <span class="co1">// 145</span>
                <span class="br0">&#123;</span>
                	outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;and dword [esp], 0xff&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                <span class="br0">&#125;</span>
                <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>insn.<span class="me1">getOpcode</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">==</span> Opcodes.<span class="kw1">RETURN</span><span class="br0">&#41;</span>	<span class="co1">// 177</span>
                <span class="br0">&#123;</span>
                	outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;xor eax, eax&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                <span class="br0">&#125;</span>
                <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>insn <span class="kw1">instanceof</span> FrameNode<span class="br0">&#41;</span>
                <span class="br0">&#123;</span>
                    outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;; framenode&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                <span class="br0">&#125;</span>
                <span class="kw1">else</span>
                <span class="br0">&#123;</span>
                    outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;Can't deal with &quot;</span> <span class="sy0">+</span> insn.<span class="me1">getClass</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">getSimpleName</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;, fix it (&quot;</span> <span class="sy0">+</span> insn.<span class="me1">getOpcode</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;)&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                <span class="br0">&#125;</span>
            <span class="br0">&#125;</span>
&#160;
            <span class="co1">// epilogue, stdcall to save complexity on decoding methodinsns</span>
            outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;leave&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            outputdata.<span class="me1">add</span><span class="br0">&#40;</span><span class="st0">&quot;ret &quot;</span> <span class="sy0">+</span> arguments<span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
&#160;
        writeOutput<span class="br0">&#40;</span>args<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>, outputdata<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>Yes, that's a compiler in a magic 256 lines of code. The result is Intel syntax assembly, because there already are decent tools for assembly out there that deal with object formats out there. Of course you can write your own later as well.
</p>
<h2> <span class="mw-headline" id="HAL_and_Runtime"> HAL and Runtime </span></h2>
<p>Almost no programming language has standard constructs for all the things a processor can do, in particular not languages that were designed to be portable and memory-safe. For that reason we are required to add support for that outside of the language. Fortunately, Java does come with one construct specifically design to wrap the language to platform specifics: <tt>native</tt>
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="java source-java"><pre class="de1"><span class="co1">// File: os/nl/combuster/minijavaos/Hal.java</span>
<span class="kw1">package</span> <span class="co2">nl.combuster.minijavaos</span><span class="sy0">;</span>
&#160;
<span class="kw1">public</span> <span class="kw1">class</span> Hal
<span class="br0">&#123;</span>
    <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw1">native</span> <span class="kw4">void</span> poke<span class="br0">&#40;</span><span class="kw4">int</span> address, <span class="kw4">byte</span> data<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>At some point the OS needs to access memory unsafely, and this is the method we'll use. The native keyword also implies that there is no implementation in java and that it'll come from elsewhere.
</p><p>There are more things that might be difficult to do in straight Java: this example omits memory management in its entirety, but there is still a quirk: Every object subclasses from java.lang.Object. To make matters more complicated, the compiler does not allow us to write java.lang classes in Java. In this case it's a particular chicken-and-egg problem: how would we even compile a class that extends itself? We are in some way forced to treat java.lang.Object special, and basically use its constructor as a terminator for a constructor chain. At a later stage, we might even want to do something more in there, but for now we don't need to. The first piece of native support code deals with these problems:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="co1">; File: os/hal.asm</span>
section <span class="sy0">.</span>text
&#160;
global java_lang_Object___init_
global nl_combuster_minijavaos_Hal__poke
&#160;
java_lang_Object___init_<span class="sy0">:</span>
	<span class="kw1">ret</span>
&#160;
nl_combuster_minijavaos_Hal__poke<span class="sy0">:</span>
	<span class="kw1">mov</span> <span class="kw3">eax</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="kw3">esp</span><span class="sy0">+</span><span class="nu0">8</span><span class="br0">&#93;</span>
	<span class="kw1">mov</span> <span class="kw3">dl</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="kw3">esp</span><span class="sy0">+</span><span class="nu0">4</span><span class="br0">&#93;</span>
	<span class="kw1">mov</span> <span class="br0">&#91;</span><span class="kw3">eax</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="kw3">dl</span>
	<span class="kw1">ret</span> <span class="nu0">2</span></pre></div></div>
<h2> <span class="mw-headline" id="A_primitive_kernel"> A primitive kernel </span></h2>
<p>"Hello world!" is a very overrated thing. Or is it? Strings are a full-blown object in Java, and passing objects safely is one of the things skipped in the compiler itself. Instead, we can count our numbers to show what we have actually works:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="java source-java"><pre class="de1"><span class="kw1">package</span> <span class="co2">nl.combuster.minijavaos</span><span class="sy0">;</span>
&#160;
<span class="kw1">public</span> <span class="kw1">class</span> <span class="kw3">Kernel</span>
<span class="br0">&#123;</span>
    <span class="kw1">public</span> <span class="kw3">Kernel</span><span class="br0">&#40;</span><span class="kw4">int</span> arg1<span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
    <span class="br0">&#125;</span>
&#160;
    <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> kmain<span class="br0">&#40;</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>            
&#160;
        <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> <span class="nu0">10</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span>
        <span class="br0">&#123;</span>
            Hal.<span class="me1">poke</span><span class="br0">&#40;</span>0xB8000 <span class="sy0">+</span> <span class="nu0">2</span> <span class="sy0">*</span> i,     <span class="br0">&#40;</span><span class="kw4">byte</span><span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="st0">'0'</span> <span class="sy0">+</span> i<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
            Hal.<span class="me1">poke</span><span class="br0">&#40;</span>0xB8000 <span class="sy0">+</span> <span class="nu0">2</span> <span class="sy0">*</span> i <span class="sy0">+</span> <span class="nu0">1</span>, <span class="br0">&#40;</span><span class="kw4">byte</span><span class="br0">&#41;</span> 0x1F<span class="br0">&#41;</span><span class="sy0">;</span> 
        <span class="br0">&#125;</span>                
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>This is little more than some simple VGA code, but it demonstrates that we can call Java code, do some calculations, and then call our hardware abstraction layer to complete the little bits Java just couldn't do.
</p>
<h2> <span class="mw-headline" id="Wrapping_it_all_together"> Wrapping it all together </span></h2>
<p>The last thing we need to do is to glue all the pieces together and stick a bootloader on top of it. <a href="Bare_Bones" title="Bare Bones">Bare Bones</a> has a more extensive description of the process. You might have noticed the full filenames in the source files above, basically we have two projects fairly tightly intertwined with each other, residing in the compiler and os subfolders that serve as the Java source root at the same time. A build folder is added so that you can simply delete that folder to start fresh, without having to worry about finding all your intermediates in between the real sources. In particular, we wouldn't be able to tell which .asm file is original and which one is compiler output without it! 
</p>
<h4> <span class="mw-headline" id="Multiboot"> Multiboot </span></h4>
<p>We use GRUB as a bootloader, so the mechanics are the same. The only real difference is that we have to cope with the name mangling and be unable to call something kmain.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1"><span class="co1">; File: os/multiboot.asm</span>
&#160;
<span class="co1">; Declare constants used for creating a multiboot header.</span>
MBALIGN    <span class="kw4"> equ</span>  <span class="nu0">1</span>&lt;&lt;<span class="nu0">0</span>                   <span class="co1">; align loaded modules on page boundaries</span>
MEMINFO    <span class="kw4"> equ</span>  <span class="nu0">1</span>&lt;&lt;<span class="nu0">1</span>                   <span class="co1">; provide memory map</span>
FLAGS      <span class="kw4"> equ</span>  MBALIGN | MEMINFO      <span class="co1">; this is the Multiboot 'flag' field</span>
MAGIC      <span class="kw4"> equ</span>  <span class="nu0">0x1BADB002</span>             <span class="co1">; 'magic number' lets bootloader find the header</span>
CHECKSUM   <span class="kw4"> equ</span> <span class="sy0">-</span><span class="br0">&#40;</span>MAGIC <span class="sy0">+</span> FLAGS<span class="br0">&#41;</span>        <span class="co1">; checksum of above, to prove we are multiboot</span>
&#160;
<span class="co1">; Declare a header as in the Multiboot Standard.</span>
section <span class="sy0">.</span>multiboot
<span class="kw4">align</span> <span class="nu0">4</span>
	<span class="kw4">dd</span> MAGIC
	<span class="kw4">dd</span> FLAGS
	<span class="kw4">dd</span> CHECKSUM
&#160;
<span class="co1">; We'll need a stack</span>
section <span class="sy0">.</span>bootstrap_stack<span class="sy0">,</span> nobits
<span class="kw4">align</span> <span class="nu0">4</span>
stack_bottom<span class="sy0">:</span>
resb <span class="nu0">16384</span>
stack_top<span class="sy0">:</span>
&#160;
<span class="co1">; Kernel entry point</span>
section <span class="sy0">.</span>text
global _start
_start<span class="sy0">:</span>
	<span class="kw1">mov</span> <span class="kw3">esp</span><span class="sy0">,</span> stack_top
&#160;
	<span class="kw4">extern</span> nl_combuster_minijavaos_Kernel__kmain
	<span class="kw1">call</span> nl_combuster_minijavaos_Kernel__kmain
&#160;
	<span class="kw1">cli</span>
<span class="sy0">.</span>hang<span class="sy0">:</span>
	<span class="co1">;hlt</span>
	<span class="kw1">jmp</span> <span class="sy0">.</span>hang</pre></div></div>
<h4> <span class="mw-headline" id="Linker_script">Linker script</span></h4>
<p>Linking also happens with the same script as <a href="Bare_Bones" title="Bare Bones">Bare Bones</a>
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="coMULTI">/* File: os/linker.ld */</span>
<span class="coMULTI">/* The bootloader will look at this image and start execution at the symbol
   designated as the entry point. */</span>
ENTRY<span class="br0">&#40;</span>_start<span class="br0">&#41;</span>
&#160;
<span class="coMULTI">/* Tell where the various sections of the object files will be put in the final
   kernel image. */</span>
SECTIONS
<span class="br0">&#123;</span>
	<span class="coMULTI">/* Begin putting sections at 1 MiB, a conventional place for kernels to be
	   loaded at by the bootloader. */</span>
	. <span class="sy0">=</span> 1M<span class="sy0">;</span>
&#160;
	<span class="coMULTI">/* First put the multiboot header, as it is required to be put very early
	   early in the image or the bootloader won't recognize the file format.
	   Next we'll put the .text section. */</span>
	.<span class="me1">text</span> BLOCK<span class="br0">&#40;</span>4K<span class="br0">&#41;</span> <span class="sy0">:</span> ALIGN<span class="br0">&#40;</span>4K<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="sy0">*</span><span class="br0">&#40;</span>.<span class="me1">multiboot</span><span class="br0">&#41;</span>
		<span class="sy0">*</span><span class="br0">&#40;</span>.<span class="me1">text</span><span class="br0">&#41;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="coMULTI">/* Read-only data. */</span>
	.<span class="me1">rodata</span> BLOCK<span class="br0">&#40;</span>4K<span class="br0">&#41;</span> <span class="sy0">:</span> ALIGN<span class="br0">&#40;</span>4K<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="sy0">*</span><span class="br0">&#40;</span>.<span class="me1">rodata</span><span class="br0">&#41;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="coMULTI">/* Read-write data (initialized) */</span>
	.<span class="me1">data</span> BLOCK<span class="br0">&#40;</span>4K<span class="br0">&#41;</span> <span class="sy0">:</span> ALIGN<span class="br0">&#40;</span>4K<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="sy0">*</span><span class="br0">&#40;</span>.<span class="me1">data</span><span class="br0">&#41;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="coMULTI">/* Read-write data (uninitialized) and stack */</span>
	.<span class="me1">bss</span> BLOCK<span class="br0">&#40;</span>4K<span class="br0">&#41;</span> <span class="sy0">:</span> ALIGN<span class="br0">&#40;</span>4K<span class="br0">&#41;</span>
	<span class="br0">&#123;</span>
		<span class="sy0">*</span><span class="br0">&#40;</span>COMMON<span class="br0">&#41;</span>
		<span class="sy0">*</span><span class="br0">&#40;</span>.<span class="me1">bss</span><span class="br0">&#41;</span>
		<span class="sy0">*</span><span class="br0">&#40;</span>.<span class="me1">bootstrap_stack</span><span class="br0">&#41;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="coMULTI">/* The compiler may produce other sections, by default it will put them in
	   a segment with the same name. Simply add stuff here as needed. */</span>
<span class="br0">&#125;</span></pre></div></div>
<h4> <span class="mw-headline" id="GRUB"> GRUB </span></h4>
<p>Some configuration files for GRUB legacy. Doing this with a CD is the easiest way, really:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="co0"># </span>
<span class="co0"># File: os/grub.cfg</span>
<span class="co0">#</span>
default <span class="nu0">0</span>
timeout <span class="nu0">30</span>
&#160;
<span class="co0"># For booting GNU/Linux</span>
title Java OS 
root <span class="br0">&#40;</span><span class="kw3">cd</span><span class="br0">&#41;</span>
kernel <span class="br0">&#40;</span><span class="kw3">cd</span><span class="br0">&#41;</span><span class="sy0">/</span>kernel</pre></div></div>
<h4> <span class="mw-headline" id="Build_instructions"> Build instructions </span></h4>
<p>To simplify things, here's the Makefile that glues all the steps together. This one is a bit more elaborate as it covers for pretty much all the intermediate steps needed. Compile the compiler, make an executable jar file, compile the java files to class files, to assembly files, to object files, to an ELF binary. Include the runtime halfway into the process, then build a CD image with GRUB. 
</p><p>In this example, GRUB is assumed to be preinstalled in /boot where it resides by default on a linux system that has it installed. We also need mkisofs and the binutils step from the <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC Cross-Compiler</a>. Of course, at some point in time you can decide to write these tools in Java as well
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="make source-make"><pre class="de1">COMPILER_J<span class="sy0">=$</span><span class="br0">&#40;</span><span class="re1">shell</span> find <span class="sy0">-</span>L compiler <span class="sy0">-</span>iname <span class="st0">'*.java'</span><span class="br0">&#41;</span>
COMPILER_C<span class="sy0">=$</span><span class="br0">&#40;</span><span class="re1">addprefix</span> build<span class="sy0">/,$</span><span class="br0">&#40;</span><span class="re1">patsubst</span> <span class="sy0">%.</span>java<span class="sy0">,%.</span>class<span class="sy0">,$</span><span class="br0">&#40;</span><span class="re2">COMPILER_J</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&#160;
OS_J<span class="sy0">:=$</span><span class="br0">&#40;</span><span class="re1">shell</span> find <span class="sy0">-</span>L os <span class="sy0">-</span>iname <span class="st0">'*.java'</span><span class="br0">&#41;</span>
OS_C<span class="sy0">:=$</span><span class="br0">&#40;</span><span class="re1">addprefix</span> build<span class="sy0">/,$</span><span class="br0">&#40;</span><span class="re1">patsubst</span> <span class="sy0">%.</span>java<span class="sy0">,%.</span>class<span class="sy0">,$</span><span class="br0">&#40;</span><span class="re2">OS_J</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
OS_A<span class="sy0">:=$</span><span class="br0">&#40;</span><span class="re1">patsubst</span> <span class="sy0">%.</span>class<span class="sy0">,%.</span>asm<span class="sy0">,$</span><span class="br0">&#40;</span><span class="re2">OS_C</span><span class="br0">&#41;</span><span class="br0">&#41;</span> 
RT_A<span class="sy0">:=$</span><span class="br0">&#40;</span><span class="re1">shell</span> find <span class="sy0">-</span>L os <span class="sy0">-</span>iname <span class="st0">'*.asm'</span><span class="br0">&#41;</span>
OS_O<span class="sy0">:=$</span><span class="br0">&#40;</span><span class="re1">patsubst</span> <span class="sy0">%.</span>asm<span class="sy0">,%.</span>o<span class="sy0">,$</span><span class="br0">&#40;</span><span class="re2">OS_A</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
RT_O<span class="sy0">:=$</span><span class="br0">&#40;</span><span class="re1">addprefix</span> build<span class="sy0">/,$</span><span class="br0">&#40;</span><span class="re1">patsubst</span> <span class="sy0">%.</span>asm<span class="sy0">,%.</span>o<span class="sy0">,$</span><span class="br0">&#40;</span><span class="re2">RT_A</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
&#160;
default<span class="sy0">:</span> build<span class="sy0">/</span>compiler<span class="sy0">.</span>jar build<span class="sy0">/</span>kernel build<span class="sy0">/</span>image<span class="sy0">.</span>iso
	echo done compiling
&#160;
<span class="kw2">.PHONY</span><span class="sy0">:</span> default
&#160;
build<span class="sy0">/.</span>dir<span class="sy0">:</span> 
	mkdir <span class="sy0">-</span>p build<span class="sy0">/</span>compiler
	mkdir <span class="sy0">-</span>p build<span class="sy0">/</span>os
	touch build<span class="sy0">/.</span>dir
&#160;
build<span class="sy0">/</span>compiler<span class="sy0">.</span>jar<span class="sy0">:</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">COMPILER_C</span><span class="br0">&#41;</span> compiler<span class="sy0">/</span>compiler<span class="sy0">.</span>manifest
	jar cvfm <span class="re0">$@</span> compiler<span class="sy0">/</span>compiler<span class="sy0">.</span>manifest <span class="sy0">-</span>C build<span class="sy0">/</span>compiler <span class="sy0">.</span>
&#160;
build<span class="sy0">/</span>compiler<span class="sy0">/%.</span>class<span class="sy0">:</span> compiler<span class="sy0">/%.</span>java build<span class="sy0">/.</span>dir
	javac <span class="sy0">-</span>d build<span class="sy0">/</span>compiler <span class="sy0">-</span>sourcepath compiler <span class="re0">$&lt;</span>
&#160;
build<span class="sy0">/</span>os<span class="sy0">/%.</span>class<span class="sy0">:</span> os<span class="sy0">/%.</span>java build<span class="sy0">/.</span>dir
	javac <span class="sy0">-</span>d build<span class="sy0">/</span>os <span class="sy0">-</span>sourcepath os <span class="re0">$&lt;</span>
&#160;
<span class="sy0">%.</span>asm<span class="sy0">:%.</span>class build<span class="sy0">/</span>compiler<span class="sy0">.</span>jar
	java <span class="sy0">-</span>jar build<span class="sy0">/</span>compiler<span class="sy0">.</span>jar <span class="re0">$&lt;</span> <span class="re0">$@</span>
&#160;
<span class="sy0">%.</span>o<span class="sy0">:%.</span>asm
	yasm <span class="sy0">-</span>f elf <span class="sy0">-</span>o <span class="re0">$@</span> <span class="re0">$&lt;</span>
&#160;
build<span class="sy0">/</span>os<span class="sy0">/%.</span>o<span class="sy0">:</span> os<span class="sy0">/%.</span>asm build<span class="sy0">/.</span>dir
	yasm <span class="sy0">-</span>f elf <span class="sy0">-</span>o <span class="re0">$@</span> <span class="re0">$&lt;</span>
&#160;
build<span class="sy0">/</span>kernel<span class="sy0">:</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">OS_O</span><span class="br0">&#41;</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">RT_O</span><span class="br0">&#41;</span>
	i586<span class="sy0">-</span>elf<span class="sy0">-</span>ld <span class="sy0">-</span>o <span class="re0">$@</span> <span class="sy0">-</span>T os<span class="sy0">/</span>linker<span class="sy0">.</span>ld <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">OS_O</span><span class="br0">&#41;</span> <span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">RT_O</span><span class="br0">&#41;</span>
&#160;
build<span class="sy0">/</span>image<span class="sy0">.</span>iso<span class="sy0">:</span> build<span class="sy0">/</span>kernel os<span class="sy0">/</span>grub<span class="sy0">.</span>cfg Makefile
	<span class="sy0">-</span>rm <span class="sy0">-</span>rf build<span class="sy0">/</span>iso
	mkdir <span class="sy0">-</span>p build<span class="sy0">/</span>iso<span class="sy0">/</span>boot<span class="sy0">/</span>grub
	cp build<span class="sy0">/</span>kernel build<span class="sy0">/</span>iso<span class="sy0">/</span>
	cp os<span class="sy0">/</span>grub<span class="sy0">.</span>cfg build<span class="sy0">/</span>iso<span class="sy0">/</span>boot<span class="sy0">/</span>grub<span class="sy0">/</span>menu<span class="sy0">.</span>lst
	cp <span class="sy0">/</span>boot<span class="sy0">/</span>grub<span class="sy0">/</span>stage2_eltorito build<span class="sy0">/</span>iso<span class="sy0">/</span>boot<span class="sy0">/</span>grub<span class="sy0">/</span>
	mkisofs <span class="sy0">-</span>R <span class="sy0">-</span>b boot<span class="sy0">/</span>grub<span class="sy0">/</span>stage2_eltorito <span class="sy0">-</span>no<span class="sy0">-</span>emul<span class="sy0">-</span>boot <span class="sy0">-</span>boot<span class="sy0">-</span>load<span class="sy0">-</span>size <span class="nu0">4</span> <span class="sy0">-</span>boot<span class="sy0">-</span>info<span class="sy0">-</span>table <span class="sy0">-</span>o <span class="re0">$@</span> build<span class="sy0">/</span>iso</pre></div></div>
<p>If you paid attention, you'll notice that the JAR step requires a manifest at <tt>compiler/compiler.manifest</tt>. It only really marks it as runnable so that we can use it easily:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1">Main-Class: nl.combuster.minijava.Compiler</pre></div></div>
<p>Lastly, the <a rel="nofollow" class="external text" href="http://forge.ow2.org/project/download.php?group_id=23&amp;file_id=20549">one library</a> our compiler uses to do most of its magic. You can just copy the source into the compiler folder and the build script will pick it up.
</p>
<!-- 
NewPP limit report
Preprocessor node count: 233/1000000
Post-expand include size: 372/2097152 bytes
Template argument size: 84/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3849-0!*!0!!en!2!* and timestamp 20180121080028 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=Java_Primer&amp;oldid=19396">http://wiki.osdev.org/index.php?title=Java_Primer&amp;oldid=19396</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="http://wiki.osdev.org/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="Category:Level_3_Tutorials" title="Category:Level 3 Tutorials">Level 3 Tutorials</a></li><li><a href="Category:Tutorials" title="Category:Tutorials">Tutorials</a></li><li><a href="Category:Compilers" title="Category:Compilers">Compilers</a></li><li><a href="Category:Languages" title="Category:Languages">Languages</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Java_Primer" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="Java_Primer"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk" class="new"><span><a href="http://wiki.osdev.org/index.php?title=Talk:Java_Primer&amp;action=edit&amp;redlink=1"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="Java_Primer#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="Java_Primer" >Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=Java_Primer&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=Java_Primer&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="Java_Primer#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="http://wiki.osdev.org/index.php" id="searchform">
		<input type='hidden' name="title" value="Special:Search"/>
				<input type="search" name="search" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput" />		<input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" />		<input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" />			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="/Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="/Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="/OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="/OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="/OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="/Special:WhatLinksHere/Java_Primer" title="A lskins/common/images/osdev.png);" href="/Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/Java_Primer" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/Java_Primer" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=Java_Primer&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=Java_Primer&amp;oldid=19396" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 2 July 2016, at 15:17.</li>
											<li id="footer-info-viewcount">This page has been accessed 5,488 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.349 secs. -->
	</body>
</html>
