<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>ARM Integrator-CP PL110 Dirty - OSDev Wiki</title>
<meta charset="UTF-8" />
<meta name="generator" content="MediaWiki 1.18.0" />
<link rel="shortcut icon" href="favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "ARM_Integrator-CP_PL110_Dirty", "wgTitle": "ARM Integrator-CP PL110 Dirty", "wgCurRevisionId": 20512, "wgArticleId": 3150, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["ARM"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script>
<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #b1b100;}
.c.source-c .kw2 {color: #000000; font-weight: bold;}
.c.source-c .kw3 {color: #000066;}
.c.source-c .kw4 {color: #993333;}
.c.source-c .co1 {color: #666666; font-style: italic;}
.c.source-c .co2 {color: #339933;}
.c.source-c .coMULTI {color: #808080; font-style: italic;}
.c.source-c .es0 {color: #000099; font-weight: bold;}
.c.source-c .es1 {color: #000099; font-weight: bold;}
.c.source-c .es2 {color: #660099; font-weight: bold;}
.c.source-c .es3 {color: #660099; font-weight: bold;}
.c.source-c .es4 {color: #660099; font-weight: bold;}
.c.source-c .es5 {color: #006699; font-weight: bold;}
.c.source-c .br0 {color: #009900;}
.c.source-c .sy0 {color: #339933;}
.c.source-c .st0 {color: #ff0000;}
.c.source-c .nu0 {color: #0000dd;}
.c.source-c .nu6 {color: #208080;}
.c.source-c .nu8 {color: #208080;}
.c.source-c .nu12 {color: #208080;}
.c.source-c .nu16 {color:#800080;}
.c.source-c .nu17 {color:#800080;}
.c.source-c .nu18 {color:#800080;}
.c.source-c .nu19 {color:#800080;}
.c.source-c .me1 {color: #202020;}
.c.source-c .me2 {color: #202020;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-asm {line-height: normal;}
.source-asm li, .source-asm pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for asm
 * CSS class: source-asm, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.asm.source-asm .de1, .asm.source-asm .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.asm.source-asm  {font-family:monospace;}
.asm.source-asm .imp {font-weight: bold; color: red;}
.asm.source-asm li, .asm.source-asm .li1 {font-weight: normal; vertical-align:top;}
.asm.source-asm .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.asm.source-asm .li2 {font-weight: bold; vertical-align:top;}
.asm.source-asm .kw1 {color: #00007f; font-weight: bold;}
.asm.source-asm .kw2 {color: #0000ff; font-weight: bold;}
.asm.source-asm .kw3 {color: #00007f;}
.asm.source-asm .kw4 {color: #000000; font-weight: bold;}
.asm.source-asm .kw5 {color: #000000; font-weight: bold;}
.asm.source-asm .co1 {color: #666666; font-style: italic;}
.asm.source-asm .co2 {color: #adadad; font-style: italic;}
.asm.source-asm .es0 {color: #000099; font-weight: bold;}
.asm.source-asm .br0 {color: #009900; font-weight: bold;}
.asm.source-asm .sy0 {color: #339933;}
.asm.source-asm .st0 {color: #7f007f;}
.asm.source-asm .nu0 {color: #0000ff;}
.asm.source-asm .ln-xtra, .asm.source-asm li.ln-xtra, .asm.source-asm div.ln-xtra {background-color: #ffc;}
.asm.source-asm span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-ARM_Integrator-CP_PL110_Dirty action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">ARM Integrator-CP PL110 Dirty</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="ARM_Integrator-CP_PL110_Dirty#mw-head">navigation</a>,
					<a href="ARM_Integrator-CP_PL110_Dirty#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div lang="en" dir="ltr" class="mw-content-ltr"><table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="ARM_Integrator-CP_PL110_Dirty#Integrator-CP_QEMU_PL110_16-Bit_Color_Example"><span class="tocnumber">1</span> <span class="toctext">Integrator-CP QEMU PL110 16-Bit Color Example</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="ARM_Integrator-CP_PL110_Dirty#Prerequisites"><span class="tocnumber">2</span> <span class="toctext">Prerequisites</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="ARM_Integrator-CP_PL110_Dirty#Memory"><span class="tocnumber">3</span> <span class="toctext">Memory</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="ARM_Integrator-CP_PL110_Dirty#C_Code"><span class="tocnumber">4</span> <span class="toctext">C Code</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="ARM_Integrator-CP_PL110_Dirty#Assembly"><span class="tocnumber">5</span> <span class="toctext">Assembly</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="ARM_Integrator-CP_PL110_Dirty#More_Flexible_Compile.2FLink"><span class="tocnumber">6</span> <span class="toctext">More Flexible Compile/Link</span></a>
<ul>
<li class="toclevel-2 tocsection-7"><a href="ARM_Integrator-CP_PL110_Dirty#link.ld"><span class="tocnumber">6.1</span> <span class="toctext">link.ld</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="ARM_Integrator-CP_PL110_Dirty#script"><span class="tocnumber">6.2</span> <span class="toctext">script</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-9"><a href="ARM_Integrator-CP_PL110_Dirty#Explanation"><span class="tocnumber">7</span> <span class="toctext">Explanation</span></a></li>
</ul>
</td></tr></table>
<h3> <span class="mw-headline" id="Integrator-CP_QEMU_PL110_16-Bit_Color_Example"> Integrator-CP QEMU PL110 16-Bit Color Example </span></h3>
<p>This is quick and dirty really. I just want to get you on your feet with something that will make you enjoy doing this. Although, many people would consider going straight to working on the GUI not the correct way to do it is however very fun for many people. So here you go.
</p>
<h2> <span class="mw-headline" id="Prerequisites"> Prerequisites </span></h2>
<table class="wikitable">

<tr>
<th> Software
</th>
<th> Why
</th></tr>
<tr>
<td> QEMU </td>
<td> We are going to use it. We do not properly initialize the hardware. We almost do it correctly, but not quite enough for the real thing. Thats okay.
</td></tr>
<tr>
<td> C compiler or assembler </td>
<td> You need either a compiler or an assembler. I will show you code for doing it both ways. I will handwrite the assembly so it should be easier to read and work with.
</td></tr>
<tr>
<td> objcopy </td>
<td> You need something like objcopy on most Linux distributions. What we are going to have to do is copy out the .text section. Like I said this is just really quick and dirty example. We will make a flat binary.
</td></tr></table>
<h2> <span class="mw-headline" id="Memory"> Memory </span></h2>
<p>You will notice I am producing a flat binary output. This output contains no headers and the entry functions begins at the first byte of the image produced. The image is loaded by QEMU to the memory address 0x10000. QEMU supports loading an ELF format image and should
correctly place each image section at the specified address. When you write software for real embedded devices they are generally not going to support this as you will write the image directly to their ROM. A many devices have a secondary ROM area that actually provides support when placed in a special mode to allow you to flash your BOOT image which goes in the lower part of the ROM or somewhere different. This essentially consists of two ROMs in essence where the primary boot code allows you to easily flash the device over USB when a special button is held. If not it jumps to your BOOT code. If it can handle non flat binary formats then this special initial ROM code will support this functionality and you can find it in your boards documentation.
</p><p>But, for the most part you are going to be uploading a flat binary file.
</p>
<h2> <span class="mw-headline" id="C_Code"> C Code </span></h2>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">typedef</span> <span class="kw4">int</span><span class="br0">&#40;</span><span class="sy0">*</span>PFN<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
<span class="kw4">void</span> start<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&#160;
&#160;
<span class="kw4">void</span> __attribute__<span class="br0">&#40;</span><span class="br0">&#40;</span>naked<span class="br0">&#41;</span><span class="br0">&#41;</span> entry<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	__asm__<span class="br0">&#40;</span><span class="st0">&quot;mov	sp, #0x60 &lt;&lt; 8&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	__asm__<span class="br0">&#40;</span><span class="st0">&quot;bl	start&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="co2">#define PL110_CR_EN		0x001</span>
<span class="co2">#define PL110_CR_PWR		0x800</span>
<span class="co2">#define PL110_IOBASE		0xc0000000</span>
<span class="co2">#define PL110_PALBASE		(PL110_IOBASE + 0x200)</span>
&#160;
<span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span>		<span class="kw4">uint32</span><span class="sy0">;</span>
<span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">char</span>		<span class="kw4">uint8</span><span class="sy0">;</span>
<span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">short</span>		<span class="kw4">uint16</span><span class="sy0">;</span>
&#160;
<span class="kw4">typedef</span> <span class="kw4">struct</span> _PL110MMIO 
<span class="br0">&#123;</span>
	<span class="kw4">uint32</span>		<span class="kw4">volatile</span> tim0<span class="sy0">;</span>		<span class="co1">//0</span>
	<span class="kw4">uint32</span>		<span class="kw4">volatile</span> tim1<span class="sy0">;</span>		<span class="co1">//4</span>
	<span class="kw4">uint32</span>		<span class="kw4">volatile</span> tim2<span class="sy0">;</span>		<span class="co1">//8</span>
	<span class="kw4">uint32</span>		<span class="kw4">volatile</span> d<span class="sy0">;</span>		<span class="co1">//c</span>
	<span class="kw4">uint32</span>		<span class="kw4">volatile</span> upbase<span class="sy0">;</span>	<span class="co1">//10</span>
	<span class="kw4">uint32</span>		<span class="kw4">volatile</span> f<span class="sy0">;</span>		<span class="co1">//14</span>
	<span class="kw4">uint32</span>		<span class="kw4">volatile</span> g<span class="sy0">;</span>		<span class="co1">//18</span>
	<span class="kw4">uint32</span>		<span class="kw4">volatile</span> control<span class="sy0">;</span>	<span class="co1">//1c</span>
<span class="br0">&#125;</span> PL110MMIO<span class="sy0">;</span>
&#160;
<span class="kw4">void</span> start<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	PFN		fn<span class="sy0">;</span>
	PL110MMIO	<span class="sy0">*</span>plio<span class="sy0">;</span>
	<span class="kw4">int</span>		x<span class="sy0">;</span>
	<span class="kw4">uint16</span>		<span class="kw4">volatile</span> <span class="sy0">*</span>fb<span class="sy0">;</span>
&#160;
	plio <span class="sy0">=</span> <span class="br0">&#40;</span>PL110MMIO<span class="sy0">*</span><span class="br0">&#41;</span>PL110_IOBASE<span class="sy0">;</span>
&#160;
	<span class="coMULTI">/* 640x480 pixels */</span>
	plio<span class="sy0">-&gt;</span>tim0 <span class="sy0">=</span> <span class="nu12">0x3f1f3f9c</span><span class="sy0">;</span>
	plio<span class="sy0">-&gt;</span>tim1 <span class="sy0">=</span> <span class="nu12">0x080b61df</span><span class="sy0">;</span>
	plio<span class="sy0">-&gt;</span>upbase <span class="sy0">=</span> <span class="nu12">0x200000</span><span class="sy0">;</span>
	<span class="coMULTI">/* 16-bit color */</span>
	plio<span class="sy0">-&gt;</span>control <span class="sy0">=</span> <span class="nu12">0x1829</span><span class="sy0">;</span>
	fb <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">uint16</span><span class="sy0">*</span><span class="br0">&#41;</span><span class="nu12">0x200000</span><span class="sy0">;</span>
	<span class="kw1">for</span> <span class="br0">&#40;</span>x <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> x <span class="sy0">&lt;</span> <span class="br0">&#40;</span><span class="nu0">640</span> <span class="sy0">*</span> <span class="nu0">480</span><span class="br0">&#41;</span> <span class="sy0">-</span> <span class="nu0">10</span><span class="sy0">;</span> <span class="sy0">++</span>x<span class="br0">&#41;</span>
		fb<span class="br0">&#91;</span>x<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="nu12">0x1f</span> <span class="sy0">&lt;&lt;</span> <span class="br0">&#40;</span><span class="nu0">5</span> <span class="sy0">+</span> <span class="nu0">6</span><span class="br0">&#41;</span> <span class="sy0">|</span> <span class="nu12">0xf</span> <span class="sy0">&lt;&lt;</span> <span class="nu0">5</span><span class="sy0">;</span>
&#160;
	<span class="coMULTI">/* uncomment this and the function pointer should crash QEMU if you set it for 8MB of ram or less */</span>
	<span class="kw1">for</span><span class="br0">&#40;</span><span class="sy0">;;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	fn <span class="sy0">=</span> <span class="br0">&#40;</span>PFN<span class="br0">&#41;</span><span class="nu12">0x800f20</span><span class="sy0">;</span>
	fn<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="kw1">return</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>A naked function implementation so we can setup the stack, which then calls the actual C function start. Then we initialize the card and draw a light blue color across the screen.
</p><p>To compile it and produce the binary file to use with QEMU first copy the code above into
a file named <i>test.c</i>. Then execute the following. Your actual binaries will likely differ.
Make sure your using a cross-toolchain for ARM and not your host system unless your host
system is ARM.
</p>
<pre>
    ./gcc-arm test.c -nostdlib -o test.o
    ./objcopy-arm -j .text -O binary test.o test.bin
     qemu-system-arm -m 8 -kernel test.bin
</pre>
<p>If all goes well QEMU will display a light blue screen.
</p><p><br />
</p>
<h2> <span class="mw-headline" id="Assembly"> Assembly </span></h2>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="asm source-asm"><pre class="de1">main<span class="sy0">:</span>
	eor	r0<span class="sy0">,</span> r0<span class="sy0">,</span> r0
	<span class="kw1">mov</span>	r0<span class="sy0">,</span> #<span class="nu0">0xc0</span> &lt;&lt; <span class="nu0">24</span>
&#160;
	<span class="kw1">mov</span>	r1<span class="sy0">,</span> #<span class="nu0">0x3f</span> &lt;&lt; <span class="nu0">24</span>
	<span class="kw1">add</span>	r1<span class="sy0">,</span> r1<span class="sy0">,</span> #<span class="nu0">0x1f</span> &lt;&lt; <span class="nu0">16</span>
	<span class="kw1">add</span>	r1<span class="sy0">,</span> r1<span class="sy0">,</span> #<span class="nu0">0x3f</span> &lt;&lt; <span class="nu0">8</span>
	<span class="kw1">add</span>	r1<span class="sy0">,</span> r1<span class="sy0">,</span> #<span class="nu0">0x9c</span>
	<span class="kw1">str</span>	r1<span class="sy0">,</span> <span class="br0">&#91;</span>r0<span class="sy0">,</span> #<span class="nu0">0</span><span class="br0">&#93;</span>
&#160;
	<span class="kw1">mov</span>	r1<span class="sy0">,</span> #<span class="nu0">0x08</span> &lt;&lt; <span class="nu0">24</span>
	<span class="kw1">add</span>	r1<span class="sy0">,</span> r1<span class="sy0">,</span> #<span class="nu0">0x0b</span> &lt;&lt; <span class="nu0">16</span>
	<span class="kw1">add</span>	r1<span class="sy0">,</span> r1<span class="sy0">,</span> #<span class="nu0">0x61</span> &lt;&lt; <span class="nu0">8</span>
	<span class="kw1">add</span>	r1<span class="sy0">,</span> r1<span class="sy0">,</span> #<span class="nu0">0xdf</span>
	<span class="kw1">str</span>	r1<span class="sy0">,</span> <span class="br0">&#91;</span>r0<span class="sy0">,</span> #<span class="nu0">4</span><span class="br0">&#93;</span>
&#160;
	<span class="kw1">mov</span>	r1<span class="sy0">,</span> #<span class="nu0">0x20</span> &lt;&lt; <span class="nu0">16</span>
	<span class="kw1">str</span>	r1<span class="sy0">,</span> <span class="br0">&#91;</span>r0<span class="sy0">,</span> #<span class="nu0">0x10</span><span class="br0">&#93;</span>
&#160;
	<span class="kw1">mov</span>	r1<span class="sy0">,</span> #<span class="nu0">0x18</span> &lt;&lt; <span class="nu0">8</span>
	<span class="kw1">add</span>	r1<span class="sy0">,</span> r1<span class="sy0">,</span> #<span class="nu0">0x29</span>
	<span class="kw1">str</span>	r1<span class="sy0">,</span> <span class="br0">&#91;</span>r0<span class="sy0">,</span> #<span class="nu0">0x1c</span><span class="br0">&#93;</span>
&#160;
	<span class="kw1">mov</span>	r2<span class="sy0">,</span> #<span class="nu0">0x4b</span> &lt;&lt; <span class="nu0">12</span>
	<span class="kw1">mov</span>	r1<span class="sy0">,</span> #<span class="nu0">0x20</span> &lt;&lt; <span class="nu0">16</span>
	<span class="kw1">mov</span>	r3<span class="sy0">,</span> #<span class="nu0">0x1f</span>
clearscreen<span class="sy0">:</span>
	strh	r3<span class="sy0">,</span> <span class="br0">&#91;</span>r1<span class="br0">&#93;</span><span class="sy0">,</span> #<span class="nu0">2</span>
	subs	r2<span class="sy0">,</span> r2<span class="sy0">,</span> #<span class="nu0">1</span>
	bne	clearscreen
	#b	<span class="nu0">0x800000</span>
lockme<span class="sy0">:</span>
	b	lockme</pre></div></div>
<p>We initialize the card then we draw bright red to the screen.
</p><p>To assemble it and produce the binary file to use with QEMU first copy the code above into
a file named <i>test.asm</i>. Then execute the following. Your actual binaries will likely differ.
Make sure your using a cross-toolchain for ARM and not your host system unless your host
system is ARM.
</p>
<pre>
     ./as-arm test.asm -o test.o
     ./objcopy-arm -j .text -O binary test.o test.bin
     qemu-system-arm -m 8 -kernel test.bin
</pre>
<p>If all goes well QEMU will display a bright red screen.
</p>
<h2> <span class="mw-headline" id="More_Flexible_Compile.2FLink"> More Flexible Compile/Link </span></h2>
<p>The 0x10000 is the area in memory this image is going to start at.
</p>
<h3> <span class="mw-headline" id="link.ld"> link.ld </span></h3>
<pre>
ENTRY (entry)

SECTIONS
{
    . = 0x10000;
    .text&#160;: { *(.text*) *(.rodata*) *(.data*) *(.bss*) *(COMMON) }
     _EOI = .;
}
</pre>
<h3> <span class="mw-headline" id="script"> script </span></h3>
<p>You can notice now we are supporting the compile of multiple sources, and a seperate linking step which uses our linker
script (above). This build scheme supports properly referencing global variables in your code, but still produces a flat
binary file with no header or sections. It also directs any output written to the serial port to stdout.
</p>
<pre>
#!/bin/sh
arm-linux-gnueabi-gcc -Wall -Wextra -Werror -nostdlib -nostartfiles -ffreestanding -std=gnu99 -c *.c
arm-linux-gnueabi-ld -T link.ld -o _armos.bin *.o
arm-linux-gnueabi-objcopy -j .text -O binary _armos.bin armos.bin
qemu-system-arm -m 8 -kernel armos.bin -serial stdio
</pre>
<p>See <a href="ARM_Integrator-CP_Bare_Bones" title="ARM Integrator-CP Bare Bones">ARM_Integrator-CP_Bare_Bones</a> for writing to the serial port.
</p>
<h2> <span class="mw-headline" id="Explanation"> Explanation </span></h2>
<p>Essentially, what we did was set just enough to make it work with <i>QEMU PC emulator version 0.12.5 (Debian 0.12.5+dfsg-3squeeze1), Copyright (c) 2003-2008 Fabrice Bellard</i>. If it does not work and you have a different version of QEMU then that could be the problem, but then again make sure you used the correct toolchain.
</p><p>Now, the real hardware. Well its going to want you to set more values then just that. Also, the pixels are 16-bit in the memory buffer at 0x200000 and they are in 565 format BGR. So blue bits occupy the most significant bits and there is 5 of them. B:5 G:6 R:5 - green has 6 bits. This is a common format and used with DXT1 compression format most graphics cards support.
</p><p>After we initialize the card we just set the same value in a loop. Now, you will notice that in both the C and the assembly code that I have a loop and a commented out branch instruction or in the C code I have a function pointer which will crash the emulator. Its not going to hard crash it, but it will make the emulator stop and display the registers. This is highly useful as a debugging aid. Since you place it somewhere in your program and it will tell you what all the registers contain so you can debug difficult pieces of code. It can also tell you if the code has deadlocked. How else do you know if the code has completed properly or has deadlocked? You do not know unless you make it do something to tell you. 
</p><p>Since you have the ability to plot colored pixels on the screen you have another way to debug your operating system that you are going to build a interesting GUI on top on while completely forgetting about the real interesting stuff like processes, threads, timers, priority, disk I/O, devices, memory management, heaps...
</p><p><i>But, having fun is important too it just requires forgetting about all that! So have fun because thats why I made this page.</i>
</p>
<!-- 
NewPP limit report
Preprocessor node count: 100/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3150-0!*!0!!en!*!* and timestamp 20180121080106 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=ARM_Integrator-CP_PL110_Dirty&amp;oldid=20512">http://wiki.osdev.org/index.php?title=ARM_Integrator-CP_PL110_Dirty&amp;oldid=20512</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="http://wiki.osdev.org/Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="Category:ARM" title="Category:ARM">ARM</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=ARM_Integrator-CP_PL110_Dirty" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="ARM_Integrator-CP_PL110_Dirty"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk" class="new"><span><a href="http://wiki.osdev.org/index.php?title=Talk:ARM_Integrator-CP_PL110_Dirty&amp;action=edit&amp;redlink=1"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="ARM_Integrator-CP_PL110_Dirty#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="ARM_Integrator-CP_PL110_Dirty" >Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=ARM_Integrator-CP_PL110_Dirty&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=ARM_Integrator-CP_PL110_Dirty&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="ARM_Integrator-CP_PL110_Dirty#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="http://wiki.osdev.org/index.php" id="searchform">
		<input type='hidden' name="title" value="Special:Search"/>
				<input type="search" name="search" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput" />		<input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" />		<input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" />			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="/Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="/Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="/OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="/OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="/OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="/Special:WhatLinksHere/ARM_Integrator-CP_PL110_Dirty" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="/Special:RecentChangesLinked/ARM_Integrator-CP_PL110_Dirty" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="/index.php?title=ARM_Integrator-CP_PL110_Dirty&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="/index.php?title=ARM_Integrator-CP_PL110_Dirty&amp;oldid=20512" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 20 February 2017, at 07:05.</li>
											<li id="footer-info-viewcount">This page has been accessed 8,525 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="/OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="/OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="/OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWikiskins/common/images/osdev.png);" href="/Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/ARM_Integrator-CP_PL110_Dirty" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/ARM_Integrator-CP_PL110_Dirty" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=ARM_Integrator-CP_PL110_Dirty&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=ARM_Integrator-CP_PL110_Dirty&amp;oldid=20512" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 20 February 2017, at 07:05.</li>
											<li id="footer-info-viewcount">This page has been accessed 8,525 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.094 secs. -->
	</body>
</html>
