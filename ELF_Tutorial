<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>ELF Tutorial - OSDev Wiki</title>
<meta charset="UTF-8" />
<meta name="generator" content="MediaWiki 1.18.0" />
<link rel="shortcut icon" href="favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "ELF_Tutorial", "wgTitle": "ELF Tutorial", "wgCurRevisionId": 21476, "wgArticleId": 3429, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["In Progress", "Level 2 Tutorials"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script>
<style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.cpp.source-cpp .de1, .cpp.source-cpp .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.cpp.source-cpp  {font-family:monospace;}
.cpp.source-cpp .imp {font-weight: bold; color: red;}
.cpp.source-cpp li, .cpp.source-cpp .li1 {font-weight: normal; vertical-align:top;}
.cpp.source-cpp .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.cpp.source-cpp .li2 {font-weight: bold; vertical-align:top;}
.cpp.source-cpp .kw1 {color: #0000ff;}
.cpp.source-cpp .kw2 {color: #0000ff;}
.cpp.source-cpp .kw3 {color: #0000dd;}
.cpp.source-cpp .kw4 {color: #0000ff;}
.cpp.source-cpp .co1 {color: #666666;}
.cpp.source-cpp .co2 {color: #339900;}
.cpp.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.cpp.source-cpp .es0 {color: #000099; font-weight: bold;}
.cpp.source-cpp .es1 {color: #000099; font-weight: bold;}
.cpp.source-cpp .es2 {color: #660099; font-weight: bold;}
.cpp.source-cpp .es3 {color: #660099; font-weight: bold;}
.cpp.source-cpp .es4 {color: #660099; font-weight: bold;}
.cpp.source-cpp .es5 {color: #006699; font-weight: bold;}
.cpp.source-cpp .br0 {color: #008000;}
.cpp.source-cpp .sy0 {color: #008000;}
.cpp.source-cpp .sy1 {color: #000080;}
.cpp.source-cpp .sy2 {color: #000040;}
.cpp.source-cpp .sy3 {color: #000040;}
.cpp.source-cpp .sy4 {color: #008080;}
.cpp.source-cpp .st0 {color: #FF0000;}
.cpp.source-cpp .nu0 {color: #0000dd;}
.cpp.source-cpp .nu6 {color: #208080;}
.cpp.source-cpp .nu8 {color: #208080;}
.cpp.source-cpp .nu12 {color: #208080;}
.cpp.source-cpp .nu16 {color:#800080;}
.cpp.source-cpp .nu17 {color:#800080;}
.cpp.source-cpp .nu18 {color:#800080;}
.cpp.source-cpp .nu19 {color:#800080;}
.cpp.source-cpp .me1 {color: #007788;}
.cpp.source-cpp .me2 {color: #007788;}
.cpp.source-cpp .ln-xtra, .cpp.source-cpp li.ln-xtra, .cpp.source-cpp div.ln-xtra {background-color: #ffc;}
.cpp.source-cpp span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-ELF_Tutorial action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">ELF Tutorial</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="ELF_Tutorial#mw-head">navigation</a>,
					<a href="ELF_Tutorial#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div lang="en" dir="ltr" class="mw-content-ltr"><center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tr>
<td>
<p><a href="File:Under_Construction.png" class="image" title="This page is under construction!"><img alt="This page is under construction!" src="images/1/14/Under_Construction.png" width="50" height="50" /></a>
This page is a work in progress and may thus be incomplete. Its content may be changed in the near future.
</p>
</td>
<td>
</td></tr></table>
</center><table style="font-size:95%; line-height:1.5em; padding:0.25em; float:right; margin: 0 0 8px 15px; clear:right; border:1px solid #aaaaaa; background:#eee; text-align:center;;"><tr><th>Difficulty level</th></tr><tr><td><a href="File:Difficulty_2.png" class="image"><img alt="Difficulty 2.png" src="images/a/a1/Difficulty_2.png" width="46" height="14" /></a><br />Medium</td></tr></table><table style="font-size:95%; line-height:1.5em; padding:0.25em; float:right; margin: 0 0 8px 15px; clear: right; border:1px solid #aaaaaa; background:#eee; text-align:center; width:200px;&#160;;"><tr><th style="background:#ffce7b; padding:0.3em; font-size:1.1em;"><a href="Executable_Formats" title="Executable Formats">Executable Formats</a></th></tr><tr><th>Microsoft</th></tr><tr><td><div>
<p><b>16 bit:</b><br />
<a href="COM" title="COM">COM</a><br />
<a href="MZ" title="MZ">MZ</a><br />
<a href="NE" title="NE">NE</a><br />
<b>32/64 bit:</b><br />
<a href="PE" title="PE">PE</a><br />
<b>Mixed (16/32 bit):</b><br />
<a href="LE" title="LE">LE</a><br />
</p>
</div></td></tr><tr><th>*nix</th></tr><tr><td><div>
<p><a href="A.out" title="A.out">A.out</a><br />
<a href="ELF" title="ELF">ELF</a><br />
</p>
</div></td></tr></table>
<p>This tutorial describes the steps to loading ELF files targeting the i386 (32-bit architecture, little-endian byte order). All code in the tutorial is in the form of C compatible C++ and strives to teach by example, by using simplified (and sometimes naive), neat, and functional snippets of code. It may later be expanded to cover other types of ELF files, or formats targeting other architectures or machine types.
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="ELF_Tutorial#ELF_Data_Types"><span class="tocnumber">1</span> <span class="toctext">ELF Data Types</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="ELF_Tutorial#The_ELF_Header"><span class="tocnumber">2</span> <span class="toctext">The ELF Header</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="ELF_Tutorial#Checking_the_ELF_Header"><span class="tocnumber">2.1</span> <span class="toctext">Checking the ELF Header</span></a>
<ul>
<li class="toclevel-3 tocsection-4"><a href="ELF_Tutorial#Loading_the_ELF_File"><span class="tocnumber">2.1.1</span> <span class="toctext">Loading the ELF File</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="ELF_Tutorial#The_ELF_Section_Header"><span class="tocnumber">3</span> <span class="toctext">The ELF Section Header</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="ELF_Tutorial#Accessing_Section_Headers"><span class="tocnumber">3.1</span> <span class="toctext">Accessing Section Headers</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="ELF_Tutorial#Section_Names"><span class="tocnumber">3.2</span> <span class="toctext">Section Names</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-8"><a href="ELF_Tutorial#ELF_Sections"><span class="tocnumber">4</span> <span class="toctext">ELF Sections</span></a>
<ul>
<li class="toclevel-2 tocsection-9"><a href="ELF_Tutorial#The_Symbol_Table"><span class="tocnumber">4.1</span> <span class="toctext">The Symbol Table</span></a>
<ul>
<li class="toclevel-3 tocsection-10"><a href="ELF_Tutorial#Accessing_the_Value_of_a_Symbol"><span class="tocnumber">4.1.1</span> <span class="toctext">Accessing the Value of a Symbol</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-11"><a href="ELF_Tutorial#The_String_Table"><span class="tocnumber">4.2</span> <span class="toctext">The String Table</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="ELF_Tutorial#The_BSS_and_SHT_NOBITS"><span class="tocnumber">4.3</span> <span class="toctext">The BSS and SHT_NOBITS</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="ELF_Tutorial#Relocation_Sections"><span class="tocnumber">4.4</span> <span class="toctext">Relocation Sections</span></a>
<ul>
<li class="toclevel-3 tocsection-14"><a href="ELF_Tutorial#Relocation_Example"><span class="tocnumber">4.4.1</span> <span class="toctext">Relocation Example</span></a></li>
<li class="toclevel-3 tocsection-15"><a href="ELF_Tutorial#Relocating_a_Symbol"><span class="tocnumber">4.4.2</span> <span class="toctext">Relocating a Symbol</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-16"><a href="ELF_Tutorial#The_ELF_Program_Header"><span class="tocnumber">5</span> <span class="toctext">The ELF Program Header</span></a></li>
<li class="toclevel-1 tocsection-17"><a href="ELF_Tutorial#See_Also"><span class="tocnumber">6</span> <span class="toctext">See Also</span></a>
<ul>
<li class="toclevel-2 tocsection-18"><a href="ELF_Tutorial#Articles"><span class="tocnumber">6.1</span> <span class="toctext">Articles</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="ELF_Tutorial#External_Links"><span class="tocnumber">6.2</span> <span class="toctext">External Links</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h2> <span class="mw-headline" id="ELF_Data_Types">ELF Data Types</span></h2>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1"><span class="co2"># include &lt;stdint.h&gt;</span>
&#160;
<span class="kw4">typedef</span> <span class="kw4">uint16_t</span> Elf32_Half<span class="sy4">;</span>	<span class="co1">// Unsigned half int</span>
<span class="kw4">typedef</span> <span class="kw4">uint32_t</span> Elf32_Off<span class="sy4">;</span>	<span class="co1">// Unsigned offset</span>
<span class="kw4">typedef</span> <span class="kw4">uint32_t</span> Elf32_Addr<span class="sy4">;</span>	<span class="co1">// Unsigned address</span>
<span class="kw4">typedef</span> <span class="kw4">uint32_t</span> Elf32_Word<span class="sy4">;</span>	<span class="co1">// Unsigned int</span>
<span class="kw4">typedef</span> <span class="kw4">int32_t</span>  Elf32_Sword<span class="sy4">;</span>	<span class="co1">// Signed int</span></pre></div></div>
<p>The ELF file format is made to function on a number of different architectures, many of which support different data widths. For support across multiple machine types, the ELF format provides a set of guidelines for fixed width types that make up the layout of the section and data represented within object files. You may choose to name your types differently or use types defined in stdint.h directly, but they should conform to those shown above.
</p>
<h2> <span class="mw-headline" id="The_ELF_Header">The ELF Header</span></h2>
<p>The ELF file format has only one header with fixed placement: the ELF header, present at the beginning of every file. The format itself is extremely flexible as the positioning, size, and purpose of every header (save the ELF header) is described by another header in the file.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1"><span class="co2"># define ELF_NIDENT	16</span>
&#160;
<span class="kw4">typedef</span> <span class="kw4">struct</span> <span class="br0">&#123;</span>
	<span class="kw4">uint8_t</span>		e_ident<span class="br0">&#91;</span>ELF_NIDENT<span class="br0">&#93;</span><span class="sy4">;</span>
	Elf32_Half	e_type<span class="sy4">;</span>
	Elf32_Half	e_machine<span class="sy4">;</span>
	Elf32_Word	e_version<span class="sy4">;</span>
	Elf32_Addr	e_entry<span class="sy4">;</span>
	Elf32_Off	e_phoff<span class="sy4">;</span>
	Elf32_Off	e_shoff<span class="sy4">;</span>
	Elf32_Word	e_flags<span class="sy4">;</span>
	Elf32_Half	e_ehsize<span class="sy4">;</span>
	Elf32_Half	e_phentsize<span class="sy4">;</span>
	Elf32_Half	e_phnum<span class="sy4">;</span>
	Elf32_Half	e_shentsize<span class="sy4">;</span>
	Elf32_Half	e_shnum<span class="sy4">;</span>
	Elf32_Half	e_shstrndx<span class="sy4">;</span>
<span class="br0">&#125;</span> Elf32_Ehdr<span class="sy4">;</span></pre></div></div>
<p>The ELF header is the first header in an ELF file and it provides important information about the file (such as the machine type, architecture and byte order, etc.) as well as a means of identifying and checking whether the file is valid. The ELF header also provides information about other sections in the file, since the can be appear in any order, vary in size, or may be absent from the file altogether. Universal to all ELF files are the first 4 bytes (the magic number) which are used identify the file. When working with the file through the <b>Elf32_Ehdr</b> type defined above, these 4 bytes are accessible from indexes 0 - 3 of the field <b>e_ident</b>.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1"><span class="kw2">enum</span> Elf_Ident <span class="br0">&#123;</span>
	EI_MAG0		<span class="sy1">=</span> <span class="nu0">0</span>, <span class="co1">// 0x7F</span>
	EI_MAG1		<span class="sy1">=</span> <span class="nu0">1</span>, <span class="co1">// 'E'</span>
	EI_MAG2		<span class="sy1">=</span> <span class="nu0">2</span>, <span class="co1">// 'L'</span>
	EI_MAG3		<span class="sy1">=</span> <span class="nu0">3</span>, <span class="co1">// 'F'</span>
	EI_CLASS	<span class="sy1">=</span> <span class="nu0">4</span>, <span class="co1">// Architecture (32/64)</span>
	EI_DATA		<span class="sy1">=</span> <span class="nu0">5</span>, <span class="co1">// Byte Order</span>
	EI_VERSION	<span class="sy1">=</span> <span class="nu0">6</span>, <span class="co1">// ELF Version</span>
	EI_OSABI	<span class="sy1">=</span> <span class="nu0">7</span>, <span class="co1">// OS Specific</span>
	EI_ABIVERSION	<span class="sy1">=</span> <span class="nu0">8</span>, <span class="co1">// OS Specific</span>
	EI_PAD		<span class="sy1">=</span> <span class="nu0">9</span>  <span class="co1">// Padding</span>
<span class="br0">&#125;</span><span class="sy4">;</span>
&#160;
<span class="co2"># define ELFMAG0	0x7F // e_ident[EI_MAG0]</span>
<span class="co2"># define ELFMAG1	'E'  // e_ident[EI_MAG1]</span>
<span class="co2"># define ELFMAG2	'L'  // e_ident[EI_MAG2]</span>
<span class="co2"># define ELFMAG3	'F'  // e_ident[EI_MAG3]</span>
&#160;
<span class="co2"># define ELFDATA2LSB	(1)  // Little Endian</span>
<span class="co2"># define ELFCLASS32	(1)  // 32-bit Architecture</span></pre></div></div>
<p>The first field in the header consists of 16 bytes, many of which provide important information about the ELF file such as the intended architecture, byte order, and ABI information. Since this tutorial focuses on implementing a x86 compatible loader, only relevant value definitions have been included.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1"><span class="kw2">enum</span> Elf_Type <span class="br0">&#123;</span>
	ET_NONE		<span class="sy1">=</span> <span class="nu0">0</span>, <span class="co1">// Unkown Type</span>
	ET_REL		<span class="sy1">=</span> <span class="nu0">1</span>, <span class="co1">// Relocatable File</span>
	ET_EXEC		<span class="sy1">=</span> <span class="nu0">2</span>  <span class="co1">// Executable File</span>
<span class="br0">&#125;</span><span class="sy4">;</span>
&#160;
<span class="co2"># define EM_386		(3)  // x86 Machine Type</span>
<span class="co2"># define EV_CURRENT	(1)  // ELF Current Version</span></pre></div></div>
<p>The file header also provides information about the machine type and file type. Once again, only the relevant definitions have been included above.
</p>
<h3> <span class="mw-headline" id="Checking_the_ELF_Header">Checking the ELF Header</span></h3>
<p>Before an ELF file can be loaded, linked, relocated or otherwise processed, it's important to ensure that the machine trying to perform the aforementioned is able to do. This entails that the file is a valid ELF file targeting the local machine's architecture, byte order and CPU type, and that any operating system specific semantics are satisfied.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">bool</span> elf_check_file<span class="br0">&#40;</span>Elf32_Ehdr <span class="sy2">*</span>hdr<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span><span class="sy3">!</span>hdr<span class="br0">&#41;</span> <span class="kw1">return</span> <span class="kw2">false</span><span class="sy4">;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span>hdr<span class="sy2">-</span><span class="sy1">&gt;</span>e_ident<span class="br0">&#91;</span>EI_MAG0<span class="br0">&#93;</span> <span class="sy3">!</span><span class="sy1">=</span> ELFMAG0<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		ERROR<span class="br0">&#40;</span><span class="st0">&quot;ELF Header EI_MAG0 incorrect.<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw1">return</span> <span class="kw2">false</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span>hdr<span class="sy2">-</span><span class="sy1">&gt;</span>e_ident<span class="br0">&#91;</span>EI_MAG1<span class="br0">&#93;</span> <span class="sy3">!</span><span class="sy1">=</span> ELFMAG1<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		ERROR<span class="br0">&#40;</span><span class="st0">&quot;ELF Header EI_MAG1 incorrect.<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw1">return</span> <span class="kw2">false</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span>hdr<span class="sy2">-</span><span class="sy1">&gt;</span>e_ident<span class="br0">&#91;</span>EI_MAG2<span class="br0">&#93;</span> <span class="sy3">!</span><span class="sy1">=</span> ELFMAG2<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		ERROR<span class="br0">&#40;</span><span class="st0">&quot;ELF Header EI_MAG2 incorrect.<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw1">return</span> <span class="kw2">false</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span>hdr<span class="sy2">-</span><span class="sy1">&gt;</span>e_ident<span class="br0">&#91;</span>EI_MAG3<span class="br0">&#93;</span> <span class="sy3">!</span><span class="sy1">=</span> ELFMAG3<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		ERROR<span class="br0">&#40;</span><span class="st0">&quot;ELF Header EI_MAG3 incorrect.<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw1">return</span> <span class="kw2">false</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">return</span> <span class="kw2">true</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>Assuming that an ELF file has already been loaded into memory (either by the bootloader or otherwise), the first step to loading an ELF file is checking the ELF header for the magic number that should be present at the begining of the file. A minimal implementation of this could simply treat the image of file in memory as a string and do a comparison against a predefined string. In the example above, the comparision is done byte by byte through the ELF header type, and provides detailed feedback when the method encounters an error.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">bool</span> elf_check_supported<span class="br0">&#40;</span>Elf32_Ehdr <span class="sy2">*</span>hdr<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span><span class="sy3">!</span>elf_check_file<span class="br0">&#40;</span>hdr<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		ERROR<span class="br0">&#40;</span><span class="st0">&quot;Invalid ELF File.<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw1">return</span> <span class="kw2">false</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span>hdr<span class="sy2">-</span><span class="sy1">&gt;</span>e_ident<span class="br0">&#91;</span>EI_CLASS<span class="br0">&#93;</span> <span class="sy3">!</span><span class="sy1">=</span> ELFCLASS32<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		ERROR<span class="br0">&#40;</span><span class="st0">&quot;Unsupported ELF File Class.<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw1">return</span> <span class="kw2">false</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span>hdr<span class="sy2">-</span><span class="sy1">&gt;</span>e_ident<span class="br0">&#91;</span>EI_DATA<span class="br0">&#93;</span> <span class="sy3">!</span><span class="sy1">=</span> ELFDATA2LSB<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		ERROR<span class="br0">&#40;</span><span class="st0">&quot;Unsupported ELF File byte order.<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw1">return</span> <span class="kw2">false</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span>hdr<span class="sy2">-</span><span class="sy1">&gt;</span>e_machine <span class="sy3">!</span><span class="sy1">=</span> EM_386<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		ERROR<span class="br0">&#40;</span><span class="st0">&quot;Unsupported ELF File target.<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw1">return</span> <span class="kw2">false</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span>hdr<span class="sy2">-</span><span class="sy1">&gt;</span>e_ident<span class="br0">&#91;</span>EI_VERSION<span class="br0">&#93;</span> <span class="sy3">!</span><span class="sy1">=</span> EV_CURRENT<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		ERROR<span class="br0">&#40;</span><span class="st0">&quot;Unsupported ELF File version.<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw1">return</span> <span class="kw2">false</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span>hdr<span class="sy2">-</span><span class="sy1">&gt;</span>e_type <span class="sy3">!</span><span class="sy1">=</span> ET_REL <span class="sy3">&amp;&amp;</span> hdr<span class="sy2">-</span><span class="sy1">&gt;</span>e_type <span class="sy3">!</span><span class="sy1">=</span> ET_EXEC<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		ERROR<span class="br0">&#40;</span><span class="st0">&quot;Unsupported ELF File type.<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw1">return</span> <span class="kw2">false</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">return</span> <span class="kw2">true</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>The next step to loading an ELF object is to check that the file in question is intended to run on the machine that has loaded it. Again, the ELF header provides the necessary information about the file's intended target. The code above assumes that you have implemented a function called <b>elf_check_file</b>() (or used the one provided above), and that the local machine is i386, little-endian and 32-bit. It also only allows for executable and relocatable files to be loaded, although this can be changed as necessary.
</p>
<h4> <span class="mw-headline" id="Loading_the_ELF_File">Loading the ELF File</span></h4>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">static</span> <span class="kw2">inline</span> <span class="kw4">void</span> <span class="sy2">*</span>elf_load_rel<span class="br0">&#40;</span>Elf32_Ehdr <span class="sy2">*</span>hdr<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">int</span> result<span class="sy4">;</span>
	result <span class="sy1">=</span> elf_load_stage1<span class="br0">&#40;</span>hdr<span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span>result <span class="sy1">==</span> ELF_RELOC_ERR<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		ERROR<span class="br0">&#40;</span><span class="st0">&quot;Unable to load ELF file.<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw1">return</span> <span class="kw2">NULL</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	result <span class="sy1">=</span> elf_load_stage2<span class="br0">&#40;</span>hdr<span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span>result <span class="sy1">==</span> ELF_RELOC_ERR<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		ERROR<span class="br0">&#40;</span><span class="st0">&quot;Unable to load ELF file.<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw1">return</span> <span class="kw2">NULL</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="co1">// TODO&#160;: Parse the program header (if present)</span>
	<span class="kw1">return</span> <span class="br0">&#40;</span><span class="kw4">void</span> <span class="sy2">*</span><span class="br0">&#41;</span>hdr<span class="sy2">-</span><span class="sy1">&gt;</span>e_entry<span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">void</span> <span class="sy2">*</span>elf_load_file<span class="br0">&#40;</span><span class="kw4">void</span> <span class="sy2">*</span>file<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	Elf32_Ehdr <span class="sy2">*</span>hdr <span class="sy1">=</span> <span class="br0">&#40;</span>Elf32_Ehdr <span class="sy2">*</span><span class="br0">&#41;</span>file<span class="sy4">;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span><span class="sy3">!</span>elf_check_supported<span class="br0">&#40;</span>hdr<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		ERROR<span class="br0">&#40;</span><span class="st0">&quot;ELF File cannot be loaded.<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw1">return</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">switch</span><span class="br0">&#40;</span>hdr<span class="sy2">-</span><span class="sy1">&gt;</span>e_type<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="kw1">case</span> ET_EXEC<span class="sy4">:</span>
			<span class="co1">// TODO&#160;: Implement</span>
			<span class="kw1">return</span> <span class="kw2">NULL</span><span class="sy4">;</span>
		<span class="kw1">case</span> ET_REL<span class="sy4">:</span>
			<span class="kw1">return</span> elf_load_rel<span class="br0">&#40;</span>hdr<span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">return</span> <span class="kw2">NULL</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<h2> <span class="mw-headline" id="The_ELF_Section_Header">The ELF Section Header</span></h2>
<p>The ELF format defines a lot of different types of section and their relevant headers, not all of which are present in every file, and there's no guarantee on which order they are appear in. Thus, in order to parse and process these sections the format also defines section headers, which contains information such as section names, sizes, locations and other relevant information. The list of all the section headers in an ELF image is referred to as the section header table.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> <span class="br0">&#123;</span>
	Elf32_Word	sh_name<span class="sy4">;</span>
	Elf32_Word	sh_type<span class="sy4">;</span>
	Elf32_Word	sh_flags<span class="sy4">;</span>
	Elf32_Addr	sh_addr<span class="sy4">;</span>
	Elf32_Off	sh_offset<span class="sy4">;</span>
	Elf32_Word	sh_size<span class="sy4">;</span>
	Elf32_Word	sh_link<span class="sy4">;</span>
	Elf32_Word	sh_info<span class="sy4">;</span>
	Elf32_Word	sh_addralign<span class="sy4">;</span>
	Elf32_Word	sh_entsize<span class="sy4">;</span>
<span class="br0">&#125;</span> Elf32_Shdr<span class="sy4">;</span></pre></div></div>
<p>The section header table contains a number of important fields, some of which have different meanings for different sections. Another point of interest is that the <b>sh_name</b> field does not point directly to a string, instead it gives the offset of a string in the section name string table (the index of the table itself is defined in the ELF header by the field <b>e_shstrndx</b>). Each header also defines the position of the actual section in the file image in the field <b>sh_offset</b>, as an offset from the beginning of the file.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1"><span class="co2"># define SHN_UNDEF	(0x00) // Undefined/Not present</span>
&#160;
<span class="kw2">enum</span> ShT_Types <span class="br0">&#123;</span>
	SHT_NULL	<span class="sy1">=</span> <span class="nu0">0</span>,   <span class="co1">// Null section</span>
	SHT_PROGBITS	<span class="sy1">=</span> <span class="nu0">1</span>,   <span class="co1">// Program information</span>
	SHT_SYMTAB	<span class="sy1">=</span> <span class="nu0">2</span>,   <span class="co1">// Symbol table</span>
	SHT_STRTAB	<span class="sy1">=</span> <span class="nu0">3</span>,   <span class="co1">// String table</span>
	SHT_RELA	<span class="sy1">=</span> <span class="nu0">4</span>,   <span class="co1">// Relocation (w/ addend)</span>
	SHT_NOBITS	<span class="sy1">=</span> <span class="nu0">8</span>,   <span class="co1">// Not present in file</span>
	SHT_REL		<span class="sy1">=</span> <span class="nu0">9</span>,   <span class="co1">// Relocation (no addend)</span>
<span class="br0">&#125;</span><span class="sy4">;</span>
&#160;
<span class="kw2">enum</span> ShT_Attributes <span class="br0">&#123;</span>
	SHF_WRITE	<span class="sy1">=</span> <span class="nu12">0x01</span>, <span class="co1">// Writable section</span>
	SHF_ALLOC	<span class="sy1">=</span> <span class="nu12">0x02</span>  <span class="co1">// Exists in memory</span>
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<p>Above are a number of constants that are relevant to the tutorial (a good deal more exist). The enumeration <b>ShT_Types</b> defines a number of different types of sections, which correspond to values stored in the field <b>sh_type</b> in the section header. Similarly, <b>ShT_Attributes</b> corresponds to the field <b>sh_flags</b>, but are bit flags rather than stand-alone values.
</p>
<h3> <span class="mw-headline" id="Accessing_Section_Headers">Accessing Section Headers</span></h3>
<p>Getting access to the section header itself isn't very difficult: It's position in the file image is defined by <b>e_shoff</b> in the ELF header and the number of section headers is in turn defined by <b>e_shnum</b>. Notably, the first entry in the section header is a NULL entry; that is to say, fields in the header are 0. The section headers are continuous, so given a pointer to the first entry, subsequent entries can accessed with simple pointer arithmetic or array operations.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">static</span> <span class="kw2">inline</span> Elf32_Shdr <span class="sy2">*</span>elf_sheader<span class="br0">&#40;</span>Elf32_Ehdr <span class="sy2">*</span>hdr<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw1">return</span> <span class="br0">&#40;</span>Elf32_Shdr <span class="sy2">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>hdr <span class="sy2">+</span> hdr<span class="sy2">-</span><span class="sy1">&gt;</span>e_shoff<span class="br0">&#41;</span><span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">static</span> <span class="kw2">inline</span> Elf32_Shdr <span class="sy2">*</span>elf_section<span class="br0">&#40;</span>Elf32_Ehdr <span class="sy2">*</span>hdr, <span class="kw4">int</span> idx<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw1">return</span> <span class="sy3">&amp;</span>elf_sheader<span class="br0">&#40;</span>hdr<span class="br0">&#41;</span><span class="br0">&#91;</span>idx<span class="br0">&#93;</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>The two methods above provide convinient access to section headers on a by-index basis using the principals noted above, and they will be used frequently in the example code that follows.
</p>
<h3> <span class="mw-headline" id="Section_Names">Section Names</span></h3>
<p>One notable procedure is accessing section names (since, as mentioned before, they header only provides an offset into the section name string table), which is also fairly simple. The whole operation can be broken down into a simple series of steps:
</p>
<ol><li> Get the section header index for the string table from the ELF header (stored in <b>e_shstrndx</b>). Make sure to check the index against <b>SHN_UNDEF</b>, as the table may not be present.
</li><li> Access the section header at the given index and find the table offset (stored in <b>sh_offset</b>).
</li><li> Calculate the position of the string table in memory using the offset.
</li><li> Create a pointer to the name's offset into the string table.
</li></ol>
<p>An example of the process is shown in the two convinience methods below.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">static</span> <span class="kw2">inline</span> <span class="kw4">char</span> <span class="sy2">*</span>elf_str_table<span class="br0">&#40;</span>Elf32_Ehdr <span class="sy2">*</span>hdr<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span>hdr<span class="sy2">-</span><span class="sy1">&gt;</span>e_shstrndx <span class="sy1">==</span> SHN_UNDEF<span class="br0">&#41;</span> <span class="kw1">return</span> <span class="kw2">NULL</span><span class="sy4">;</span>
	<span class="kw1">return</span> <span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy2">*</span><span class="br0">&#41;</span>hdr <span class="sy2">+</span> elf_section<span class="br0">&#40;</span>hdr, hdr<span class="sy2">-</span><span class="sy1">&gt;</span>e_shstrndx<span class="br0">&#41;</span><span class="sy2">-</span><span class="sy1">&gt;</span>sh_offset<span class="sy4">;</span>
<span class="br0">&#125;</span>
&#160;
<span class="kw4">static</span> <span class="kw2">inline</span> <span class="kw4">char</span> <span class="sy2">*</span>elf_lookup_string<span class="br0">&#40;</span>Elf32_Ehdr <span class="sy2">*</span>hdr, <span class="kw4">int</span> offset<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">char</span> <span class="sy2">*</span>strtab <span class="sy1">=</span> elf_str_table<span class="br0">&#40;</span>hdr<span class="br0">&#41;</span><span class="sy4">;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span>strtab <span class="sy1">==</span> <span class="kw2">NULL</span><span class="br0">&#41;</span> <span class="kw1">return</span> <span class="kw2">NULL</span><span class="sy4">;</span>
	<span class="kw1">return</span> strtab <span class="sy2">+</span> offset<span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>Note that before you attempt to access the name of a section, you should first check that the section has a name (The offset given by sh_name is not equal to <b>SHN_UNDEF</b>).
</p>
<h2> <span class="mw-headline" id="ELF_Sections">ELF Sections</span></h2>
<p>ELF object files can have a very large number of sections, however, it is important to note that only some sections need to be processed during program loading, and not all of them may exist within the object file itself (i.e. the BSS). This segment will describe a number of sections that should be processed during program loading (given they are present).
</p>
<h3> <span class="mw-headline" id="The_Symbol_Table">The Symbol Table</span></h3>
<p>The symbol table is a section (or a number of sections) that exist within the ELF file and define the location, type, visibility and other traits of various symbols declared in the original source, created during compilation or linking, or otherwise present in the file. Since an ELF object can have multiple symbol tables, it is necessary to either iterate over the file's section headers, or to follow a reference from another section in order to access one.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> <span class="br0">&#123;</span>
	Elf32_Word		st_name<span class="sy4">;</span>
	Elf32_Addr		st_value<span class="sy4">;</span>
	Elf32_Word		st_size<span class="sy4">;</span>
	<span class="kw4">uint8_t</span>			st_info<span class="sy4">;</span>
	<span class="kw4">uint8_t</span>			st_other<span class="sy4">;</span>
	Elf32_Half		st_shndx<span class="sy4">;</span>
<span class="br0">&#125;</span> Elf32_Sym<span class="sy4">;</span></pre></div></div>
<p>Each symbol table entry contains a number of notable bits of information such as the symbol name (<b>st_name</b>, may be <b>STN_UNDEF</b>), the symbol's value (<b>st_value</b>, may be absolute or relative address of value), and the field <b>st_info</b> which contains both the symbol type and binding. As an aside, the first entry in each symbol table is a NULL entry, so all of it's fields are 0.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1"><span class="co2"># define ELF32_ST_BIND(INFO)	((INFO) &gt;&gt; 4)</span>
<span class="co2"># define ELF32_ST_TYPE(INFO)	((INFO) &amp; 0x0F)</span>
&#160;
<span class="kw2">enum</span> StT_Bindings <span class="br0">&#123;</span>
	STB_LOCAL		<span class="sy1">=</span> <span class="nu0">0</span>, <span class="co1">// Local scope</span>
	STB_GLOBAL		<span class="sy1">=</span> <span class="nu0">1</span>, <span class="co1">// Global scope</span>
	STB_WEAK		<span class="sy1">=</span> <span class="nu0">2</span>  <span class="co1">// Weak, (ie. __attribute__((weak)))</span>
<span class="br0">&#125;</span><span class="sy4">;</span>
&#160;
<span class="kw2">enum</span> StT_Types <span class="br0">&#123;</span>
	STT_NOTYPE		<span class="sy1">=</span> <span class="nu0">0</span>, <span class="co1">// No type</span>
	STT_OBJECT		<span class="sy1">=</span> <span class="nu0">1</span>, <span class="co1">// Variables, arrays, etc.</span>
	STT_FUNC		<span class="sy1">=</span> <span class="nu0">2</span>  <span class="co1">// Methods or functions</span>
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<p>As mentioned above, <b>st_info</b> contains both the symbol type and biding, so the 2 macros above provide access to the individual values. The enumeration <b>StT_Types</b> provides a number of possible symbol types, and <b>StB_Bindings</b> provides possible symbol bindings.
</p>
<h4> <span class="mw-headline" id="Accessing_the_Value_of_a_Symbol">Accessing the Value of a Symbol</span></h4>
<p>Some operation such as linking and relocation require the value of a symbol (or rather, the address thereof). Although the symbol table entries do define a field <b>st_value</b>, it may only contain a relative address. Below is an example of how to compute the absolute address of the value of the symbol. The code has been broken up into multple smaller section so that it is easier to understand.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">static</span> <span class="kw4">int</span> elf_get_symval<span class="br0">&#40;</span>Elf32_Ehdr <span class="sy2">*</span>hdr, <span class="kw4">int</span> table, uint idx<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span>table <span class="sy1">==</span> SHN_UNDEF <span class="sy3">||</span> idx <span class="sy1">==</span> SHN_UNDEF<span class="br0">&#41;</span> <span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span>
	Elf32_Shdr <span class="sy2">*</span>symtab <span class="sy1">=</span> elf_section<span class="br0">&#40;</span>hdr, table<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="kw4">uint32_t</span> symtab_entries <span class="sy1">=</span> symtab<span class="sy2">-</span><span class="sy1">&gt;</span>sh_size <span class="sy2">/</span> symtab<span class="sy2">-</span><span class="sy1">&gt;</span>sh_entsize<span class="sy4">;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span>idx <span class="sy1">&gt;=</span> symtab_entries<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		ERROR<span class="br0">&#40;</span><span class="st0">&quot;Symbol Index out of Range (%d:%u).<span class="es1">\n</span>&quot;</span>, table, idx<span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw1">return</span> ELF_RELOC_ERR<span class="sy4">;</span>
	<span class="br0">&#125;</span>
&#160;
	<span class="kw4">int</span> symaddr <span class="sy1">=</span> <span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>hdr <span class="sy2">+</span> symtab<span class="sy2">-</span><span class="sy1">&gt;</span>sh_offset<span class="sy4">;</span>
	Elf32_Sym <span class="sy2">*</span>symbol <span class="sy1">=</span> <span class="sy3">&amp;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>Elf32_Sym <span class="sy2">*</span><span class="br0">&#41;</span>symaddr<span class="br0">&#41;</span><span class="br0">&#91;</span>idx<span class="br0">&#93;</span><span class="sy4">;</span></pre></div></div>
<p>The above performs a check against both the symbol table index and the symbol index; if either is undefined, 0 is returned. Otherwise the section header entry for the symbol table at the given index is accessed. It then checks that the symbol table index is not outside the bounds of the symbol table. If the check fails an error message is displayed and an error code is returned, otherwise the symbol table entry at the given index is is retrieved.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1">	<span class="kw1">if</span><span class="br0">&#40;</span>symbol<span class="sy2">-</span><span class="sy1">&gt;</span>st_shndx <span class="sy1">==</span> SHN_UNDEF<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="co1">// External symbol, lookup value</span>
		Elf32_Shdr <span class="sy2">*</span>strtab <span class="sy1">=</span> elf_section<span class="br0">&#40;</span>hdr, symtab<span class="sy2">-</span><span class="sy1">&gt;</span>sh_link<span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw4">const</span> <span class="kw4">char</span> <span class="sy2">*</span>name <span class="sy1">=</span> <span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">char</span> <span class="sy2">*</span><span class="br0">&#41;</span>hdr <span class="sy2">+</span> strtab<span class="sy2">-</span><span class="sy1">&gt;</span>sh_offset <span class="sy2">+</span> symbol<span class="sy2">-</span><span class="sy1">&gt;</span>st_name<span class="sy4">;</span>
&#160;
		<span class="kw4">extern</span> <span class="kw4">void</span> <span class="sy2">*</span>elf_lookup_symbol<span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">char</span> <span class="sy2">*</span>name<span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw4">void</span> <span class="sy2">*</span>target <span class="sy1">=</span> elf_lookup_symbol<span class="br0">&#40;</span>name<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
		<span class="kw1">if</span><span class="br0">&#40;</span>target <span class="sy1">==</span> <span class="kw2">NULL</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="co1">// Extern symbol not found</span>
			<span class="kw1">if</span><span class="br0">&#40;</span>ELF32_ST_BIND<span class="br0">&#40;</span>symbol<span class="sy2">-</span><span class="sy1">&gt;</span>st_info<span class="br0">&#41;</span> <span class="sy3">&amp;</span> STB_WEAK<span class="br0">&#41;</span> <span class="br0">&#123;</span>
				<span class="co1">// Weak symbol initialized as 0</span>
				<span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span>
			<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="br0">&#123;</span>
				ERROR<span class="br0">&#40;</span><span class="st0">&quot;Undefined External Symbol&#160;:&#160;%s.<span class="es1">\n</span>&quot;</span>, name<span class="br0">&#41;</span><span class="sy4">;</span>
				<span class="kw1">return</span> ELF_RELOC_ERR<span class="sy4">;</span>
			<span class="br0">&#125;</span>
		<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="br0">&#123;</span>
			<span class="kw1">return</span> <span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>target<span class="sy4">;</span>
		<span class="br0">&#125;</span></pre></div></div>
<p>If the section to which the symbol is relative (given by <b>st_shndx</b>) is equal to <b>SHN_UNDEF</b>, the symbol is external and must be linked to its definition. The string table is retrieved for the current symbol table (the string table for a given symbol table is available in the table's section header in <b>sh_link</b>), and the symbol's name is found in the string table. Next the function <b>elf_lookup_symbol</b>() is used to find a symbol definition by name (this function is not provided, a minimal implementation always return NULL). If the symbol definition is found, it is returned. If the symbol has the <b>STB_WEAK</b> flag (is a weak symbol) 0 is returned, otherwise an error message is displayed and an error code returned.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1">	<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span>symbol<span class="sy2">-</span><span class="sy1">&gt;</span>st_shndx <span class="sy1">==</span> SHN_ABS<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="co1">// Absolute symbol</span>
		<span class="kw1">return</span> symbol<span class="sy2">-</span><span class="sy1">&gt;</span>st_value<span class="sy4">;</span>
	<span class="br0">&#125;</span> <span class="kw1">else</span> <span class="br0">&#123;</span>
		<span class="co1">// Internally defined symbol</span>
		Elf32_Shdr <span class="sy2">*</span>target <span class="sy1">=</span> elf_section<span class="br0">&#40;</span>hdr, symbol<span class="sy2">-</span><span class="sy1">&gt;</span>st_shndx<span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw1">return</span> <span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>hdr <span class="sy2">+</span> symbol<span class="sy2">-</span><span class="sy1">&gt;</span>st_value <span class="sy2">+</span> target<span class="sy2">-</span><span class="sy1">&gt;</span>sh_offset<span class="sy4">;</span>
	<span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div>
<p><br />
If the value of <b>sh_ndx</b> is equal to <b>SHN_ABS</b>, the symbol's value is absolute and is returned immediately. If <b>sh_ndx</b> doesn't contain a special value, that means the symbol is defined in the local ELF object. Since the value given by <b>sh_value</b> is relative to a section defined <b>sh_ndx</b>, the relevant section header entry is accessed, and the symbol's address is computed by adding the address of the file in memory to the symbol's value with its section offset.
</p>
<h3> <span class="mw-headline" id="The_String_Table">The String Table</span></h3>
<p>The string table conceptually is quite simple: it's just a number of consecutive zero-terminated strings. String literals used in the program are stored in one of the tables. There are a number of different string tables that may be present in an ELF object such as .strtab (the default string table), .shstrtab (the section string table) and .dynstr (string table for dynamic linking). Any time the loading process needs access to a string, it uses an offset into one of the string tables. The offset may point to the beginning of a zero-terminated string or somewhere in the middle or even to the zero terminator itself, depending on usage and scenario. The size of the string table itself is specified by <b>sh_size</b> in the corresponding section header entry.
</p><p>The simplest program loader may copy all string tables into memory, but a more complete solution would omit any that are not necessary during runtime such, notably those not flagged with <b>SHF_ALLOC</b> in their respective section header (such as .shstrtab, since section names aren't used in program runtime).
</p>
<h3> <span class="mw-headline" id="The_BSS_and_SHT_NOBITS">The BSS and SHT_NOBITS</span></h3>
<p>The BSS (the section named ".bss") is in the simplest way of describing it: A block of memory which has been zeroed. The BSS is the area in memory where variables with global lifetime that haven't been initialized (or have been initialized to 0 or NULL) are stored. The section header for the BSS defines its <b>sh_type</b> as <b>SHT_NOBITS</b>, which means that it isn't present in the file image, and must be allocated during runtime. A simple and naive way of allocating a BSS is to malloc some memory and zero it out with a memset. Failing to zero the BSS can cause unexpected behavious from any loaded programs. Another thing to note is that the BSS should be allocated before performing any operation that relies on relative addressing (such as relocation), as failing to do so can cause code to reference garbage memory or fault.
</p><p>While the BSS is one specific example, any section that is of type <b>SHT_NOBITS</b> and has the attribute <b>SHF_ALLOC</b> should be allocated early on during program loading. Since this tutorial is intended to be general and unspecific, the example below will follow the trend and use the simplest example for allocating sections.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">static</span> <span class="kw4">int</span> elf_load_stage1<span class="br0">&#40;</span>Elf32_Ehdr <span class="sy2">*</span>hdr<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	Elf32_Shdr <span class="sy2">*</span>shdr <span class="sy1">=</span> elf_sheader<span class="br0">&#40;</span>hdr<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="kw4">unsigned</span> <span class="kw4">int</span> i<span class="sy4">;</span>
	<span class="co1">// Iterate over section headers</span>
	<span class="kw1">for</span><span class="br0">&#40;</span>i <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> i <span class="sy1">&lt;</span> hdr<span class="sy2">-</span><span class="sy1">&gt;</span>e_shnum<span class="sy4">;</span> i<span class="sy2">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		Elf32_Shdr <span class="sy2">*</span>section <span class="sy1">=</span> <span class="sy3">&amp;</span>shdr<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy4">;</span>
&#160;
		<span class="co1">// If the section isn't present in the file</span>
		<span class="kw1">if</span><span class="br0">&#40;</span>section<span class="sy2">-</span><span class="sy1">&gt;</span>sh_type <span class="sy1">==</span> SHT_NOBITS<span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="co1">// Skip if it the section is empty</span>
			<span class="kw1">if</span><span class="br0">&#40;</span><span class="sy3">!</span>section<span class="sy2">-</span><span class="sy1">&gt;</span>sh_size<span class="br0">&#41;</span> <span class="kw1">continue</span><span class="sy4">;</span>
			<span class="co1">// If the section should appear in memory</span>
			<span class="kw1">if</span><span class="br0">&#40;</span>section<span class="sy2">-</span><span class="sy1">&gt;</span>sh_flags <span class="sy3">&amp;</span> SHF_ALLOC<span class="br0">&#41;</span> <span class="br0">&#123;</span>
				<span class="co1">// Allocate and zero some memory</span>
				<span class="kw4">void</span> <span class="sy2">*</span>mem <span class="sy1">=</span> <span class="kw3">malloc</span><span class="br0">&#40;</span>section<span class="sy2">-</span><span class="sy1">&gt;</span>sh_size<span class="br0">&#41;</span><span class="sy4">;</span>
				<span class="kw3">memset</span><span class="br0">&#40;</span>mem, <span class="nu0">0</span>, section<span class="sy2">-</span><span class="sy1">&gt;</span>sh_size<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
				<span class="co1">// Assign the memory offset to the section offset</span>
				section<span class="sy2">-</span><span class="sy1">&gt;</span>sh_offset <span class="sy1">=</span> <span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>mem <span class="sy2">-</span> <span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>hdr<span class="sy4">;</span>
				DEBUG<span class="br0">&#40;</span><span class="st0">&quot;Allocated memory for a section (%ld).<span class="es1">\n</span>&quot;</span>, section<span class="sy2">-</span><span class="sy1">&gt;</span>sh_size<span class="br0">&#41;</span><span class="sy4">;</span>
			<span class="br0">&#125;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>The example above allocates as much memory as necessary for the section, described by the <b>sh_size</b> field of the section's header. Although the function in the example only seeks out sections that needs to be allocated, it can be modified to perform other operation that should be performed early on into the loading process.
</p>
<h3> <span class="mw-headline" id="Relocation_Sections">Relocation Sections</span></h3>
<p>Relocatable ELF files have many uses in kernel programming, especially as modules and drivers that can be loaded at startup, and are especially useful because they are position independent, thus can easily be placed after the kernel or starting at some convenient address, and don't require their own address space to function. The process of relocation itself is conceptually simple, but may get more difficult with the introduction of complex relocation types.
</p><p>Relocation starts with a table of relocation entries, which can be located using the relevant section header. There are actually two different kinds of relocation structures; one with an explicit added (section type <b>SHT_RELA</b>), one without (section type <b>SHT_REL</b>). Relocation entires in the table are continuous and the number of entries in a given table can be found by dividing the size of the table (given by <b>sh_size</b> in the section header) by the size of each entry (given by <b>sh_entsize</b>). Each relocation table is specific to a single section, so a single file may have multiple relocation tables (but all entries within a given table will be the same relocation structure type).
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> <span class="br0">&#123;</span>
	Elf32_Addr		r_offset<span class="sy4">;</span>
	Elf32_Word		r_info<span class="sy4">;</span>
<span class="br0">&#125;</span> Elf32_Rel<span class="sy4">;</span>
&#160;
<span class="kw4">typedef</span> <span class="kw4">struct</span> <span class="br0">&#123;</span>
	Elf32_Addr		r_offset<span class="sy4">;</span>
	Elf32_Word		r_info<span class="sy4">;</span>
	Elf32_Sword		r_addend<span class="sy4">;</span>
<span class="br0">&#125;</span> Elf32_Rela<span class="sy4">;</span></pre></div></div>
<p>The above are the definitions for the different structure types for relocations. Of note if the value stored in <b>r_info</b>, as the upper byte designates the entry in the symbol table to which the relocation applies, whereas the lower byte stores the type of relocation that should be applied. Note that an ELF file may have multiple symbol tables, thus the index of the section header table that refers to the symbol table to which these relocation apply can be found in the <b>sh_link</b> field on this relocation table's section header. The value in <b>r_offset</b> gives the relative position of the symbol that is being relocated, within its section.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1"><span class="co2"># define ELF32_R_SYM(INFO)	((INFO) &gt;&gt; 8)</span>
<span class="co2"># define ELF32_R_TYPE(INFO)	((uint8_t)(INFO))</span>
&#160;
<span class="kw2">enum</span> RtT_Types <span class="br0">&#123;</span>
	R_386_NONE		<span class="sy1">=</span> <span class="nu0">0</span>, <span class="co1">// No relocation</span>
	R_386_32		<span class="sy1">=</span> <span class="nu0">1</span>, <span class="co1">// Symbol + Offset</span>
	R_386_PC32		<span class="sy1">=</span> <span class="nu0">2</span>  <span class="co1">// Symbol + Offset - Section Offset</span>
<span class="br0">&#125;</span><span class="sy4">;</span></pre></div></div>
<p>As previously mentioned, the <b>r_info</b> field in <b>Elf32_Rel</b>(<b>a</b>) refers to 2 separate values, thus the set of macro functions above can be used to attain the individual values; <b>ELF32_R_SYM</b>() provides access to the symbol index and <b>ELF32_R_TYPE</b>() provides access to the relocation type. The enumeration <b>RtT_Types</b> defines the relocation typs this tutorial will encompass.
</p>
<h4> <span class="mw-headline" id="Relocation_Example">Relocation Example</span></h4>
<p>Loading a relocatable ELF file entails processing all relocation entries present in the file (Remember to alloc allocate all <b>SHT_NOBITS</b> sections first!). This process starts with finding all the relocation tables in the file, which is done in the example code below.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1"><span class="co2"># define ELF_RELOC_ERR -1</span>
&#160;
<span class="kw4">static</span> <span class="kw4">int</span> elf_load_stage2<span class="br0">&#40;</span>Elf32_Ehdr <span class="sy2">*</span>hdr<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	Elf32_Shdr <span class="sy2">*</span>shdr <span class="sy1">=</span> elf_sheader<span class="br0">&#40;</span>hdr<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="kw4">unsigned</span> <span class="kw4">int</span> i, idx<span class="sy4">;</span>
	<span class="co1">// Iterate over section headers</span>
	<span class="kw1">for</span><span class="br0">&#40;</span>i <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> i <span class="sy1">&lt;</span> hdr<span class="sy2">-</span><span class="sy1">&gt;</span>e_shnum<span class="sy4">;</span> i<span class="sy2">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		Elf32_Shdr <span class="sy2">*</span>section <span class="sy1">=</span> <span class="sy3">&amp;</span>shdr<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy4">;</span>
&#160;
		<span class="co1">// If this is a relocation section</span>
		<span class="kw1">if</span><span class="br0">&#40;</span>section<span class="sy2">-</span><span class="sy1">&gt;</span>sh_type <span class="sy1">==</span> SHT_REL<span class="br0">&#41;</span> <span class="br0">&#123;</span>
			<span class="co1">// Process each entry in the table</span>
			<span class="kw1">for</span><span class="br0">&#40;</span>idx <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> idx <span class="sy1">&lt;</span> section<span class="sy2">-</span><span class="sy1">&gt;</span>sh_size <span class="sy2">/</span> section<span class="sy2">-</span><span class="sy1">&gt;</span>sh_entsize<span class="sy4">;</span> idx<span class="sy2">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
				Elf32_Rel <span class="sy2">*</span>reltab <span class="sy1">=</span> <span class="sy3">&amp;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>Elf32_Rel <span class="sy2">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>hdr <span class="sy2">+</span> section<span class="sy2">-</span><span class="sy1">&gt;</span>sh_offset<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#91;</span>idx<span class="br0">&#93;</span><span class="sy4">;</span>
				<span class="kw4">int</span> result <span class="sy1">=</span> elf_do_reloc<span class="br0">&#40;</span>hdr, reltab, section<span class="br0">&#41;</span><span class="sy4">;</span>
				<span class="co1">// On error, display a message and return</span>
				<span class="kw1">if</span><span class="br0">&#40;</span>result <span class="sy1">==</span> ELF_RELOC_ERR<span class="br0">&#41;</span> <span class="br0">&#123;</span>
					ERROR<span class="br0">&#40;</span><span class="st0">&quot;Failed to relocate symbol.<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy4">;</span>
					<span class="kw1">return</span> ELF_RELOC_ERR<span class="sy4">;</span>
				<span class="br0">&#125;</span>
			<span class="br0">&#125;</span>
		<span class="br0">&#125;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>Note that the code above only processes <b>Elf32_Rel</b> entries, but it can be modified to process entries with explicit addends as well. The code also relies on a function called <b>elf_do_reloc</b> which will be shown in the next example. This example function stops, displays an error message, and returns an error code if it's unable to process a relocation.
</p>
<h4> <span class="mw-headline" id="Relocating_a_Symbol">Relocating a Symbol</span></h4>
<p>As the following function is fairly complex, it's been broken up into smaller manageable chunks and explained in detail. Note that the code shown below assumes that the file being relocated is a relocatable ELF file (ELF executables and shared objects may also contain relocation entries, but are processed somewhat differently). Also note that <b>sh_info</b> for section headers of type <b>SHT_REL</b> and <b>SHT_RELA</b> stores the section header to which the relocation applies.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1"><span class="co2"># define DO_386_32(S, A)	((S) + (A))</span>
<span class="co2"># define DO_386_PC32(S, A, P)	((S) + (A) - (P))</span>
&#160;
<span class="kw4">static</span> <span class="kw4">int</span> elf_do_reloc<span class="br0">&#40;</span>Elf32_Ehdr <span class="sy2">*</span>hdr, Elf32_Rel <span class="sy2">*</span>rel, Elf32_Shdr <span class="sy2">*</span>reltab<span class="br0">&#41;</span> <span class="br0">&#123;</span>
	Elf32_Shdr <span class="sy2">*</span>target <span class="sy1">=</span> elf_section<span class="br0">&#40;</span>hdr, reltab<span class="sy2">-</span><span class="sy1">&gt;</span>sh_info<span class="br0">&#41;</span><span class="sy4">;</span>
&#160;
	<span class="kw4">int</span> addr <span class="sy1">=</span> <span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>hdr <span class="sy2">+</span> target<span class="sy2">-</span><span class="sy1">&gt;</span>sh_offset<span class="sy4">;</span>
	<span class="kw4">int</span> <span class="sy2">*</span>ref <span class="sy1">=</span> <span class="br0">&#40;</span><span class="kw4">int</span> <span class="sy2">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span>addr <span class="sy2">+</span> rel<span class="sy2">-</span><span class="sy1">&gt;</span>r_offset<span class="br0">&#41;</span><span class="sy4">;</span></pre></div></div>
<p>The above code defines the macro functions that are used to complete relocation calculations. It also retrieves the section header for the section wherein the symbol exists and computes a reference to the symbol. The variable <b>addr</b> denotes the start of the symbol's section, and <b>ref</b> is created by adding the offset to the symbol from the relocation entry.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1">	<span class="co1">// Symbol value</span>
	<span class="kw4">int</span> symval <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
	<span class="kw1">if</span><span class="br0">&#40;</span>ELF32_R_SYM<span class="br0">&#40;</span>rel<span class="sy2">-</span><span class="sy1">&gt;</span>r_info<span class="br0">&#41;</span> <span class="sy3">!</span><span class="sy1">=</span> SHN_UNDEF<span class="br0">&#41;</span> <span class="br0">&#123;</span>
		symval <span class="sy1">=</span> elf_get_symval<span class="br0">&#40;</span>hdr, reltab<span class="sy2">-</span><span class="sy1">&gt;</span>sh_link, ELF32_R_SYM<span class="br0">&#40;</span>rel<span class="sy2">-</span><span class="sy1">&gt;</span>r_info<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
		<span class="kw1">if</span><span class="br0">&#40;</span>symval <span class="sy1">==</span> ELF_RELOC_ERR<span class="br0">&#41;</span> <span class="kw1">return</span> ELF_RELOC_ERR<span class="sy4">;</span>
	<span class="br0">&#125;</span></pre></div></div>
<p>Next the value of the symbol being relocated is accessed. If the symbol table index stored in <b>r_info</b> is undefined, then the value defaults to 0. The code also references a function called <b>elf_get_symval</b>(), which was implemented previously. If the value returned by the function is equal to <b>ELF_RELOC_ERR</b>, relocation is stopped and said error code is returned.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1">	<span class="co1">// Relocate based on type</span>
	<span class="kw1">switch</span><span class="br0">&#40;</span>ELF32_R_TYPE<span class="br0">&#40;</span>rel<span class="sy2">-</span><span class="sy1">&gt;</span>r_info<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
		<span class="kw1">case</span> R_386_NONE<span class="sy4">:</span>
			<span class="co1">// No relocation</span>
			<span class="kw1">break</span><span class="sy4">;</span>
		<span class="kw1">case</span> R_386_32<span class="sy4">:</span>
			<span class="co1">// Symbol + Offset</span>
			<span class="sy2">*</span>ref <span class="sy1">=</span> DO_386_32<span class="br0">&#40;</span>symval, <span class="sy2">*</span>ref<span class="br0">&#41;</span><span class="sy4">;</span>
			<span class="kw1">break</span><span class="sy4">;</span>
		<span class="kw1">case</span> R_386_PC32<span class="sy4">:</span>
			<span class="co1">// Symbol + Offset - Section Offset</span>
			<span class="sy2">*</span>ref <span class="sy1">=</span> DO_386_PC32<span class="br0">&#40;</span>symval, <span class="sy2">*</span>ref, <span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span>ref<span class="br0">&#41;</span><span class="sy4">;</span>
			<span class="kw1">break</span><span class="sy4">;</span>
		<span class="kw1">default</span><span class="sy4">:</span>
			<span class="co1">// Relocation type not supported, display error and return</span>
			ERROR<span class="br0">&#40;</span><span class="st0">&quot;Unsupported Relocation Type (%d).<span class="es1">\n</span>&quot;</span>, ELF32_R_TYPE<span class="br0">&#40;</span>rel<span class="sy2">-</span><span class="sy1">&gt;</span>r_info<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span>
			<span class="kw1">return</span> ELF_RELOC_ERR<span class="sy4">;</span>
	<span class="br0">&#125;</span>
	<span class="kw1">return</span> symval<span class="sy4">;</span>
<span class="br0">&#125;</span></pre></div></div>
<p>Finally, this segment of code details the actual relocation process, performing the necessary calculating the relocated symbol and returning it's value on success. If the relocation type is unsupported an error message is displayed, relocation is stopped and the function returns an error code. Assuming no errors have occurred, relocation is now complete.
</p>
<h2> <span class="mw-headline" id="The_ELF_Program_Header">The ELF Program Header</span></h2>
<p>The program header is a structure that defines information about how the ELF program behaves once it's been loaded, as well as runtime linking information. ELF program headers (much like section headers) are all grouped together to make up the program header table.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> <span class="br0">&#123;</span>
	Elf32_Word		p_type<span class="sy4">;</span>
	Elf32_Off		p_offset<span class="sy4">;</span>
	Elf32_Addr		p_vaddr<span class="sy4">;</span>
	Elf32_Addr		p_paddr<span class="sy4">;</span>
	Elf32_Word		p_filesz<span class="sy4">;</span>
	Elf32_Word		p_memsz<span class="sy4">;</span>
	Elf32_Word		p_flags<span class="sy4">;</span>
	Elf32_Word		p_align<span class="sy4">;</span>
<span class="br0">&#125;</span> Elf32_Phdr<span class="sy4">;</span></pre></div></div>
<p>The program header table contains a continuous set of program headers (thus they can be accessed as if they were an array). The table itself can be accessed using the <b>e_phoff</b> field defined in the ELF header, assuming that it is present. The header itself defines a number of useful fields like <b>p_type</b> which distinguishes between headers, <b>p_offset</b> which stores the offset to the segment the header refers to, and <b>p_vaddr</b> which defines the address at which position-dependent code should exist.
</p><p>TODO&#160;: Expand and Detail.
</p>
<h2> <span class="mw-headline" id="See_Also">See Also</span></h2>
<h3> <span class="mw-headline" id="Articles"> Articles </span></h3>
<ul><li> <a href="ELF" title="ELF">ELF</a>
</li><li> <a href="Modular_Kernel" title="Modular Kernel">Modular Kernel</a>
</li><li> <a href="System_V_ABI" title="System V ABI">System V ABI</a>
</li></ul>
<h3> <span class="mw-headline" id="External_Links"> External Links </span></h3>
<ul><li> <a rel="nofollow" class="external text" href="http://docs.oracle.com/cd/E23824_01/html/819-0690/chapter6-46512.html#scrolltoc">ELF Format Specifications</a> Detailed and up-to-date ELF information (including SPARC in depth) by Oracle.
</li><li> <a rel="nofollow" class="external text" href="http://www.sco.com/developers/gabi/latest/contents.html">System V ABI</a> about ELF 
</li><li> <a rel="nofollow" class="external text" href="http://www.linuxfoundation.org/en/Specifications">LSB specifications</a><br />See (generic or platform-specific) 'Core' specifications for additional ELF information.
</li><li> <a rel="nofollow" class="external autonumber" href="https://github.com/Bareflank/hypervisor/tree/master/bfelf_loader">[1]</a> Example ELF loader
</li><li> <a rel="nofollow" class="external autonumber" href="https://code.google.com/p/elf-loader/">[2]</a> Example ELF loader
</li></ul>

<!-- 
NewPP limit report
Preprocessor node count: 705/1000000
Post-expand include size: 2009/2097152 bytes
Template argument size: 627/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3429-0!*!0!!en!2!* and timestamp 20180121032217 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=ELF_Tutorial&amp;oldid=21476">http://wiki.osdev.org/index.php?title=ELF_Tutorial&amp;oldid=21476</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="http://wiki.osdev.org/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="Category:In_Progress" title="Category:In Progress">In Progress</a></li><li><a href="Category:Level_2_Tutorials" title="Category:Level 2 Tutorials">Level 2 Tutorials</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=ELF_Tutorial" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="ELF_Tutorial"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk" class="new"><span><a href="http://wiki.osdev.org/index.php?title=Talk:ELF_Tutorial&amp;action=edit&amp;redlink=1"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="ELF_Tutorial#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="ELF_Tutorial" >Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=ELF_Tutorial&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=ELF_Tutorial&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="ELF_Tutorial#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="http://wiki.osdev.org/index.php" id="searchform">
		<input type='hidden' name="title" value="Special:Search"/>
				<input type="search" name="search" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput" />		<input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" />		<input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" />			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="/Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="/Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="/OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="/OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="/OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="/Special:WhatLinksHere/ELF_Tutorial" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="/Special:RecentChangesLinked/ELF_Tutorial" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="/index.php?title=ELF_Tutorial&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="/index.php?title=ELF_Tutorial&amp;oldid=21476" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-skins/common/images/osdev.png);" href="/Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/ELF_Tutorial" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/ELF_Tutorial" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=ELF_Tutorial&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=ELF_Tutorial&amp;oldid=21476" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 5 September 2017, at 04:47.</li>
											<li id="footer-info-viewcount">This page has been accessed 46,736 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.039 secs. -->
	</body>
</html>
