<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>TLS Handshake - OSDev Wiki</title>
<meta charset="UTF-8" />
<meta name="generator" content="MediaWiki 1.18.0" />
<link rel="shortcut icon" href="favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "TLS_Handshake", "wgTitle": "TLS Handshake", "wgCurRevisionId": 19303, "wgArticleId": 3912, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["In Progress"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script>
<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #b1b100;}
.c.source-c .kw2 {color: #000000; font-weight: bold;}
.c.source-c .kw3 {color: #000066;}
.c.source-c .kw4 {color: #993333;}
.c.source-c .co1 {color: #666666; font-style: italic;}
.c.source-c .co2 {color: #339933;}
.c.source-c .coMULTI {color: #808080; font-style: italic;}
.c.source-c .es0 {color: #000099; font-weight: bold;}
.c.source-c .es1 {color: #000099; font-weight: bold;}
.c.source-c .es2 {color: #660099; font-weight: bold;}
.c.source-c .es3 {color: #660099; font-weight: bold;}
.c.source-c .es4 {color: #660099; font-weight: bold;}
.c.source-c .es5 {color: #006699; font-weight: bold;}
.c.source-c .br0 {color: #009900;}
.c.source-c .sy0 {color: #339933;}
.c.source-c .st0 {color: #ff0000;}
.c.source-c .nu0 {color: #0000dd;}
.c.source-c .nu6 {color: #208080;}
.c.source-c .nu8 {color: #208080;}
.c.source-c .nu12 {color: #208080;}
.c.source-c .nu16 {color:#800080;}
.c.source-c .nu17 {color:#800080;}
.c.source-c .nu18 {color:#800080;}
.c.source-c .nu19 {color:#800080;}
.c.source-c .me1 {color: #202020;}
.c.source-c .me2 {color: #202020;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-text {line-height: normal;}
.source-text li, .source-text pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for text
 * CSS class: source-text, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.text.source-text .de1, .text.source-text .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.text.source-text  {font-family:monospace;}
.text.source-text .imp {font-weight: bold; color: red;}
.text.source-text li, .text.source-text .li1 {font-weight: normal; vertical-align:top;}
.text.source-text .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.text.source-text .li2 {font-weight: bold; vertical-align:top;}
.text.source-text .ln-xtra, .text.source-text li.ln-xtra, .text.source-text div.ln-xtra {background-color: #ffc;}
.text.source-text span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-python {line-height: normal;}
.source-python li, .source-python pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for python
 * CSS class: source-python, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.python.source-python .de1, .python.source-python .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.python.source-python  {font-family:monospace;}
.python.source-python .imp {font-weight: bold; color: red;}
.python.source-python li, .python.source-python .li1 {font-weight: normal; vertical-align:top;}
.python.source-python .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.python.source-python .li2 {font-weight: bold; vertical-align:top;}
.python.source-python .kw1 {color: #ff7700;font-weight:bold;}
.python.source-python .kw2 {color: #008000;}
.python.source-python .kw3 {color: #dc143c;}
.python.source-python .kw4 {color: #0000cd;}
.python.source-python .co1 {color: #808080; font-style: italic;}
.python.source-python .coMULTI {color: #808080; font-style: italic;}
.python.source-python .es0 {color: #000099; font-weight: bold;}
.python.source-python .br0 {color: black;}
.python.source-python .sy0 {color: #66cc66;}
.python.source-python .st0 {color: #483d8b;}
.python.source-python .nu0 {color: #ff4500;}
.python.source-python .me1 {color: black;}
.python.source-python .ln-xtra, .python.source-python li.ln-xtra, .python.source-python div.ln-xtra {background-color: #ffc;}
.python.source-python span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-TLS_Handshake action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">TLS Handshake</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="TLS_Handshake#mw-head">navigation</a>,
					<a href="TLS_Handshake#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div lang="en" dir="ltr" class="mw-content-ltr"><center>
<table style="border: 1px solid #cfcfbf; margin-top: 25px; margin-bottom: 25px; background-color: #f0f0ff; text-align: center;">
<tr>
<td>
<p><a href="File:Under_Construction.png" class="image" title="This page is under construction!"><img alt="This page is under construction!" src="images/1/14/Under_Construction.png" width="50" height="50" /></a>
This page is a work in progress and may thus be incomplete. Its content may be changed in the near future.
</p>
</td>
<td>
</td></tr></table>
</center>
<p>Any TLS communication starts with a TLS handshake, which establishes what protocol will be used. We will focus on this page about what happens when the TLS_DHE_RSA_WITH_AES_128_CBC_SHA cipher suite is used (see <a href="SSL/TLS" title="SSL/TLS">SSL/TLS</a> for more information about what this means)
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="TLS_Handshake#Handshake_Overview"><span class="tocnumber">1</span> <span class="toctext">Handshake Overview</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="TLS_Handshake#Client_Hello_Message"><span class="tocnumber">2</span> <span class="toctext">Client Hello Message</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="TLS_Handshake#Server_Hello_Message"><span class="tocnumber">3</span> <span class="toctext">Server Hello Message</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="TLS_Handshake#Certificate_Message"><span class="tocnumber">4</span> <span class="toctext">Certificate Message</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="TLS_Handshake#Key_Exchange"><span class="tocnumber">5</span> <span class="toctext">Key Exchange</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="TLS_Handshake#Server_Key_Exchange_Message"><span class="tocnumber">6</span> <span class="toctext">Server Key Exchange Message</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="TLS_Handshake#Server_Hello_Done_Message"><span class="tocnumber">7</span> <span class="toctext">Server Hello Done Message</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="TLS_Handshake#Client_Key_Exchange_Message"><span class="tocnumber">8</span> <span class="toctext">Client Key Exchange Message</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="TLS_Handshake#Change_Cipher_Spec_Message"><span class="tocnumber">9</span> <span class="toctext">Change Cipher Spec Message</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="TLS_Handshake#Another_Key_Exchange:_Elliptical_Curve_Diffie_Hellman_Ephemeral"><span class="tocnumber">10</span> <span class="toctext">Another Key Exchange: Elliptical Curve Diffie Hellman Ephemeral</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="TLS_Handshake#Another_Key_Exchange:_RSA"><span class="tocnumber">11</span> <span class="toctext">Another Key Exchange: RSA</span></a></li>
<li class="toclevel-1 tocsection-12"><a href="TLS_Handshake#SSL_Certificate_.28optional.29"><span class="tocnumber">12</span> <span class="toctext">SSL Certificate (optional)</span></a></li>
<li class="toclevel-1 tocsection-13"><a href="TLS_Handshake#Encrypted_Handshake_Message"><span class="tocnumber">13</span> <span class="toctext">Encrypted Handshake Message</span></a></li>
</ul>
</td></tr></table>
<h2> <span class="mw-headline" id="Handshake_Overview">Handshake Overview</span></h2>
<p>Most packets during the communication are of type Handshake (0x16) and are followed by a Handshake packet header:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> __attribute__<span class="br0">&#40;</span><span class="br0">&#40;</span>packed<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">uint8_t</span> content_type<span class="sy0">;</span>  <span class="co1">// 0x16</span>
	<span class="kw4">uint16_t</span> version<span class="sy0">;</span>
	<span class="kw4">uint16_t</span> length<span class="sy0">;</span>
<span class="br0">&#125;</span> TLSRecord<span class="sy0">;</span></pre></div></div>
<p>This header may be followed by another TLS header, such as a TLS Handshake header. Like for a TCP connection, a TLS connection starts with a handshake between the client and the server:
</p>
<ul><li> The client sends a Client Hello message, including a list of 32-byte list of random data and the list of its supported cipher suites. In our example we only send one supported cipher suite (code 0x0033)
</li><li> The server responds with a Server Hello message, telling the client what cipher suite is going to be used as well as its own 32-byte list of random data
</li><li> The server sends its certificates. These are used by the client to verify that it is actually talking to the site it thinks it is talking to, as opposed to a malicious site
</li><li> The server sends a Server Key Exchange message, initiating the key exchange and signing it with its public key
</li><li> The server sends a Server Hello Done message, indicating it is waiting for the client
</li><li> The client sends a Client Key Exchange message, containing its part of the key exchange transaction
</li><li> The client sends a Change Cipher Spec message
</li><li> The client sends a Encrypted Handshake Message
</li><li> The server sends a Change Cipher Spec
</li><li> The server sends a Encrypted Handshake Message
</li><li> The client and the server can communicate by exchanging encrypted Application Data messages
</li></ul>
<p>The Change Cipher Spec message tells the other party its is OK with the terms of the handshake.
</p><p>The Encrypted Handshake messages are the first ones to be sent encrypted. They contain a hash of the initial handshake messages and are here to ensure these were not tampered with.
</p><p>Any subsequent communication is of type Application Data and encrypted.
</p>
<h2> <span class="mw-headline" id="Client_Hello_Message">Client Hello Message</span></h2>
<p>The Client Hello message initiates the TLS handshake. It is composed of a specific header, followed by some (optional) extensions, followed by some optional padding. If some servers such as wikipedia.org are quite forgiving in the types of Client Hello messages they accept, others such as Google require the Client Hello message to be exactly 512 bytes (excluding the TLS Record header) and declare a server_name extension
</p><p>Here is an example of a Client Hello message:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="text source-text"><pre class="de1">0000   01 00 01 fc 03 03 57 16 ea ce ec 93 89 5c 4a 18
0010   d3 1c 5f 37 9b b3 05 b4 32 08 29 39 b8 3e e0 9f
0020   9a 96 ba be 0a 40 00 00 02 00 33 01 00 01 d1 ff
0030   01 00 01 00 00 00 00 16 00 14 00 00 11 77 77 77
0040   2e 77 69 6b 69 70 65 64 69 61 2e 6f 72 67 00 0d
0050   00 12 00 10 06 01 06 03 05 01 05 03 04 01 04 03
0060   02 01 02 03 00 0b 00 02 01 00 00 0a 00 06 00 04
0070   00 17 00 18 00 15 01 88 00 00 00 00 00 00 00 00
0080   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
...
01e0   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
01f0   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</pre></div></div>
<ul><li> 0x01: Client Hello handshake type
</li><li> 0x0001FC: size=508 (512-4)
</li><li> 0x0303: TLS 1.2
</li><li> 0x5716...0A40: 32-bytes random client data
</li><li> 0x00: session ID length=0 (if it was not null, it would be followed by the session ID)
</li><li> 0x0002: Cipher Suites Length=2 (1 cipher suite supported)
<ul><li> 0x0033: TLS_DHE_RSA_WITH_AES_128_CBC_SHA cipher suite code
</li></ul>
</li><li> 0x01: number of compression methods=1
<ul><li> 0x00: compression method=null
</li></ul>
</li><li> 0x01D1: extensions length=465
</li><li> 0xFF01: extension type=renegotiation_info
<ul><li> 0x0001: length=1
</li><li> 0x00: renegotiation info extension length=0
</li></ul>
</li><li> 0x0000: extension type=server_name (the domain name we are trying to contact)
<ul><li> 0x0016: length=22
</li><li> 0x0014: server name list length=20
</li><li> 0x00: server name type=host_name
</li><li> 0x0011: server name length=17
</li><li> 0x7777772E...7267: "www.wikipedia.org"
</li></ul>
</li><li> 0x000D: extension type=signature_algorithms (the signature algorithms supported)
<ul><li> 0x0012: length=18
</li><li> 0x0010: signature hash algorithms length=16
<ul><li> 0x0601: SHA512 + RSA
</li><li> 0x0603: SHA512 + ECDSA
</li><li> 0x0501: SHA384 + RSA
</li><li> 0x0503: SHA384 + ECDSA
</li><li> 0x0401: SHA256 + RSA
</li><li> 0x0403: SHA256 + ECDSA
</li><li> 0x0201: SHA1 + RSA
</li><li> 0x0203: SHA1 + ECDSA
</li></ul>
</li></ul>
</li><li> 0x000B: extension type=ec_point_formats (only used if you use elliptic curve cryptography)
<ul><li> 0x0002: length=2
</li><li> 0x02: EC point formats length=1
</li><li> 0x00: EC point format=uncompressed
</li></ul>
</li><li> 0x000A: extension type=elliptic_curves (Elliptic Curve types supported - only used if you use elliptic curve cryptography)
<ul><li> 0x0006: length=6
</li><li> 0x0004: elliptic curve length=4 (2 curves)
</li><li> 0x0017: secp256r1 elliptic curve
</li><li> 0x0018: secp384r1 elliptic curve
</li></ul>
</li><li> 0x0015: extension type=padding (we fill the rest of the 512 bytes with zeros)
<ul><li> 0x0188: length=392
</li><li> 0x0000...0000: 392 bytes of padding data
</li></ul>
</li></ul>
<h2> <span class="mw-headline" id="Server_Hello_Message">Server Hello Message</span></h2>
<p>The Server Hello message indicates which cipher suite is going to be used and provides some server random data that will be used later on.
</p><p>Here is a sample Server Hello message:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="text source-text"><pre class="de1">0000   02 00 00 4d 03 03 c8 ca 5c 5f 83 79 eb 8f 8a 16
0010   86 c2 07 d7 42 c7 ee b9 dc 71 b7 f1 71 9f eb 51
0020   66 24 b4 1e 4f 6c 20 e4 02 80 10 1d ea 7f aa ee
0030   5d 4f ac 53 49 29 25 ec 29 a8 b7 23 fa ef 24 d4
0040   47 2e 90 7b 99 36 2b 00 33 00 00 05 ff 01 00 01
0050   00</pre></div></div>
<ul><li> 0x02: Handshake type=Server Hello
</li><li> 0x00004D: length=77
</li><li> 0x0303: TLS version 1.2
</li><li> 0xC8CA...4F6C: 32-bytes server random data
</li><li> 0x20: session ID length=32
</li><li> 0xE402...362B: session ID (can be used in a future TLS connection to avoid going through the handshake again)
</li><li> 0x0033: cipher suite used=TLS_DHE_RSA_WITH_AES_128_CBC_SHA
</li><li> 0x00: compression method used=null
</li><li> 0x0005: extensions length=5
</li><li> 0xFF01: extension type=renegotiation_info
<ul><li> 0x0001: length=1
</li><li> 0x00: renegotiation info extension length=0
</li></ul>
</li></ul>
<h2> <span class="mw-headline" id="Certificate_Message">Certificate Message</span></h2>
<p>The server then sends a Certificate message containing its SSL Certificate chain. The first certificate is the server's SSL certificate. The next certificate is the certificate from a Certificate Authority (CA) which signed the first certificate. The next certificate signs the previous certificate, and so on. The last certificate in the chain should belong to a root CA and is self-signed (each TLS client should have a list of all the root CAs)
</p><p>Here is how the Certificate Message is encoded:
</p>
<ul><li> 0x0B: handshake type=Certificate
</li><li> 0x000C58: length=3160
</li><li> 0x000C55: certificates length=3157
<ul><li> 0x0007E2: certificate #1 Length=2018
<ul><li> 0x3082...C0F3: first certificate (ASN.1 encoded)
</li></ul>
</li><li> 0x00046D: certificate #2 length=1133
<ul><li> 0x3080...4998: second certificate (ASN.1 encoded)
</li></ul>
</li></ul>
</li></ul>
<h2> <span class="mw-headline" id="Key_Exchange">Key Exchange</span></h2>
<p>TLS encryption is performed using symmetric encryption. The client and server thus need to agree on a secret key. This is done in the key exchange protocol.
</p><p>In our example, TLS is using the DHE/RSA algorithms: the Diffie-Hellman Ephemeral protocol is used to come up with the secret key, and the server is using the RSA protocol to sign the numbers it sends to the client (the signature is linked to its SSL certificate) to ensure that a third party cannot inject a malicious number. The upside of DHE is that it is using a temporary key that will be discarded afterwards. Key exchange protocols such as DH or RSA are using numbers from the SSL certificate. As a result, a leak of the server's private key (for example through <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/Heartbleed">Heartbleed</a>) means that a previously recorded SSL/TLS encryption can be decrypted. Ephemeral key exchange protocols such as DHE or ECDHE offer so-called forward secrecy and are safe even if the server's private key is later compromised.
</p><p>Diffie-Hellman Ephemeral works as follows:
</p>
<ul><li> The server comes up with a secret number y, with a number g and a modulo p (p typically being a 1024 bit integer) and sends (p, g, pubKey=g<sup>y</sup> mod p) to the client in its "Server Key Exchange" message. It also sends a signature of the Diffie-Hellman parameters (see SSL Certificate section)
</li><li> The client comes up with a secret number x and sends pubKey=g<sup>x</sup> mod p to the server in its "Client Key Exchange" message
</li><li> The client and server derive a common key premaster_secret = (g<sup>x</sup>)<sup>y</sup> mod p = (g<sup>y</sup>)<sup>x</sup> mod p = g<sup>xy</sup> mod p. If p is large enough, it is extremely hard for anyone knowing only g<sup>x</sup> and g<sup>y</sup> (which were transmitted in clear) to find that key.
</li></ul>
<p>Because computing g<sup>xy</sup> mod p using 1024-bytes integers can be tedious in most programming languages, if security is not a concern, one way to avoid this is to use x=1. This way, premaster_secret is just g<sup>y</sup> mod p, a value directly sent by the server. The security in such a case is of course compromised.
</p><p>premaster_key is however only a first step. Both client and server uses the PRF function to come up with a 48-byte master secret. The PRF function is used once again to generate a 104-bytes series of data which will represent all the secret keys used in the conversation (the length may differ depending on the cipher suite used):
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="python source-python"><pre class="de1"><span class="co1"># g_y, g and p are provided in the Server Key Exchange message</span>
<span class="co1"># The client determines x</span>
premaster_secret <span class="sy0">=</span> <span class="kw2">pow</span><span class="br0">&#40;</span>g_y<span class="sy0">,</span> x<span class="sy0">,</span> p<span class="br0">&#41;</span>
&#160;
<span class="co1"># client_random and sever_random are the 32-bytes random data from the Client Hello and Server Hello messages</span>
master_secret <span class="sy0">=</span> PRF<span class="br0">&#40;</span>premaster_secret<span class="sy0">,</span> <span class="st0">&quot;master secret&quot;</span><span class="sy0">,</span> client_random + server_random<span class="sy0">,</span> <span class="nu0">48</span><span class="br0">&#41;</span>
keys <span class="sy0">=</span> PRF<span class="br0">&#40;</span>master_secret<span class="sy0">,</span> <span class="st0">&quot;key expansion&quot;</span><span class="sy0">,</span> server_random + client_random<span class="sy0">,</span> <span class="nu0">104</span><span class="br0">&#41;</span>
&#160;
<span class="co1"># The MAC keys are 20 bytes because we are using HMAC+SHA1</span>
client_write_MAC_key <span class="sy0">=</span> keys<span class="br0">&#91;</span><span class="nu0">0</span>:<span class="nu0">20</span><span class="br0">&#93;</span>
server_write_MAC_key <span class="sy0">=</span> keys<span class="br0">&#91;</span><span class="nu0">20</span>:<span class="nu0">40</span><span class="br0">&#93;</span>
<span class="co1"># The client and server keys are 16 bytes because we are using AES 128-bit aka a 128 bit = 16 bytes key</span>
client_write_key <span class="sy0">=</span> keys<span class="br0">&#91;</span><span class="nu0">40</span>:<span class="nu0">56</span><span class="br0">&#93;</span>
server_write_key <span class="sy0">=</span> keys<span class="br0">&#91;</span><span class="nu0">56</span>:<span class="nu0">72</span><span class="br0">&#93;</span>
<span class="co1"># The IVs are always 16 bytes because AES encrypts blocks of 16 bytes</span>
client_write_IV <span class="sy0">=</span> keys<span class="br0">&#91;</span><span class="nu0">72</span>:<span class="nu0">88</span><span class="br0">&#93;</span>
server_write_IV <span class="sy0">=</span> keys<span class="br0">&#91;</span><span class="nu0">88</span>:<span class="nu0">104</span><span class="br0">&#93;</span></pre></div></div>
<p>Note how different secret keys are used for the client and for the server, as well as for encryption and to compute the MAC.
</p>
<h2> <span class="mw-headline" id="Server_Key_Exchange_Message">Server Key Exchange Message</span></h2>
<p>The server then sends its part of the key exchange. In the following case it will send the Diffie-Hellman parameters p, g and pubKey=g<sup>y</sup>
</p>
<ul><li> 0x0C: handshake type=server key exchange
</li><li> 0x00030B: length=779
</li><li> 0x0100: p length=256
<ul><li> .....&#160;: 256-bytes p (1024-bit integer)
</li></ul>
</li><li> 0x0001: g length=1
<ul><li> 0x02: g = 2
</li></ul>
</li><li> 0x0100: pubKey length
<ul><li> ...&#160;: 256-bytes pubKey
</li></ul>
</li><li> 0x0601: signature hash algorithm used to sign the Diffie-Hellman parameters=SHA512+RSA
</li><li> 0x0100: signature length=256
<ul><li> ...&#160;: 256-bytes signature
</li></ul>
</li></ul>
<h2> <span class="mw-headline" id="Server_Hello_Done_Message">Server Hello Done Message</span></h2>
<p>This message indicates that the server is done and is awaiting for client input.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> __attribute__<span class="br0">&#40;</span><span class="br0">&#40;</span>packed<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">uint8_t</span> handshake_type<span class="sy0">;</span>  <span class="co1">// 0x0E</span>
	<span class="kw4">uint8_t</span> length<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span><span class="sy0">;</span>  <span class="co1">// 0x000000</span>
<span class="br0">&#125;</span> TLSServerHelloDone<span class="sy0">;</span></pre></div></div>
<h2> <span class="mw-headline" id="Client_Key_Exchange_Message">Client Key Exchange Message</span></h2>
<p>The client then sends its key exchange parameters: pubKey=g<sup>x</sup>
</p>
<ul><li> 0x10: handshake type=client key exchange
</li><li> 0x000102: length=258
</li><li> 0x0100: pubKey length=256
</li><li> ...: 256-bytes pubKey
</li></ul>
<h2> <span class="mw-headline" id="Change_Cipher_Spec_Message">Change Cipher Spec Message</span></h2>
<p>The client sends the Change Cipher Spec message to indicate it has completed its part of the handshake. The next message the server will expect is the Encrypted Handshake Message.
</p><p>The whole message (including the TLS Record header) is 6 bytes long:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="c source-c"><pre class="de1"><span class="kw4">typedef</span> <span class="kw4">struct</span> __attribute__<span class="br0">&#40;</span><span class="br0">&#40;</span>packed<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">uint8_t</span> content_type<span class="sy0">;</span>  <span class="co1">// 0x14</span>
        <span class="kw4">uint16_t</span> version<span class="sy0">;</span> <span class="co1">// 0x0303 for TLS 1.2</span>
	<span class="kw4">uint8_t</span> length<span class="sy0">;</span>  <span class="co1">// 0x01</span>
        <span class="kw4">uint8_t</span> content<span class="sy0">;</span>  <span class="co1">// 0x01</span>
<span class="br0">&#125;</span> TLSChangeCipherSpec<span class="sy0">;</span></pre></div></div>
<h2> <span class="mw-headline" id="Another_Key_Exchange:_Elliptical_Curve_Diffie_Hellman_Ephemeral">Another Key Exchange: Elliptical Curve Diffie Hellman Ephemeral</span></h2>
<p>If Diffie-Hellman is a very powerful algorithm, it requires very large numbers to be considered secure (1024-bit at minimum). A variant is Elliptical Curve Diffie-Hellman, which is much harder to break even with 256-bit numbers. Numerous TLS cipher suites now rely on the ECDHE_RSA key exchange instead of DHE_RSA, like in the TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA cipher suite.
</p><p>Elliptic Curve Diffie-Hellman works as follows: consider a point G = (x, y) on a curve y<sup>2</sup> = x<sup>3</sup> + a.x + b mod p. Both parties come up with secret numbers secret1 and secret2, and will send each other G.secret1 and G.secret2 (G.secret1 means multiplying the point G to secret1 using Elliptic Curve point multiplication). The shared secret key is G.secret1.secret2.
</p><p>TLS can use the ECDHE key exchange to come up with an ephemeral shared secret key the following way:
</p>
<ul><li> The server indicates in the Server Key Exchange message what type of curve is going to be used (secp256r1 is a very common one). This tells what parameters a, b, p and G to use (see <a rel="nofollow" class="external autonumber" href="http://www.secg.org/sec2-v2.pdf">[1]</a> to see the domain parameters for each curve)
</li><li> The server comes up with a random 256-bit number (or whatever the curve says) server_secret and sends pubKey = G*server_secret in the Server Key Exchange message. pubKey is sent as a 65-bytes block composed of the concatenation 0x04 | Gx | Gy (both numbers being 32-bytes long)
</li><li> The client comes up with a random 256-bit number client_secret and sends pubKey = G*client_secret in the Client Key Exchange message. pubKey is sent in the same format as the server's
</li><li> Both parties will derive premaster_secret by computing server_pubKey * client_secret = client_pubKey * server_secret = G * client_secret * server_secret. The x coordinate of this result is the premaster_secret
</li><li> Once premaster_secret is determined, the rest of the computation works the same regardless of the key exchange protocol used
</li></ul>
<p>Regarding how to compute elliptic curve point multiplication, Wikipedia offers <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication">more details</a>. Note that, because we are only dealing with integers, you should use <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/Modular_multiplicative_inverse">modular multiplicative inverse</a> instead of divisions.
</p><p>If you want to test Elliptic Curves in Python, <a rel="nofollow" class="external text" href="https://pypi.python.org/pypi/tinyec">TinyEC</a> is a very useful package (along with the <a rel="nofollow" class="external text" href="https://github.com/alexmgr/tinyec">source code</a> in pure Python):
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="python source-python"><pre class="de1"><span class="kw1">import</span> tinyec.<span class="me1">ec</span> <span class="kw1">as</span> ec
<span class="kw1">import</span> tinyec.<span class="me1">registry</span> <span class="kw1">as</span> reg
&#160;
<span class="co1"># Get the domain parameters for the named curve specified in the Server Key Exchange message</span>
curve <span class="sy0">=</span> reg.<span class="me1">get_curve</span><span class="br0">&#40;</span><span class="st0">&quot;secp256r1&quot;</span><span class="br0">&#41;</span>
&#160;
<span class="co1"># Comes up with a random 256-bit (32 bytes) client_secret</span>
<span class="co1"># curve.g is a point on the elliptic curve, defined by the domain parameters</span>
<span class="co1"># We multiply it with client_secret to obtain the public key</span>
client_pubKey <span class="sy0">=</span> curve.<span class="me1">g</span> * client_secret
<span class="co1"># Retrieved from the Server Key Exchange message</span>
server_pubKey <span class="sy0">=</span> ...
&#160;
<span class="me1">premaster_secret</span> <span class="sy0">=</span> <span class="br0">&#40;</span>server_pubKey * client_secret<span class="br0">&#41;</span>.<span class="me1">x</span></pre></div></div>
<h2> <span class="mw-headline" id="Another_Key_Exchange:_RSA">Another Key Exchange: RSA</span></h2>
<p>The RSA key exchange is by today's standard an old key exchange protocol and does not provide forward secrecy. It is however simpler to implement than ECDHE and still supported by multiple sites (for example, Google supports the RSA key exchange but not the simple Diffie-Hellman key exchange).
</p><p>With the RSA key exchange, the server does not send any "Server Key Exchange" message. Instead, the client decides the premaster_secret, which is a 48-bytes string composed of a two-bytes TLS version (0x0303 for TLS 1.2) followed by 46 random bytes. It then encrypts that premaster_secret using the <a rel="nofollow" class="external text" href="https://tools.ietf.org/html/rfc2313">PKCS #1 protocol</a> (aka RSA encryption version 1.5) as well as the key from the Web site's certificate as the public key. Because the public key is always the same, a leak of the Web site's private key would allow to decrypt previously recorded TLS conversations. This is why the RSA key exchange protocol offers no forward secrecy.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="python source-python"><pre class="de1"><span class="kw1">import</span> <span class="kw3">os</span>
<span class="kw1">from</span> Crypto.<span class="me1">Cipher</span> <span class="kw1">import</span> PKCS1_v1_5
<span class="kw1">from</span> Crypto.<span class="me1">PublicKey</span> <span class="kw1">import</span> RSA
&#160;
<span class="co1"># Come up with a random premaster_secret</span>
<span class="co1"># It is recommended to use a random generator from a crypto library if possible</span>
premaster_secret <span class="sy0">=</span> <span class="st0">'<span class="es0">\x</span>03<span class="es0">\x</span>03'</span> + <span class="kw3">os</span>.<span class="me1">urandom</span><span class="br0">&#40;</span><span class="nu0">46</span><span class="br0">&#41;</span>
&#160;
<span class="co1"># Retrieve the pubKey from the first certificate. This pubKey value (65-bytes for a 1024-bit public key) is stored in the ASN.1 format</span>
key <span class="sy0">=</span> RSA.<span class="me1">importKey</span><span class="br0">&#40;</span>pubKey<span class="br0">&#41;</span>
&#160;
<span class="co1"># Encrypt the premaster_secret</span>
cipher <span class="sy0">=</span> PKCS1_v1_5.<span class="kw3">new</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span>
encrypted_premaster_secret <span class="sy0">=</span> cipher.<span class="me1">encrypt</span><span class="br0">&#40;</span>premaster_secret<span class="br0">&#41;</span></pre></div></div>
<p>Without the Crypto.Cipher.PKCS1_v1_5 package:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="python source-python"><pre class="de1"><span class="kw1">import</span> <span class="kw3">os</span>
&#160;
<span class="co1"># Come up with a random premaster_secret</span>
premaster_secret <span class="sy0">=</span> <span class="st0">'<span class="es0">\x</span>03<span class="es0">\x</span>03'</span> + <span class="kw3">os</span>.<span class="me1">urandom</span><span class="br0">&#40;</span><span class="nu0">46</span><span class="br0">&#41;</span>
&#160;
<span class="co1"># Retrieve the pubKey from the first certificate (parse_ASN1 is a fictional function)</span>
RSA_n<span class="sy0">,</span> RSA_e <span class="sy0">=</span> parse_ASN1<span class="br0">&#40;</span>pubKey<span class="br0">&#41;</span>
&#160;
<span class="co1"># Encrypt the premaster_secret</span>
premaster_secret <span class="sy0">=</span> <span class="st0">'<span class="es0">\x</span>00<span class="es0">\x</span>02'</span> + <span class="st0">'<span class="es0">\x</span>42'</span> * <span class="br0">&#40;</span><span class="nu0">256</span> - <span class="nu0">3</span> - <span class="kw2">len</span><span class="br0">&#40;</span>premaster_secret<span class="br0">&#41;</span><span class="br0">&#41;</span> + <span class="st0">'<span class="es0">\x</span>00'</span> + premaster_secret
encrypted_premaster_secret <span class="sy0">=</span> <span class="kw2">pow</span><span class="br0">&#40;</span>to_int<span class="br0">&#40;</span>premaster_secret<span class="br0">&#41;</span><span class="sy0">,</span> RSA_e<span class="sy0">,</span> RSA_n<span class="br0">&#41;</span></pre></div></div>
<h2> <span class="mw-headline" id="SSL_Certificate_.28optional.29">SSL Certificate (optional)</span></h2>
<p>In order to prevent a Man-In-The-Middle attack (MITM), the server will sign the Diffie-Hellman parameters it sent to the client. Because the client may have never contacted the server before (and thus cannot securely obtain its public key), the client and server rely on a trusted third party known as a Certificate Authority (CA).
</p><p>In order to verify the signature using the RSA algorithm, the client need to do the following:
</p>
<ul><li> Retrieve the Certificate message sent by the server, which contains one or more certificates (look at a such a packet in Wireshark)
</li><li> Verify that the first certificate's RDN sequence (signedCertificate / subject:rdnSequence / rdnSequence) contains the Web site the client is trying to contact
</li><li> Get the RSA e and n values from the first certificate's public key (signedCertificate / subjectPublicKeyInfo / subjectPublicKey). Those parameters are encoded using the <a rel="nofollow" class="external text" href="https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One">ASN.1</a> format (as a verification, e is very often 65537, or 0x10001)
</li><li> Compute the hash of the whole DH parameters (as sent by the server) preceded with the client and server random data. The certificate indicates what type of hash to use (signedCertificate / subjectPublicKeyInfo / algorithm):
</li><li> Compute signature<sup>e</sup> mod n, convert it to a string and take the last 20 bytes (or more, depending on the hash function being used)
</li><li> Both computations should be the same
</li><li> Because this certificate is probably generated by an intermediate CA, the client needs to verify that certificate
</li><li> Compute the hash of the whole signedCertificate section and repeat the operation using the next certificate
</li><li> Follow the certificate chain up to the end. The last certificate should belong to a root CA (any TLS implementation should contain a list of the root CAs and their public key) and is self-signed
</li></ul>
<h2> <span class="mw-headline" id="Encrypted_Handshake_Message">Encrypted Handshake Message</span></h2>
<p>The TLS handshake is concluded with the two parties sending a hash of the complete handshake exchange, in order to ensure that a middleman did not try to conduct a downgrade attack.
</p><p>If your TLS client technically does not have to verify the Encrypted Handshake Message sent by the server, it needs to send a valid Encrypted Handshake Message of its own, otherwise the server will abort the TLS session.
</p><p>Here is what the client needs to do to create&#160;:
</p>
<ul><li> Compute a SHA256 hash of a concatenation of all the handshake communications (or SHA384 if the PRF is based on SHA384). This means the Client Hello, Server Hello, Certificate, Server Key Exchange, Server Hello Done and Client Key Exchange messages. Note that you should concatenate only the handshake part of each TLS message (i.e. strip the first 5 bytes belonging to the TLS Record header)
</li><li> Compute PRF(master_secret, "client finished", hash, 12) which will generate a 12-bytes hash
</li><li> Append the following header which indicates the hash is 12 bytes: 0x14 0x00 0x00 0x0C
</li><li> Encrypt the 0x14 0x00 0x00 0x0C | [12-bytes hash] (see the Encrypting / Decrypting data section). This will generate a 64-bytes ciphertext using AES-CBC and 40 bytes with AES-GCM
</li><li> Send this ciphertext wrapped in a TLS Record
</li></ul>
<p>The server will use a similar algorithm, with two notable differences:
</p>
<ul><li> It needs to compute a hash of the same handshake communications as the client as well as the decrypted "Encrypted Handshake Message" message sent by the client (i.e. the 16-bytes hash starting with 0x1400000C)
</li><li> It will call PRF(master_secret, "server finished", hash, 12)
</li></ul>

<!-- 
NewPP limit report
Preprocessor node count: 151/1000000
Post-expand include size: 347/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3912-0!*!0!!en!2!* and timestamp 20180121080133 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=TLS_Handshake&amp;oldid=19303">http://wiki.osdev.org/index.php?title=TLS_Handshake&amp;oldid=19303</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="http://wiki.osdev.org/Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="Category:In_Progress" title="Category:In Progress">In Progress</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=TLS_Handshake" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="TLS_Handshake"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk" class="new"><span><a href="http://wiki.osdev.org/index.php?title=Talk:TLS_Handshake&amp;action=edit&amp;redlink=1"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="TLS_Handshake#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="TLS_Handshake" >Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=TLS_Handshake&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=TLS_Handshake&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="TLS_Handshake#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="http://wiki.osdev.org/index.php" id="searchform">
		<input type='hidden' name="title" value="Special:Search"/>
				<input type="search" name="search" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput" />		<input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" />		<input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" />			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="/Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="/Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="/OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="/OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="/OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="/Special:WhatLinksHere/TLS_Handshake" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="/Special:RecentChangesLinked/TLS_Handshake" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="/index.php?title=TLS_Handshake&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="/index.php?title=TLS_Handshake&amp;oldid=19303" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 31 May 2016, at 21:10.</li>
											<li id="footer-info-viewcount">This page has been accessed 4,841 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="/OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="/OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="/OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</sskins/common/images/osdev.png);" href="/Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/TLS_Handshake" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/TLS_Handshake" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=TLS_Handshake&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=TLS_Handshake&amp;oldid=19303" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 31 May 2016, at 21:10.</li>
											<li id="footer-info-viewcount">This page has been accessed 4,841 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.139 secs. -->
	</body>
</html>
