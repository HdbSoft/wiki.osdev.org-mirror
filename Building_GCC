<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>Building GCC - OSDev Wiki</title>
<meta charset="UTF-8" />
<meta name="generator" content="MediaWiki 1.18.0" />
<link rel="shortcut icon" href="favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.osdev.org/opensearch_desc.php" title="OSDev Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.osdev.org/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="OSDev Wiki Atom feed" href="http://wiki.osdev.org/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: wikidb:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "Building_GCC", "wgTitle": "Building GCC", "wgCurRevisionId": 21739, "wgArticleId": 3363, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": ["Level 1 Tutorials", "Compilers", "Tutorials"], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script>
<style type="text/css">/*<![CDATA[*/
.source-bash {line-height: normal;}
.source-bash li, .source-bash pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for bash
 * CSS class: source-bash, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.bash.source-bash .de1, .bash.source-bash .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.bash.source-bash  {font-family:monospace;}
.bash.source-bash .imp {font-weight: bold; color: red;}
.bash.source-bash li, .bash.source-bash .li1 {font-weight: normal; vertical-align:top;}
.bash.source-bash .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.bash.source-bash .li2 {font-weight: bold; vertical-align:top;}
.bash.source-bash .kw1 {color: #000000; font-weight: bold;}
.bash.source-bash .kw2 {color: #c20cb9; font-weight: bold;}
.bash.source-bash .kw3 {color: #7a0874; font-weight: bold;}
.bash.source-bash .co0 {color: #666666; font-style: italic;}
.bash.source-bash .co1 {color: #800000;}
.bash.source-bash .co2 {color: #cc0000; font-style: italic;}
.bash.source-bash .co3 {color: #000000; font-weight: bold;}
.bash.source-bash .co4 {color: #666666;}
.bash.source-bash .es1 {color: #000099; font-weight: bold;}
.bash.source-bash .es2 {color: #007800;}
.bash.source-bash .es3 {color: #007800;}
.bash.source-bash .es4 {color: #007800;}
.bash.source-bash .es5 {color: #780078;}
.bash.source-bash .es_h {color: #000099; font-weight: bold;}
.bash.source-bash .br0 {color: #7a0874; font-weight: bold;}
.bash.source-bash .sy0 {color: #000000; font-weight: bold;}
.bash.source-bash .st0 {color: #ff0000;}
.bash.source-bash .st_h {color: #ff0000;}
.bash.source-bash .nu0 {color: #000000;}
.bash.source-bash .re0 {color: #007800;}
.bash.source-bash .re1 {color: #007800;}
.bash.source-bash .re2 {color: #007800;}
.bash.source-bash .re4 {color: #007800;}
.bash.source-bash .re5 {color: #660033;}
.bash.source-bash .ln-xtra, .bash.source-bash li.ln-xtra, .bash.source-bash div.ln-xtra {background-color: #ffc;}
.bash.source-bash span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-make {line-height: normal;}
.source-make li, .source-make pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for make
 * CSS class: source-make, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.make.source-make .de1, .make.source-make .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.make.source-make  {font-family:monospace;}
.make.source-make .imp {font-weight: bold; color: red;}
.make.source-make li, .make.source-make .li1 {font-weight: normal; vertical-align:top;}
.make.source-make .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.make.source-make .li2 {font-weight: bold; vertical-align:top;}
.make.source-make .kw1 {color: #666622; font-weight: bold;}
.make.source-make .kw2 {color: #990000;}
.make.source-make .co1 {color: #339900; font-style: italic;}
.make.source-make .co2 {color: #000099; font-weight: bold;}
.make.source-make .es0 {color: #000099; font-weight: bold;}
.make.source-make .br0 {color: #004400;}
.make.source-make .sy0 {color: #004400;}
.make.source-make .st0 {color: #CC2200;}
.make.source-make .nu0 {color: #CC2200;}
.make.source-make .re0 {color: #000088; font-weight: bold;}
.make.source-make .re1 {color: #0000CC; font-weight: bold;}
.make.source-make .re2 {color: #000088;}
.make.source-make .ln-xtra, .make.source-make li.ln-xtra, .make.source-make div.ln-xtra {background-color: #ffc;}
.make.source-make span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-text {line-height: normal;}
.source-text li, .source-text pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for text
 * CSS class: source-text, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.text.source-text .de1, .text.source-text .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.text.source-text  {font-family:monospace;}
.text.source-text .imp {font-weight: bold; color: red;}
.text.source-text li, .text.source-text .li1 {font-weight: normal; vertical-align:top;}
.text.source-text .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.text.source-text .li2 {font-weight: bold; vertical-align:top;}
.text.source-text .ln-xtra, .text.source-text li.ln-xtra, .text.source-text div.ln-xtra {background-color: #ffc;}
.text.source-text span.xtra { display:block; }

/*]]>*/
</style>
<style type="text/css">/*<![CDATA[*/
@import "http://wiki.osdev.org/index.php?title=MediaWiki:Geshi.css&amp;usemsgcache=yes&amp;action=raw&amp;ctype=text/css&amp;smaxage=18000";
/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Building_GCC action-view skin-vector">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<!-- content -->
		<div id="content">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<!-- firstHeading -->
			<h1 id="firstHeading" class="firstHeading">Building GCC</h1>
			<!-- /firstHeading -->
			<!-- bodyContent -->
			<div id="bodyContent">
								<!-- tagline -->
				<div id="siteSub">From OSDev Wiki</div>
				<!-- /tagline -->
								<!-- subtitle -->
				<div id="contentSub"></div>
				<!-- /subtitle -->
																<!-- jumpto -->
				<div id="jump-to-nav">
					Jump to: <a href="Building_GCC#mw-head">navigation</a>,
					<a href="Building_GCC#p-search">search</a>
				</div>
				<!-- /jumpto -->
								<!-- bodycontent -->
				<div lang="en" dir="ltr" class="mw-content-ltr"><table style="font-size:95%; line-height:1.5em; padding:0.25em; float:right; margin: 0 0 8px 15px; clear:right; border:1px solid #aaaaaa; background:#eee; text-align:center;;"><tr><th>Difficulty level</th></tr><tr><td><a href="File:Difficulty_1.png" class="image"><img alt="Difficulty 1.png" src="images/d/d3/Difficulty_1.png" width="46" height="14" /></a><br />Beginner</td></tr></table>
<p>In this tutorial we upgrade your system <a href="GCC" title="GCC">GCC</a> to the most recent version. This helps you build a <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC Cross-Compiler</a>, as it is recommended that you build the cross-compiler with the same compiler version. With some care, you don't have to bootstrap a new system compiler, but it is risky and can potentially create trouble. You should use the same major compiler release for your system compiler and your cross-compiler.
</p><p>See also the <a rel="nofollow" class="external text" href="http://gcc.gnu.org/install/">official instructions for building GCC</a>.
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="Building_GCC#Introduction"><span class="tocnumber">1</span> <span class="toctext">Introduction</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="Building_GCC#Do_I_need_to_bootstrap.3F"><span class="tocnumber">1.1</span> <span class="toctext">Do I need to bootstrap?</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="Building_GCC#Which_compiler_version_do_I_want.3F"><span class="tocnumber">1.2</span> <span class="toctext">Which compiler version do I want?</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="Building_GCC#Do_I_need_a_new_Binutils_as_well.3F"><span class="tocnumber">1.3</span> <span class="toctext">Do I need a new Binutils as well?</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="Building_GCC#Preparing_for_the_build"><span class="tocnumber">2</span> <span class="toctext">Preparing for the build</span></a>
<ul>
<li class="toclevel-2"><a href="Building_GCC#Downloading_the_Source_Code"><span class="tocnumber">2.1</span> <span class="toctext">Downloading the Source Code</span></a></li>
<li class="toclevel-2"><a href="Building_GCC#Linux_Users"><span class="tocnumber">2.2</span> <span class="toctext">Linux Users</span></a></li>
<li class="toclevel-2"><a href="Building_GCC#OS_X_Users"><span class="tocnumber">2.3</span> <span class="toctext">OS X Users</span></a></li>
<li class="toclevel-2"><a href="Building_GCC#Windows_Users"><span class="tocnumber">2.4</span> <span class="toctext">Windows Users</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-6"><a href="Building_GCC#The_Build"><span class="tocnumber">3</span> <span class="toctext">The Build</span></a>
<ul>
<li class="toclevel-2 tocsection-7"><a href="Building_GCC#Preparation"><span class="tocnumber">3.1</span> <span class="toctext">Preparation</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="Building_GCC#Binutils"><span class="tocnumber">3.2</span> <span class="toctext">Binutils</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="Building_GCC#GCC"><span class="tocnumber">3.3</span> <span class="toctext">GCC</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-10"><a href="Building_GCC#Using_the_new_Compiler"><span class="tocnumber">4</span> <span class="toctext">Using the new Compiler</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="Building_GCC#Building_the_Cross-Compiler"><span class="tocnumber">5</span> <span class="toctext">Building the Cross-Compiler</span></a></li>
</ul>
</td></tr></table>
<h2> <span class="mw-headline" id="Introduction"> Introduction </span></h2>
<p>Compilers are upgraded through a process called bootstrapping. At first you have your old system compiler that produces slow code and doesn't support all the new language features. You then use this old system compiler to build the new version of the compiler, hoping that the old compiler is able to build the new compiler (it supports all needed features). This produces a new compiler that produces fast code and supports all the new features, however the compiler itself is slow, because it was compiled with a compiler that produces slow code. In addition, the new compiler may be buggy because your old compiler was buggy, or perhaps the new compiler release has a bug.
</p><p>The next step is to use your new slow compiler that produces fast code, and then build the new compiler again. This produces a fast compiler that produces fast code. However, the first compiler we built could be buggy, and the compiler we just built using it may be defect. We need to verify the correctness of our new fast compiler that produces fast code.
</p><p>To solve that problem, we build the compiler <i>a third</i> time. Once we have built the third compiler using the second compiler, it should produce the very same output as the first compiler building the second, as both times we are using compilers that produce fast code and use the same source code. The compiler build system will then verify that the second and third compilers are identical, which gives you confidence in the bootstrap. If the second and third compilers are not identical, the bootstrap failed and you have encountered a compiler bug. Bootstrapping takes three times as long as just building a regular compiler, but it makes sure your toolchain is stable.
</p><p>The last thing to do is run the compiler test suite so you can verify that it works correctly.
</p><p>Notice how the same problems could occur if you use GCC 4.4 to build a GCC 4.8 cross-compiler. For that reason, it is recommended to use GCC 4.8 to build the GCC 4.8 cross-compiler, so you know no such problems could occur. You can't bootstrap a cross-compiler as it doesn't produce programs for the local operating system.
</p>
<h3> <span class="mw-headline" id="Do_I_need_to_bootstrap.3F"> Do I need to bootstrap? </span></h3>
<p>If your system compiler is the same major version as the compiler version you wish to build (for instance, if you have 4.6.2 and want 4.6.3), then you don't need to bootstrap. The minor releases are usually very compatible. You may be able to build another major version (such as 4.6.3 building 4.7.3) without a bootstrap, but it may not produce the ideal compiler. As the gap widens between the compiler versions, you are very likely to run into trouble. Each major compiler release is always able to build the next using a bootstrap. If you have the patience, it is possible to find a very old Linux system with a very old GCC release, and then bootstrap all the way up to the most recent GCC release, simply by iteratively upgrading a few major compiler releases at a time.
</p><p>You may also be able to upgrade your system compiler through other channels.
</p>
<h3> <span class="mw-headline" id="Which_compiler_version_do_I_want.3F"> Which compiler version do I want? </span></h3>
<p>The newest <a href="GCC" title="GCC">GCC</a> is recommended as it is the latest and greatest release. At this time, GCC 4.9.2 is the newest release. We recommend that you use the latest compiler release for your cross-compiler. You can also use older releases as they are usually reasonably good. If your local system compiler isn't too terribly old (at least GCC 4.6.0), you may wish to safe yourself the trouble and just pick the latest minor release (such as 4.6.3 if your system compiler is 4.6.1) for your cross-compiler. In that case, you don't need to bootstrap and you can proceed directly to building your <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC Cross-Compiler</a>.
</p><p>You can view your current compiler version by invoking:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="kw2">gcc</span> <span class="re5">--version</span></pre></div></div>
<p>If you have patience and wish to build yourself the latest and greatest cross-compiler, you'll want to bootstrap your system compiler before building your <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC Cross-Compiler</a>.
</p>
<h3> <span class="mw-headline" id="Do_I_need_a_new_Binutils_as_well.3F"> Do I need a new Binutils as well? </span></h3>
<p>It certainly couldn't hurt, but if your Binutils isn't too horribly out of date, it should be good enough for your new system compiler. You can view your current Binutils version by invoking:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="kw2">ld</span> <span class="re5">--version</span></pre></div></div>
<p>You probably need at least Binutils 2.22, or preferably the latest 2.25 release.
</p>
<h2> <span class="mw-headline" id="Preparing_for_the_build"> Preparing for the build </span></h2>
<p>The GNU Compiler Collection is an advanced piece of software with dependencies. You need to install certain dependencies in order to build gcc. You need to install GNU make, GNU bison, flex, and of course an existing system compiler you wish to replace. In addition, you also <i>need</i> the packages GNU GMP, GNU MPFR, and MPC that are used by GCC for floating point support.
</p><p>You need a host system with a working GCC installation, and enough memory as well as hard drive space. How much qualifies as "enough" is depending on the versions of the software involved, but GCC is a big piece of software, so don't be surprised when 128 or 256 MByte are not sufficient. 
</p><p>In short you need the following that you can install manually or through package management:
</p>
<ul><li> A Unix-like environment (Windows users)
</li><li> GCC (existing release you wish to replace)
</li><li> G++ (if building a version of GCC &gt;= 4.8.0)
</li><li> GNU Make
</li><li> GNU Bison
</li><li> Flex
</li><li> GNU GMP
</li><li> GNU MPFR
</li><li> GNU MPC
</li><li> Texinfo
</li><li> ISL (optional)
</li><li> CLooG (optional)
</li></ul>
<h3> <span class="mw-headline" id="Downloading_the_Source_Code"> Downloading the Source Code </span></h3>
<p>You can download the desired Binutils release by visiting the <a rel="nofollow" class="external text" href="https://gnu.org/software/binutils/">Binutils website</a> or directly accessing the <a rel="nofollow" class="external text" href="ftp://ftp.gnu.org/gnu/binutils/">GNU main FTP mirror</a>.
</p><p>You can download the desired GCC release by visiting the <a rel="nofollow" class="external text" href="https://gnu.org/software/gcc/">GCC website</a> or directly accessing the <a rel="nofollow" class="external text" href="ftp://ftp.gnu.org/gnu/gcc/">GNU main FTP mirror</a>.
</p><p>In addition, to build GCC you need to have installed GNU GMP, GNU MPFR, GNU Mpc and the ISL library. You may already have these libraries and the development files installed, but this tutorial builds them as part of GCC. If you don't need this, simply don't build them as part of GCC. Note that not all GMP, MPFR and Mpc combinations are compatible with a given GCC release. You also need Texinfo to build Binutils.
</p><p>You can download <a rel="nofollow" class="external text" href="http://gmplib.org/">GNU GMP from its website</a>. (libgmp3-dev on apt-based systems, dev-libs/gmp on Gentoo, gmp-devel on Fedora, libgmp-devel on Cygwin)
</p><p>You can download <a rel="nofollow" class="external text" href="http://mpfr.org/">GNU MPFR from its website</a>. (libmpfr-dev on apt-based systems, dev-libs/mpfr on Gentoo, mpfr-devel on Fedora, libmpfr-devel on Cygwin)
</p><p>You can download <a rel="nofollow" class="external text" href="http://isl.gforge.inria.fr/">ISL from its website</a> (optional). (libisl-dev on apt-based systems, libisl-devel on Cygwin)
</p><p>You can download <a rel="nofollow" class="external text" href="http://www.cloog.org/">ClooG from its website</a> (optional). (libcloog-isl-dev on apt-based systems, libcloog-isl-devel on Cygwin)
</p><p>You can download <a rel="nofollow" class="external text" href="http://multiprecision.org/">GNU Mpc from its website</a>. (libmpc-dev on apt-based systems, dev-libs/mpc on Gentoo, libmpc-devel on Fedora, libmpc-devel on Cygwin)
</p><p>You can download <a rel="nofollow" class="external text" href="https://www.gnu.org/software/texinfo/">GNU Texinfo from its website</a>. (texinfo on apt-based systems, texinfo on Arch Linux, sys-apps/texinfo on Gentoo, texinfo on Cygwin)
</p><p>Download the needed source code into a suitable directory such as <tt>$HOME/src</tt>.
</p>
An alternative way to download GMP, MPFR and Mpc is to go to the top level directory of the GCC source code (i.e. gcc-x.y.z/) and type the following:<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1">contrib<span class="sy0">/</span>download_prerequisites</pre></div></div> The download_prerequisites script will run and will download GMP, MPFR and Mpc.
<p><b>Note:</b> The versioning scheme used is that each fullstop separates a full number, i.e. Binutils 2.20.0 is newer than 2.9.0. This may be confusing, if you have not encountered this (quite common) versioning scheme yet, when looking at an alphanumerically sorted list of tarballs: The file at the bottom of the list is not the latest version! An easy way of getting the latest version is to sort by the last modified date and scrolling to the bottom.
</p><p><b>Note:</b> Version 5.x (or later) of Texinfo is known to be incompatible with the current Binutils 2.23.2 release (and older). You can check your current version using <tt>makeinfo --version</tt>. If your version is too new and you encounter problems during the build, you will need to either use Binutils 2.24 release (or newer) or install an older version of Texinfo - perhaps through building from source - and add it to your <tt>PATH</tt> prior and during the Binutils build.
</p><p><b>Note:</b> Version 0.13 (or later) of ISL is incompatible with the current CLooG 0.18.1 release (and older).  Use version 0.12.2 of ISL or the build <b>will</b> fail.
</p>
<h3> <span class="mw-headline" id="Linux_Users"> Linux Users </span></h3>
<p>Your distribution may ship its own patched GCC and Binutils that is customized to work on your particular Linux distribution. You may not be able to build a functional system compiler using the upstream sources you downloaded above. In that case, try a newer GCC release or get the patched source code. For instance, some GCC releases are known to not understand the new Debian multiarch directory structure. However, if the compiler we are about to build is a cross-compiler targetting another operating system (such as your new one), then this is much less a worry.
</p><p><b>Note for all Gentoo users:</b>
Gentoo, being a source-based distribution, makes it almost ridiculously easy to set up a cross-development toolchain:
</p>
<pre>   emerge -av crossdev
   crossdev --help
   PORTDIR_OVERLAY="/usr/local/crossdev" crossdev --stage1 --binutils &lt;binutils-version&gt; --gcc &lt;gcc-version&gt; --target &lt;target&gt;
</pre>
<p>This will install a GCC cross-compiler into a "slot", i.e. alongside already-existing compiler versions. You can install several cross-compilers that way, simply by changing target designations. An unfortunate downside is that it will also pull in gentoo patches and pass additional configure options that differ from the official <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC Cross-Compiler</a> setup, and they might behave differently.
</p><p>After the compilation ran, you can now use your cross-compiler by calling &lt;target&gt;-gcc. You can also use gcc-config to toggle between compiler versions should you need to do so. Don't replace your system compiler with a cross-compiler however. The package manager will also suggest updates as soon as they become available. 
</p><p>You can uninstall the cross-compiler by calling <i>crossdev --clean &lt;target&gt;</i>. Read the <a rel="nofollow" class="external text" href="http://www.gentoo.org/proj/en/base/embedded/cross-development.xml">cross-development</a> document for additional information.
</p><p>Note that the version numbers to binutils and gcc are <i>Gentoo package versions</i>, i.e. there might be a suffix to the "official" (GNU) version that addresses additional patchsets supplied by the Gentoo maintainers. (For example, <i>--binutils 2.24-r3 --gcc 4.8.3</i> is the latest stable package pair at the time of this writing.) You can omit the version numbers to use the latest package available.
</p><p>Portage uses overlays to store packages that are not part of the original package management. Crossdev needs one overlay where it can store its binutils and gcc packages before building them. You can configure one properly, or you can use PORTDIR_OVERLAY to point at where it should keep its package manager files. Using PORTDIR_OVERLAY is not a good idea with existing overlays, but by then you should know how you have personally set them up earlier anyway and how to do it properly.
</p>
<h3> <span class="mw-headline" id="OS_X_Users"> OS X Users </span></h3>
<p>Additionally, OS X users need a replacement libiconv because the system libiconv is seriously out of date. OS X users can download the latest libiconv release by visiting the <a rel="nofollow" class="external text" href="https://gnu.org/software/libiconv/">libiconv website</a> or directly accessing the <a rel="nofollow" class="external text" href="ftp://ftp.gnu.org/gnu/libiconv/">GNU main FTP mirror</a>.
</p><p>When compiling GCC 4.3 or higher on OS X 10.4 and 10.5, you may get unresolved symbol errors related to libiconv. This is because the version shipped with OS X is seriously out of date. Install a new version (compile it yourself or use MacPorts) and add <tt>--with-libiconv-prefix=/opt/local</tt> (or <tt>/usr/local</tt> if you compiled it yourself) to GCC's <tt>./configure</tt> line. Alternatively you may place the libiconv source as gcc-x.y.z/libiconv and it will be compiled as part of the GCC compilation process. (This trick also works for MPFR, GMP, and Mpc).
</p><p>The makefiles of Binutils and GCC use the <span class="mw-geshi make source-make"><span class="sy0">$</span><span class="br0">&#40;</span><span class="re2">CC</span><span class="br0">&#41;</span></span> variable to invoke the compiler. On OS X, this resolves to <span class="mw-geshi text source-text">GCC</span> by default, which is actually not the "real thing", but <span class="mw-geshi bash source-bash">Clang</span>. Note that since at least OS X 10.8, Xcode's Command Line Tools package comes with Clang, and this version of Clang does indeed work to compile a working version of GCC, unlike what these instructions previously reflected.
</p><p>Note that users running OS X 10.7 may need to find and install GCC, either from <a rel="nofollow" class="external text" href="http://brew.sh">Homebrew</a>, or from somewhere on Apple's website.
Thus, the instructions below are really only relevant for these users, but your mileage may vary.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="co0"># This is only necessary for OS X users running 10.7 or below.</span>
<span class="kw3">export</span> <span class="re2">CC</span>=<span class="sy0">/</span>usr<span class="sy0">/</span>bin<span class="sy0">/</span>gcc-<span class="nu0">4.2</span>
<span class="kw3">export</span> <span class="re2">CXX</span>=<span class="sy0">/</span>usr<span class="sy0">/</span>bin<span class="sy0">/</span>g++-<span class="nu0">4.2</span>
<span class="kw3">export</span> <span class="re2">CPP</span>=<span class="sy0">/</span>usr<span class="sy0">/</span>bin<span class="sy0">/</span>cpp-<span class="nu0">4.2</span>
<span class="kw3">export</span> <span class="re2">LD</span>=<span class="sy0">/</span>usr<span class="sy0">/</span>bin<span class="sy0">/</span>gcc-<span class="nu0">4.2</span></pre></div></div>
<p>You might want to unset these exports once you compiled and installed the cross compiler, as it might confuse other builds. <b>Do not</b> make these permanent!
</p><p><b>Note for Lion users:</b> If you're on Lion (or above) chances are that you don't have the "real" GCC since Apple removed it from the Xcode package, but you can still install it. You can do it via Homebrew or by compiling from source, both are perfectly described on <a rel="nofollow" class="external text" href="http://apple.stackexchange.com/a/38247">a StackExchange answer</a>.
</p><p><b>Note for Maverick users:</b> You can build binutils-2.24 and gcc-4.8.3 (possible other version) with Xcode 5.1.1. Note that building GCC with LLVM is not officially supported and may cause interesting bugs, if you are willing to take this risk and save time building host-gcc just to compile a cross-gcc, follow this.
Install GMP, MPFR, Mpc with <a rel="nofollow" class="external text" href="http://http://www.macports.org/">MacPorts</a>.
</p>
<pre>sudo port install gmp mpfr libmpc
</pre>
<pre>../binutils-2.24/configure --prefix=$PREFIX \
--target=$TARGET \
--enable-interwork --enable-multilib \
--disable-nls --disable-werror
</pre>
<pre>../gcc-4.8.3/configure --prefix=$PREFIX \
--target=$TARGET \
--disable-nls \
--enable-languages=c,c++ --without-headers \
--enable-interwork --enable-multilib \
--with-gmp=/usr --with-mpc=/opt/local --with-mpfr=/opt/local
</pre>
<ul><li>Note that there is issue with port's GMP, we use the version from OS X from /usr instead.
</li></ul>
<h3> <span class="mw-headline" id="Windows_Users"> Windows Users </span></h3>
<p>Windows users need to set up a Unix-like enviroment such as <a href="MinGW" title="MinGW">MinGW</a> or <a href="Cygwin" title="Cygwin">Cygwin</a>. It may well be worth looking into systems such as Linux and see if they fit your needs, as you commonly use a lot of Unix-like tools in operating systems development and this is much easier from a Unix-like operating system. <b>If you have just installed the basic <a href="Cygwin" title="Cygwin">Cygwin</a> package, you have to run the setup.exe again and install the following packages:</b> GCC, G++, Make, Flex, Bison, Diffutils, libintl-devel, libgmp-devel, libmpfr-devel, libmpc-devel, Texinfo
</p><p>MinGW + MSYS is an option, and as it addresses the native Windows API instead of a POSIX emulation layer, results in a slightly faster toolchain. Some software packages will not build properly under MSYS as they were not designed for use with Windows. As far as this tutorial is concerned, everything that applies to Cygwin also applies to MSYS unless otherwise specified. Make sure you install the C and C++ compilers, and the MSYS Basic System.
</p><p>The "Windows Subsystem for Linux (Beta)", released with the Windows 10 Anniversary update is also an option for using a cross compiler. (Tested 08/08/2016 with GCC 6.1.0 and Binutils 2.27) This cross-compiler works reasonably fast, although being in beta state, it may not be ideal permanent development platform.
</p><p><b>Cygwin note:</b> Cygwin includes your Windows <tt>%PATH%</tt> in its bash <tt>$PATH.</tt> If you were using DJGPP before, this could result in confusion as e.g. calling <tt>GCC</tt> on the Cygwin bash command line would still call the DJGPP compiler. After uninstalling DJGPP, you should delete the DJGPP environment variable and clear the <tt>C:\djgpp</tt> entry (or wherever you installed it) from your <tt>%PATH%</tt>. Likewise, it might be a bad idea to mix build environments in your system PATH variable.
</p><p><b>MinGW note:</b> Some MinGW-specific information on building a cross-toolchain can be found on the <a rel="nofollow" class="external text" href="http://www.mingw.org/wiki/HostedCrossCompilerHOWTO">hosted cross-compiler how-to page</a> on the MinGW homepage.
</p><p><b>Windows Subsystem for Linux (Beta) Note:</b> You cannot have your cross compiler in the /mnt/c/ (or /mnt/"x") areas, as trying to compile your cross-compiler there will generate errors, whereas building to $HOME/opt/cross works perfectly. This is fixed with Windows Update KB3176929
</p>
<h2> <span class="mw-headline" id="The_Build"> The Build </span></h2>
<p>You need to decide where to install your new compiler. It is dangerous to replace your current system compiler and installation into system directories is likely a very bad idea. You also need to decide whether the new compiler should be installed globally or just for you. If you want to install it just for you (recommended), installing into <tt>$HOME/opt/gcc-x.y.z</tt> is normally a good idea. If you want to install it globally, installing it into <tt>/usr/local/gcc-x.y.z</tt> is normally a good idea.
</p><p>Please note that we build everything out of the source directory tree, as is considered good practice. Some packages only support building outside, some only inside and some both (but may not offer extensive checking with make). Building GCC inside the source directory tree fails miserably, at least for older versions.
</p><p>As the build can take a long time, it is recommended to make use of make's "-jN" option. This will allow make to use multiple threads to compile the programs, which will speed up things a LOT. Substitute N with a number; a good guideline is the number of core you CPU has, plus one. So for a 4 core CPU, you'll want to use&#160;:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="kw2">make</span> <span class="re5">-j5</span></pre></div></div>
<h3> <span class="mw-headline" id="Preparation"> Preparation </span></h3>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="kw3">export</span> <span class="re2">PREFIX</span>=<span class="st0">&quot;<span class="es2">$HOME</span>/opt/gcc-x.y.z&quot;</span></pre></div></div>
<h3> <span class="mw-headline" id="Binutils"> Binutils </span></h3>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="kw3">cd</span> <span class="re1">$HOME</span><span class="sy0">/</span>src
<span class="kw2">mkdir</span> build-binutils
<span class="kw3">cd</span> build-binutils
..<span class="sy0">/</span>binutils-x.y.z<span class="sy0">/</span>configure <span class="re5">--prefix</span>=<span class="st0">&quot;<span class="es2">$PREFIX</span>&quot;</span> <span class="re5">--disable-nls</span> <span class="re5">--disable-werror</span>
<span class="kw2">make</span>
<span class="kw2">make</span> <span class="kw2">install</span></pre></div></div>
<p><b>--disable-nls</b> tells Binutils not not include native language support. This is basically optional, but reduces dependencies and compile time. It will also result in English-language diagnostics, which the people on the <a rel="nofollow" class="external text" href="http://forum.osdev.org/">Forum</a> understand when you ask your questions.
</p>
<h3> <span class="mw-headline" id="GCC"> GCC </span></h3>
<dl><dd><i>See also the <a rel="nofollow" class="external text" href="http://gcc.gnu.org/install/configure.html">offical instructions for configuring GCC</a>.</i>
</dd></dl>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="kw3">cd</span> <span class="re1">$HOME</span><span class="sy0">/</span>src
&#160;
<span class="co0"># If you wish to build these packages as part of GCC:</span>
<span class="kw2">mv</span> libiconv-x.y.z gcc-x.y.z<span class="sy0">/</span>libiconv <span class="co0"># Mac OS X users</span>
<span class="kw2">mv</span> gmp-x.y.z gcc-x.y.z<span class="sy0">/</span>gmp
<span class="kw2">mv</span> mpfr-x.y.z gcc-x.y.z<span class="sy0">/</span>mpfr
<span class="kw2">mv</span> mpc-x.y.z gcc-x.y.z<span class="sy0">/</span>mpc
&#160;
<span class="kw2">mkdir</span> build-gcc
<span class="kw3">cd</span> build-gcc
..<span class="sy0">/</span>gcc-x.y.z<span class="sy0">/</span>configure <span class="re5">--prefix</span>=<span class="st0">&quot;<span class="es2">$PREFIX</span>&quot;</span> <span class="re5">--disable-nls</span> <span class="re5">--enable-languages</span>=c,<span class="kw2">c++</span>
<span class="kw2">make</span>
<span class="kw2">make</span> <span class="kw2">install</span></pre></div></div>
<p><b>--disable-nls</b> is the same as for Binutils above.
</p><p><b>--enable-languages</b> tells GCC to not to compile all the other language frontends it supports, but only C and C++. Even if you aren't going to use C++ to make your OS, you'll need it later on to port GCC.
</p><p><b>--disable-bootstrap</b> tells the compiler to not bootstrap itself against the current system compiler. This results in a much quicker compilation, but if the current and the new compiler differ too much in version, you will get a less robust compiler or weird errors.
</p><p>Building and bootstrapping GCC may take quite a while, so sit back and relax, and enjoy that you are about to use the latest and greatest version of the GNU Compiler Collection.
</p><p>Before you run <tt>make install</tt> and install the new compiler, if you have some additional patience, read the <a rel="nofollow" class="external text" href="http://gcc.gnu.org/install/test.html">official testing instructions</a> and test your compiler for defects.
</p>
<h2> <span class="mw-headline" id="Using_the_new_Compiler"> Using the new Compiler </span></h2>
<p>You can now run your new compiler by invoking something like:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="co4">$</span>HOME<span class="sy0">/</span>opt<span class="sy0">/</span>gcc-x.y.z<span class="sy0">/</span>bin<span class="sy0">/</span><span class="kw2">gcc</span> <span class="re5">--version</span></pre></div></div>
<p>To use your new compiler simply by invoking <tt>gcc</tt>, add <tt>$HOME/opt/gcc-x.y.z/bin</tt> to your <tt>$PATH</tt> by typing:
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="bash source-bash"><pre class="de1"><span class="kw3">export</span> <span class="re2">PATH</span>=<span class="st0">&quot;<span class="es2">$HOME</span>/opt/gcc-x.y.z/bin:<span class="es2">$PATH</span>&quot;</span></pre></div></div>
<p>This command will add your new compiler to your PATH for this shell session. If you wish to use it permanently, add the PATH command to your <tt>~/.profile</tt> configuration shell script or similar. Consult your shell documentation for more information.
</p>
<h2> <span class="mw-headline" id="Building_the_Cross-Compiler"> Building the Cross-Compiler </span></h2>
<dl><dd><i>Main article:</i> <a href="GCC_Cross-Compiler" title="GCC Cross-Compiler">GCC Cross-Compiler</a>
</dd></dl>
<p>Now that you have a system compiler that is up to date, you can build your cross-compiler for your new operating system. You can use the latest and greatest version of GCC as your cross-compiler safely because you use the same version to build it. Once you have built the actual cross-compiler, you can uninstall the compiler we built in this tutorial by removing the installation directory. The cross-compiler will not depend on the compiler that built it, just like our new compiler doesn't depend on the old system compiler it replaced.
</p>
<!-- 
NewPP limit report
Preprocessor node count: 236/1000000
Post-expand include size: 12964/2097152 bytes
Template argument size: 62/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key wikidb:pcache:idhash:3363-0!*!0!!en!2!* and timestamp 20180121032022 -->
</div>				<!-- /bodycontent -->
								<!-- printfooter -->
				<div class="printfooter">
				Retrieved from "<a href="http://wiki.osdev.org/index.php?title=Building_GCC&amp;oldid=21739">http://wiki.osdev.org/index.php?title=Building_GCC&amp;oldid=21739</a>"				</div>
				<!-- /printfooter -->
												<!-- catlinks -->
				<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="http://wiki.osdev.org/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="Category:Level_1_Tutorials" title="Category:Level 1 Tutorials">Level 1 Tutorials</a></li><li><a href="Category:Compilers" title="Category:Compilers">Compilers</a></li><li><a href="Category:Tutorials" title="Category:Tutorials">Tutorials</a></li></ul></div></div>				<!-- /catlinks -->
												<div class="visualClear"></div>
				<!-- debughtml -->
								<!-- /debughtml -->
			</div>
			<!-- /bodyContent -->
		</div>
		<!-- /content -->
		<!-- header -->
		<div id="mw-head" class="noprint">
			
<!-- 0 -->
<div id="p-personal" class="">
	<h5>Personal tools</h5>
	<ul>
		<li id="pt-login"><a href="http://wiki.osdev.org/index.php?title=Special:UserLogin&amp;returnto=Building_GCC" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
	</ul>
</div>

<!-- /0 -->
			<div id="left-navigation">
				
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="Building_GCC"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk" class="new"><span><a href="http://wiki.osdev.org/index.php?title=Talk:Building_GCC&amp;action=edit&amp;redlink=1"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="Building_GCC#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
			</div>
			<div id="right-navigation">
				
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="Building_GCC" >Read</a></span></li>
					<li id="ca-viewsource"><span><a href="http://wiki.osdev.org/index.php?title=Building_GCC&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://wiki.osdev.org/index.php?title=Building_GCC&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="Building_GCC#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->

<!-- 2 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="http://wiki.osdev.org/index.php" id="searchform">
		<input type='hidden' name="title" value="Special:Search"/>
				<input type="search" name="search" title="Search OSDev Wiki [f]" accesskey="f" id="searchInput" />		<input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" />		<input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" />			</form>
</div>

<!-- /2 -->
			</div>
		</div>
		<!-- /header -->
		<!-- panel -->
			<div id="mw-panel" class="noprint">
				<!-- logo -->
					<div id="p-logo"><a style="background-image: url(/skins/common/images/osdev.png);" href="Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="/Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="/Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="skins/common/images/osdev.png);" href="/Main_Page"  title="Visit the main page"></a></div>
				<!-- /logo -->
				
<!-- navigation -->
<div class="portal" id='p-navigation'>
	<h5>Navigation</h5>
	<div class="body">
		<ul>
			<li id="n-mainpage"><a href="Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
			<li id="n-portal"><a href="http://forum.osdev.org/" rel="nofollow" title="About the project, what you can do, where to find things">Forums</a></li>
			<li id="n-FAQ"><a href="Category:FAQ">FAQ</a></li>
			<li id="n-OS-Projects"><a href="Projects">OS Projects</a></li>
			<li id="n-randompage"><a href="http://wiki.osdev.org/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
		</ul>
	</div>
</div>

<!-- /navigation -->

<!-- about -->
<div class="portal" id='p-about'>
	<h5>About</h5>
	<div class="body">
		<ul>
			<li id="n-This-site"><a href="OSDevWiki:About">This site</a></li>
			<li id="n-Joining"><a href="OSDevWiki:Joining">Joining</a></li>
			<li id="n-Editing-help"><a href="OSDevWiki:Editing">Editing help</a></li>
			<li id="n-recentchanges"><a href="http://wiki.osdev.org/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
		</ul>
	</div>
</div>

<!-- /about -->

<!-- SEARCH -->

<!-- /SEARCH -->

<!-- TOOLBOX -->
<div class="portal" id='p-tb'>
	<h5>Toolbox</h5>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://wiki.osdev.org/Special:WhatLinksHere/Building_GCC" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://wiki.osdev.org/Special:RecentChangesLinked/Building_GCC" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="http://wiki.osdev.org/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li><a href="http://wiki.osdev.org/index.php?title=Building_GCC&amp;printable=yes" rel="alternate">Printable version</a></li>
			<li id="t-permalink"><a href="http://wiki.osdev.org/index.php?title=Building_GCC&amp;oldid=21739" title="Permanent link to this revision of the page">Permanent link</a></li>
		</ul>
	</div>
</div>

<!-- /TOOLBOX -->

<!-- LANGUAGES -->

<!-- /LANGUAGES -->
			</div>
		<!-- /panel -->
		<!-- footer -->
		<div id="footer">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 22 November 2017, at 13:17.</li>
											<li id="footer-info-viewcount">This page has been accessed 47,443 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="OSDev_Wiki:Privacy_policy" title="OSDev Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="OSDev_Wiki:About" title="OSDev Wiki:About">About OSDev Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="OSDev_Wiki:General_disclaimer" title="OSDev Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<!-- /footer -->
		<!-- fixalpha -->
		<script type="text/javascript"> if ( window.isMSIE55 ) fixalpha(); </script>
		<!-- /fixalpha -->
		<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script>
<script src="http://wiki.osdev.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: wikidb:resourceloader:filter:minify-js:4:19a4b18a9ac79a6b8c60b24af4668814 */
}
</script><!-- Served in 0.039 secs. -->
	</body>
</html>
